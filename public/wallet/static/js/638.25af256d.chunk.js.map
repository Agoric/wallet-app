{"version":3,"file":"static/js/638.25af256d.chunk.js","mappings":"qMAQO,MAAMA,EAAoB,yBAgBpBC,EAAQC,GAAM,IAAIC,SAAQC,GAAWC,WAAWD,EAASF,KAMzDI,EAAgB,SAACC,GAAuB,IAAhBC,EAAgB,uDAAVD,EACzC,OAAOE,KAAKC,SAAWD,KAAKE,IAAIH,EAAKD,EACtC,EAOYK,EAAqB,WAA6C,IAA5CC,EAA4C,uDAAlC,EAAGC,EAA+B,uDAAxB,IAAON,EAAiB,uDAAX,IAClE,OAAOF,EAAc,GAAKO,EAAUC,EAAMN,EAC3C,EAQYO,EAAiBC,IAC5B,MAAMC,EAASX,EAAcY,KAE7B,OADAC,QAAQC,MAAO,aAAYJ,QAAYP,KAAKY,KAAKJ,QAC1ChB,EAAMgB,EAAb,EAWWK,EAAyB,SAACN,EAAOO,GAAqB,IAAhBV,EAAgB,uDAAN,EAC3D,MAAMW,EAAUZ,EAAmBC,GAKnC,OAJAM,QAAQM,IACL,YAAWT,QAAYP,KAAKY,KAAKG,uBAA6BX,IAC/DU,GAEKtB,EAAMuB,EACd,EAOYE,EAAuB,IAClCzB,EAAMK,EAAcqB,MAAuCC,MAAK,KAAM,IAE3DC,EAAuB,IAM3BC,QAAOC,IACZ,IACE,OAAOD,OAAOE,KAAKC,MAAMF,GAG1B,CAFC,MAAOG,GACP,MAAM,IAAIC,MAAO,+BAA8BD,EAAME,aAAaL,IACnE,KASQM,EAA4B,KACvC,MAAMC,EAAqB,YAErBC,EAAO,IAAIC,IAajB,OAAOC,EAAAA,EAAAA,IAAI,uBAAwB,CACjCC,aAAaC,EAAAA,EAAAA,SAAYC,GAbT,CAACC,EAAMC,KAEvB,GAAIP,EAAKQ,IAAIF,GACX,OAAON,EAAKS,IAAIH,GAEG,kBAAVC,GAAsBA,EAAMG,WAAWX,KAChDQ,EAAQA,EAAMI,MAAMZ,EAAmBa,SAEzC,MAAMC,GAAMX,EAAAA,EAAAA,IAAK,YAA4BK,IAAS,CAAC,GAEvD,OADAP,EAAKc,IAAIR,EAAMO,GACRA,CAAP,IAG+CV,aADjD,EC5GWY,EAAUC,IACrB,IAAK,IAAIC,EAAID,EAAEJ,OAAS,EAAGK,EAAI,EAAGA,GAAK,EAAG,CACxC,MAAMC,EAAIhD,KAAKiD,MAAMjD,KAAKC,UAAY8C,EAAI,IACpCG,EAAIJ,EAAEC,GACZD,EAAEC,GAAKD,EAAEE,GACTF,EAAEE,GAAKE,CACR,GCJUC,EAA4BC,UACvC,MAAM,YAAEC,EAAcpC,SAA+BqC,EAAAA,EAAAA,GAAEC,GAAQC,aAEzDC,GAAWzB,EAAAA,EAAAA,IAAI,mCAAoC,CACvD,CAAC0B,OAAOC,eAAgB,KAEtB,IAAIC,EACJ,OAAO5B,EAAAA,EAAAA,IAAI,mCAAoC,CAC7C6B,KAAMT,UACCQ,IACHA,EAAkBP,EAAY,2BAA2BlC,MACvD2C,GACMA,GACKR,EAAAA,EAAAA,GAAEC,GACN/C,OAAO,2BACPW,MAAK,IAAM2C,IAETA,KAIb,MAAMC,QAAkBH,EACxBA,OAAkBzB,EAClB,MAAM6B,EAAS3C,OAAO,CAEpB4C,OAAQ,KAEV,OAAO5C,OAAO,CACZ6C,MAAOF,EACPG,MAAOJ,GAFT,GApBJ,IA6BJ,OAAO/B,EAAAA,EAAAA,IAAI,0BAA2B,CACpCoC,kBAAmBhB,SAAYK,EAC/BY,gBAAiBjB,SAAYK,EAC7Ba,mBAAoBlB,UAClB,MAAM1B,MAAM,8CAAZ,GAJJ,GCrCM6C,QAASC,GAAMC,OAOVC,EAA6B,CAACC,EAAUC,KACnDH,OAAOI,MAAMC,QAAQH,GAAWH,CAAE,YAAWG,sBAW7C,OChBkC,SAACI,GAAkC,IAAvBH,EAAuB,uDAAP,CAAC,EAC/D,MAAM,cAAEI,EAAgBnE,EAAlB,OAA0CL,EAASF,GACvDsE,EAIF/B,EAAQkC,GAER,IAEIE,EAFAC,EAA8B,EAC9BC,EAAc,EAIlB,MAAM5B,GAASvB,EAAAA,EAAAA,IAAI,qBAAsB,CACvCwB,WAAY,IAAMoB,EAClBpE,OAAQ4C,SAAe5C,GAAUA,EAAOD,GACxC6E,MAAOhC,MAAO7C,EAAOO,EAAKV,KACxB,GAAI4E,EACF,OAAOA,EAAczE,EAAOO,EAAKV,GAEnC,MAAMU,CAAN,EAGFuE,aAAcC,GAAiBC,EAM/BC,aAAcpC,MAAO7C,EAAOkF,KAC1BlF,EAAS,GAAEA,4BAED,IAAIb,SAAQ,CAACC,EAAS+F,KAC9B,IAAIC,EAAgBT,EAEpB,MAAME,EAAQtE,IACZ,IAAKmE,EAAU,CACb,MAAM7E,EAAU+E,EAChBF,GAAW3B,EAAAA,EAAAA,GAAEC,GACV6B,MAAM7E,EAAOO,EAAKV,GAClBe,MAAK,KACJwE,GAAiBA,EAAgB,GAAKZ,EAAUrC,OAChDuC,EAAW,IAAX,GAEL,CAEDA,EACG9D,MAAK,IAAMX,GAAUA,EAAOD,KAE5BY,KAAKyE,EAAUF,GAClBP,GAAe,CAAf,EAGIS,EAAW,KACflG,QAAQC,UACLwB,MAAK,IAAMsE,EAASV,EAAUY,MAC9BxE,MAAK0E,IACJlG,EAAQ0B,OAAO,CAACwE,KAChBX,EAA8BS,EAC9BR,EAAc,CAAd,GACCC,EANL,EAWFQ,GAAU,OAMVL,EAAwBpC,EAA0BI,GACxD,OAAOA,CACR,CDzDQuC,CATUnB,EAASoB,KAAIC,IAC5BvB,OAAOwB,OAAOD,EAAS,SAAUxB,CAAE,WAAUwB,sBAKtCA,EAAQE,SAAS,OAASF,EAAW,UAASA,OAGjBpB,EAAtC,EAOWuB,EAA8B,SAACC,GAA+B,IAAjBC,EAAiB,uDAAP,CAAC,EACnE,MAAM,cAAErB,EAAgBnE,EAAlB,OAA0CL,EAASF,GACvD+F,EAEIjB,EAAQhC,MAAO7C,EAAOO,EAAKV,KAC/B,GAAI4E,EACF,OAAOA,EAAczE,EAAOO,EAAKV,GAEnC,MAAMU,CAAN,EAEF,IAAIV,EAAU,EACd,MAAMG,EAAQ,wBACd,OAAO,IAAIb,SAAQ,CAACC,EAAS+F,KAC3B,MAAMY,EAAalD,UACjB,MAAMmD,QAAiBC,MAAMJ,EAAc,CACzCK,QAAS,CAAEC,OAAQ,uBAEf,SAAE/B,SAAmB4B,EAASI,OAGpC,OADAvG,EAAU,EACHsE,EAA2BC,EAAU0B,EAA5C,EAEIO,EAAcxD,UAClBgC,EAAM7E,EAAOO,EAAKV,GACfe,MAAK,IAAMX,EAAOD,KAClBY,MAAK,IAAMmF,IAAanF,KAAKxB,EAASiH,KACtCC,MAAMnB,GACTtF,GAAW,CAAX,EAEFkG,IAAanF,KAAKxB,EAASiH,EAA3B,GAEH,EAOYN,EAAa,WAA4C,IAA3CQ,EAA2C,uDAA/BvH,EAAmB8G,EAAY,uCACpE,OAAIS,EAAUZ,SAAS,kBACdC,EAA4BW,EAAWT,GAEzC3B,EAA2B,CAACoC,GAAYT,EAChD,EErEYU,EAAuBC,IAClCC,EAAAA,EAAAA,KAAa3D,EAAAA,EAAAA,GAAE0D,GAAUE,gCA4BdC,EAA2BC,GACtC/F,OAAO,CACL,CAACqC,OAAOC,eAAgB,KACtB0D,OAtB2BC,GAuBzBhE,EAAAA,EAAAA,GAAE8D,GAAcG,oCApBfvF,EAAAA,EAAAA,IAAI,uBAAwB,CACjC6B,KAAMT,UACJ,MAAMoE,EAAUlE,EAAAA,EAAAA,IAAMgE,GAAOG,KAE7B,OADAH,EAAQhE,EAAAA,EAAAA,IAAMgE,GAAOI,KACdF,CAAP,IAP2BF,KAoBxB,IAcIK,EAAmB,CAAClE,EAAUmE,IACzCxE,kBACE,UAAW,MAAMc,KAAST,QAClBmE,EAAU1D,EAEnB,CACM2D,GA6BIC,EAAc,CAACC,EAAU1B,KAEpCrE,EAAAA,EAAAA,IAAI,uBAAwB,CAE1B,CAAC0B,OAAOC,eAAgB,KACtB,MAAMqE,GAAe1E,EAAAA,EAAAA,GAAEyE,GAAU1D,gBAAgBgC,GAC3C4B,GAAW3E,EAAAA,EAAAA,GAAE0E,GAActE,OAAOC,iBACxC,OAAO3B,EAAAA,EAAAA,IAAI,uBAAwB,CACjC6B,KAAM,KAAMP,EAAAA,EAAAA,GAAE2E,GAAUpE,QAD1B,I,qECzFN,MAAM,QAAEqE,GAAYC,EAYdC,EAAsB,IAAIC,WAAW,GACrCC,EAAoB,IAAIC,WAAW,CAAC,IAOpCC,EAA4B,SAACC,GAAwC,IAA3BC,EAA2B,uDAAf,WAC1D,MAAMC,EAAQF,EAAcA,EAAYG,MAAM,KAAO,GAC/CC,EAAMX,EAAS,GAAES,EAAMjG,UAAU+F,KACvC,OAAOpH,OAAO,CACZqH,YACAI,YAAaD,EAAI9C,KAAIgD,GAAMA,IAAMX,EAAsB,EAAIW,IAC3DC,gBAAiBV,GAEpB,EAOYW,EAAyB5H,OAAO,CAC3C,YA9BgCoH,GAChCpH,OAAO,CACLqH,UAAW,WACXI,YAAaZ,EAAS,iBAAgBO,OA4BxC,UAAWD,EACX,IARoCA,IA6BhCU,EAAK,IAAIC,YAMFC,EAA4BC,IACvC,MAAM,UAAEX,EAAF,YAAaI,EAAb,gBAA0BE,EAA1B,aAA2C5B,EAA3C,SAAyDJ,GAC7DqC,EACF,GAAIjC,GAAgBJ,EAClB,OAAO3F,OAAO,CACZ+F,eACAJ,aAGJ,IAAIsC,EAASR,EACc,kBAAhBA,IACTQ,EAASJ,EAAGK,OAAOT,IAErB,IAAIU,EAAaR,EAIjB,MAH+B,kBAApBA,IACTQ,EAAaN,EAAGK,OAAOP,IAElB3H,OAAO,CACZqH,YACAI,YAAaQ,EACbN,gBAAiBQ,GAHnB,EAsBWC,EAAkBrG,UAC7B,MAAMsG,QAAaC,EACnB,GAAoB,kBAATD,EACT,MA9DqCE,KACvCnF,OAAOwB,OAAO2D,EAAY,UAC1B,MAAMC,EAAQD,EAAWC,MAAM,kBAC/BpF,OACEoF,EACC,eAAcD,6CAEjB,MAAME,EAAOD,EAAM,GACbE,EAAYF,EAAM,GAClBG,EAAYf,EAAuBa,GAEzC,OADArF,OAAOuF,EAAY,oBAAmBF,KAC/BE,EAAUD,EAAjB,EAmDSE,CAA0BP,GAGnC,MAAM,UAAEhB,EAAF,aAAatB,EAAb,SAA2BJ,GAAa0C,EAC9C,OAAIhB,GAAatB,GAAgBJ,EACxBoC,EAA0BM,IAE/BQ,EAAAA,EAAAA,IAAeR,GArBiBtG,WACpC,MAAMiG,QAAgB/F,EAAAA,EAAAA,GAAE6G,GAASC,cACjC,OAAOhB,EAA0BC,EAAjC,EAoBSgB,CAAuBX,QAEhCjF,OAAO6F,KAAM,eAAcZ,oCAA3B,GC/GI,YAAEa,GAAgBC,GAClB,mBAAEC,GAAuBC,GACvBnG,QAASC,EAAGmG,MAAOC,GAAMnG,OAC3BoG,EAAc,IAAIC,YAclBC,EAAeC,GACnBA,GACgB,kBAATA,GACPnG,MAAMC,QAAQkG,EAAK/G,SACS,kBAArB+G,EAAKC,aACZ,oBAAoBC,KAAKF,EAAKC,aAM1BE,EAAa,CAACrI,EAAGiG,KACrB,GAAIjG,EAAEJ,SAAWqG,EAAErG,OACjB,OAAO,EAET,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAEJ,OAAQK,GAAK,EACjC,GAAID,EAAEC,KAAOgG,EAAEhG,GACb,OAAO,EAGX,OAAO,CAAP,EAGIqI,EAAyB,IAAI7C,WAO7B8C,EAAgBpH,IAEpB,MAAMwD,EAAO,GACb,IAAI6D,EAAQ,EACZ,IAAK,MAAMpH,KAASD,EAClBqH,GAAS,EACK,IAAVA,EACF7D,EAAK8D,KAAKrH,GAEVO,OAAO6F,KAAM,uCAAsCgB,KAKvD,OADA7G,OAAO+G,MAAM/D,EAAK/E,OAAQ,EAAG,yBACtB+E,EAAK,EAAZ,EAIIgE,EAAS,CAAC,SAAU,OAAQ,cCjBrBC,EAAetI,MAAOuI,EAAOC,EAAevF,KACvD,MAAMqD,QAAaD,EAAgBkC,IAC7B,UAAEjD,GAAcgB,EACtB,OAAIhB,EDuB4B,SAChCiB,GAGG,IAFHiC,EAEG,uDAFaC,EAChBxF,EACG,uDADO,CAAC,EAEX,MAAM,OACJyF,EAAS1K,IADL,aAEJ2K,EAAenK,IAFX,MAGJoK,EAAQ,aAHJ,QAIJC,EAAU,MACR5F,EAKE6F,EAAQpL,IAMZ,MALImL,IACF3I,EAAAA,EAAAA,GAAE2I,GACCC,MAAO,gDAAgDpL,GACvD+F,OAAMsF,GAAK1H,OAAO6F,KAAK9F,CAAE,6BAA4B2H,OAEpDrL,CAAN,EAGF2D,OAAOgH,EAAOvF,SAAS8F,GAAQxH,CAAE,oCAAmCwH,KAEpE,MAAMzL,EAAQ,kBACR6L,EAAe3C,EAAgBE,GAE/BpG,EACqB,oBAAlBqI,EAA+BA,IAAkBA,EAEpDS,EAAqB,IAAItK,IAKzBuK,EAA0BC,IAC9B,IAAIC,EAAUH,EAAmB9J,IAAIgK,GAKrC,OAJKC,IACHA,EAAU/B,EAAmBgC,QAAQF,GACrCF,EAAmBzJ,IAAI2J,EAAUC,IAE5BA,CAAP,EAGIE,EAAiBtJ,UACrB,MAAMa,QAAeX,EAAAA,EAAAA,GAAEC,GAAQiC,aAAajF,GAAO6C,UACjD,MAAMuJ,QAAeL,EAAwBC,GACvCK,QAAaD,EAAOE,YACpB,gBAAEC,GAAoBF,EAE5B,OADAnI,OAAOwB,OAAO6G,EAAiB,UACxBA,CAAP,IAEF,OAAOzB,EAAcpH,EAArB,EAII8I,EAAwB,IAAIhL,IAK5BiL,EAAqB5J,UACzB,GAAI2J,EAAsBzK,IAAIiK,GAAW,CAEvC,MAAMU,EAAcF,EAAsBxK,IAAIgK,GAE9C,OADA9H,OAAOwI,GACAA,CACR,CAED,MAAMC,QAAkBZ,EAAwBC,GAC1CU,EAAc1C,EAAY4C,eAAeD,GAE/C,OADAH,EAAsBnK,IAAI2J,EAAUU,GAC7BA,CAAP,EAMIG,EAA6BhK,UACjC,MAAM,UACJsF,EADI,YAEJI,EAFI,gBAGJE,EAAkBoC,SACVgB,EAEV3H,OAAOwB,OACLyC,EACA,SACAlE,CAAE,mCAAkCkE,KAEtCjE,OACEqE,EACAtE,CAAE,yCAAwCsE,KAI5C,MAAM7E,QAAeX,EAAAA,EAAAA,GAAEC,GAAQiC,aAAajF,GAAO6C,SACjDiK,EAAmBd,EAAU7D,EAAWI,GAAa3H,MACnDmM,IACS,CAAEA,SAAQ7L,MAAO,SAE1BA,IACS,CAAE6L,OAAQ,KAAM7L,eAKvB,OAAE6L,EAAF,MAAU7L,GAAU4J,EAAcpH,GACxC,GAAc,OAAVxC,EACF,MAAMA,EAIR,OAFAgD,OAAO6I,GAEe,IAAlBA,EAAO5K,OAEF4K,GAIT7I,OACE6I,EAAO5K,QAAUsG,EAAgBtG,OACjC8B,CAAE,oCAAmCwE,KAEvCvE,OACE0G,EAAWmC,EAAOC,SAAS,EAAGvE,EAAgBtG,QAASsG,GACvDxE,CAAE,GAAE8I,oCAAyCtE,KAExCsE,EAAO7K,MAAMuG,EAAgBtG,QAApC,EAOI8K,EAAwBpK,SACrBgK,GACLhK,MAAOmJ,EAAU7D,EAAWI,KAC1B,MAAMmE,QAAoBD,EAAmBT,GAC7C,OAAOjJ,EAAAA,EAAAA,GAAE2J,GAAaQ,cAAc/E,EAAWI,EAAa4E,EAA5D,IAQAC,EAA0BvK,SACvBgK,GACLhK,MAAOmJ,EAAU7D,EAAWI,KAC1B,MAAM6D,QAAeL,EAAwBC,GACvChG,QAAiBoG,EAAOiB,UAAU,CACtCC,KAAO,SAAQnF,QACfoF,KAAMhF,EACN4E,SACAK,OAAO,IAET,GAAsB,IAAlBxH,EAASyH,KACX,MAAM,IAAItM,MAAO,iCAAgC6E,EAASvF,OAE5D,MAAM,MAAEkD,GAAUqC,EAClB,OAAOrC,CAAP,IAQA+J,EAAqB7K,UACzB,GAAc,WAAV4I,EAEF,OAAOwB,EAAsBvC,GAAapE,MAAMqF,GAC3C,GAAc,SAAVF,EAET,OAAO2B,EAAwB1C,GAC1B,GAAc,eAAVe,EAAwB,CACjC,MAAMkC,QAAoBP,EAAwB1C,GAelD,OAZAuC,EAAsBvC,GAAa9J,MAAKgN,IAClChD,EAAWgD,EAAYD,IAG3BhC,EACEzH,OAAOhD,MACL+C,CAAE,iBAAgB0J,yBAAmCC,KAFzD,GAKCjC,GAGIgC,CACR,CAEDzJ,OAAO6F,KACL9F,CAAE,6BAA4BoG,EAC5BoB,iDAFJ,EAUIoC,EAAkBhL,UACtBqB,OAAOwB,OAAOgF,EAAa,UAC3B,IAAK,IAAI7K,EAAU,GAAKA,GAAW,EACjC,IAEE,aAAa6N,EAAmBhD,EAMjC,CALC,MAAOxJ,SAGD6B,EAAAA,EAAAA,GAAEC,GAAQ6B,MAAM7E,EAAOkB,EAAOrB,GACpC,QACD,CACF,EAOGiO,EAAoB,CAACpD,EAAa6C,KACtC,MAAMQ,EAAOzD,EAAYiB,OAAOgC,GAChC,IACE,MAAM9C,EAAOzJ,KAAKC,MAAM8M,GACxB,GAAIvD,EAAaC,GACf,OAAO3J,OAAO,CACZ4J,YAAasD,OAAOvD,EAAKC,aACzBhH,OAAQ+G,EAAK/G,OAAO8B,IAAI+F,IAS7B,CAHC,MAGD,CAMD,OAAOzK,OAAO,CACZ4J,cACAhH,OAAQ,CAAC6H,EAAOwC,KAFlB,EAYIE,EAAqCpL,MACzC0K,EACA7C,EACAwD,KAMO,CAAEvK,YAFP6H,GAAezI,EAAAA,EAAAA,GAAEyI,GAAc9J,YAAY6L,GAAQA,GAErC7C,cAAawD,uBAQ/B,SAAUC,EAAkBC,EAAYF,GACtC,IAAK,MAAMX,KAAQa,EAAW1K,aACtBuK,EACJV,EACAa,EAAW1D,YACXwD,EAGL,CAOD,SAAUG,EAAsBD,EAAYF,GAC1C,IAAK,IAAI1L,EAAI4L,EAAW1K,OAAOvB,OAAS,EAAGK,GAAK,EAAGA,GAAK,QAChDyL,EACJG,EAAW1K,OAAOlB,GAClB4L,EAAW1D,YACXwD,EAGL,CAOD,SAAUI,EAAkBF,EAAYF,GACtC,MAAM,OAAExK,GAAW0K,EACnB,GAAI1K,EAAOvB,OAAS,EAAG,CACrB,MAAMoM,EAAO7K,EAAOA,EAAOvB,OAAS,SAC9B8L,EACJM,EACAH,EAAW1D,YACXwD,EAEH,CACF,CAKDrL,eAAgBgB,IACd,IAAI6G,EACA6C,EACJ,OAAS,CACP,MAAMW,QAA2B/B,IACjC,GAAI+B,IAAuBxD,EAAa,OAGhC3H,EAAAA,EAAAA,GAAEC,GAAQ/C,OAAOD,GACvB,QACD,CAED,MAAMwO,QAAoBX,EAAgBK,GAC1C,GAA2B,IAAvBM,EAAYrM,OAAc,OAGtBY,EAAAA,EAAAA,GAAEC,GAAQ/C,OAAOD,GACvB,QACD,CACD,MAAMyO,EAAoBX,EACxBI,EACAM,GAGF9D,EAAcwD,OAODtM,IAAT2L,GAAsB3C,EAAW2C,EAAMiB,WAMpCF,EAAkBG,EAAmBP,GAC5CX,EAAOiB,EACR,CACF,CAMD3L,eAAgB6L,EAAwBC,GAKtC,IAAIC,EAKJ,IATA1K,OAAOwB,OAAOiJ,EAAmB,YASxB,CAEP,GADAC,QAAmBf,EAAgBc,GACT,IAAtBC,EAAWzM,OAAc,CAC3B,MAAM0M,EAAmBf,EACvBa,EACAC,SAEKT,EAAkBU,EAAkBF,GAC3C,KACD,OAGK5L,EAAAA,EAAAA,GAAEC,GAAQ/C,OAAOD,GACvB2O,QAA0BxC,GAC3B,CAID,OAAS,CACP,MAAM+B,QAA2B/B,IAEjC,GAAI+B,GAAsBS,EAAmB,OAGrC5L,EAAAA,EAAAA,GAAEC,GAAQ/C,OAAOD,GACvB,QACD,CASD,IAAI8O,EAAmBZ,EACnBa,QAAkBlB,EAAgBiB,GACtC,GAAyB,IAArBC,EAAU5M,OAAc,OAGpBY,EAAAA,EAAAA,GAAEC,GAAQ/C,OAAOD,GACvB,QACD,CACD,IAAIgP,EAAkBlB,EAAkBgB,EAAkBC,GAI1D,MAAMP,EAAcO,EACdE,EAAQ,GACd,KAAOH,EAAmBH,GAAmB,CAC3C,GAAIK,EAAgBtE,YAAcoE,EAAkB,CAClD,MAAM,UAAE3G,EAAF,YAAaI,SAAsBsD,EACzC,MAAM,IAAI1K,MACP,4BAA2BgH,eAAuBI,qBAA+BuG,uDAAsEE,EAAgBtE,cAE3K,CACD,MAAMwE,EAAkBF,EAAgBtE,YAAc,EAEtD,GAAIwE,GAAmBP,EACrB,MAEF,MAAMQ,QAAiBtB,EAAgBqB,GAGvC,GAAwB,IAApBC,EAAShN,OACX,MAEF,MAAMiN,EAAiBtB,EAAkBoB,EAAiBC,GASrDvE,EAAWuE,EAAUJ,IACxBE,EAAMjE,KAAKgE,GAIbD,EAAYI,EACZH,EAAkBI,EAClBN,EAAmBI,CACpB,CAUD,IANKtE,EAAWmE,EAAWH,IACzBK,EAAMjE,KAAKgE,KAKJ,CACP,MAAMvE,EAAOwE,EAAMI,MACnB,QAAazN,IAAT6I,EACF,YAEK0D,EAAkB1D,EAAMyD,EAChC,CAGDS,EAAoBT,EACpBU,EAAaJ,CACd,CACF,CAMD3L,eAAgByM,EAA2BX,GAIzC,IAAIC,EACJ,KAAOD,EAAoB,GAAG,CAE5B,GADAC,QAAmBf,EAAgBc,GACT,IAAtBC,EAAWzM,OAEb,OAEF,MAAM0M,EAAmBf,EAAkBa,EAAmBC,SACvDP,EAAsBQ,EAAkBF,GAC/CA,EAAoBE,EAAiBnE,YAAc,CACpD,CACF,CAGD,OAAOjJ,EAAAA,EAAAA,IAAI,iBAAkB,CAC3BoB,kBAAA,SACSgB,IAEThB,wBAAmD,IAA7B,OAAEsK,GAA2B,uDAAJ,CAAC,EAI9C,YAHevL,IAAXuL,IACFA,QAAehB,KAEVuC,EAAwBvB,EAChC,EACDtK,2BAAsD,IAA7B,OAAEsK,GAA2B,uDAAJ,CAAC,EAIjD,YAHevL,IAAXuL,IACFA,QAAehB,KAEVmD,EAA2BnC,EACnC,GAEJ,CCliBUoC,CAAmBpG,EAAMkC,EAAevF,GAjDlBqD,KAC/B,MAAM9B,EAAY1D,GAChB7C,OAAO,CAAE6C,QAAO+G,YAAa8E,IAAKtB,mBAAoBsB,MAiCxD,OA/BiB/N,EAAAA,EAAAA,IAAI,iCAAkC,CACrDoC,kBAAmBhB,UACjB,MAAM,SAAE4D,EAAF,aAAYI,SAAuBsC,EACzC,IAAIsG,EAOJ,OANIhJ,EACFgJ,EAAKjJ,EAAqBC,IAE1BvC,OAAO2C,GACP4I,EAAK7I,EAAyBC,IAEzBO,EAAiBqI,EAAIpI,EAA5B,EAGFvD,gBAAiBjB,UACf,MAAM,SAAE4D,EAAF,aAAYI,SAAuBsC,EACzC,IAAIsG,EAOJ,OANI5I,EACF4I,EAAK7I,EAAyBC,IAE9B3C,OAAOuC,GACPgJ,EAAKjJ,EAAqBC,IAErBW,EAAiBqI,EAAIpI,EAA5B,EAGFtD,mBAAoBlB,UAClB,MAAM1B,MACJ,8DADF,GAKJ,EAgBOuO,CAAyBvG,EAAhC,EC5DWwG,EAAwB,kBAgHxBC,EAAgB/M,UAC3B,MAAM4E,GAAe1E,EAAAA,EAAAA,GAAEyE,GAAUzD,qBAC3B2D,QAAiB3E,EAAAA,EAAAA,GAAE0E,GAActE,OAAOC,iBACxCyM,QAAWnI,EAASpE,OAGtBuM,EAAGjM,OAASiM,EAAGlM,OACjBO,OAAO6F,KAAK4F,EACb,E,0BCzHH,MAAQ3L,QAASC,GAAGmG,MAAOC,IAAMnG,OAa3B4L,GAAYC,GACW,kBAAbA,KAA2BA,EAASzG,MAAM,cAsBpD0G,GAAiB,CAACC,EAAS1G,EAAM2G,IAE7B,GAAE3G,KAD6B,GAAE2G,MAUrCC,GAAU,CAACC,EAAQC,IACXC,OAAOC,KAAKH,GAAQI,KAAKH,GAUjCI,GAAkB,CAACC,EAAQ7O,KAC/B,MAAM0H,EAAO4G,GAAQO,GAAQC,GAAK9O,EAAKI,WAAY,GAAE0O,QAErD,MAAO,CAAEpH,OAAM2G,GADJ3G,EAAOyE,OAAOnM,EAAKK,MAAMqH,EAAKpH,OAAS,IAAMqN,IACxD,EAiCIoB,GAAc,CAACC,EAAOhP,EAAMiP,KAChCD,EAAME,OAAOC,KAAKnP,EAAMiP,GACxBD,EAAMI,MAAMD,KAAKF,EAAKjP,EAAtB,EAmIIqP,GAAsBpP,IAC1B,MAAMqP,EAAW,YAAWrP,EAAMsP,QAAQ,aAAc,MACxD,OAAO3P,EAAAA,EAAAA,IAAI0P,EAAS,CAAC,EAArB,EASWE,GAAoB,WAAwC,IAAvCC,EAAuC,uDAAxBJ,GAC/C,MAAMK,EAAgB,CAEpBC,MAAO,CACLT,QAAQU,EAAAA,EAAAA,MACRR,OAAOQ,EAAAA,EAAAA,OAGTC,QAAS,CACPX,QAAQU,EAAAA,EAAAA,MACRR,OAAOQ,EAAAA,EAAAA,OAGTE,QAAS,CACPZ,QAAQU,EAAAA,EAAAA,MACRR,OAAOQ,EAAAA,EAAAA,QAILG,EAAe,CACnBb,QAAQU,EAAAA,EAAAA,MACRR,OAAOQ,EAAAA,EAAAA,OAUHI,EAAa,CAAChB,EAAOhP,EAAMC,KAC/B,GAAI+O,EAAME,OAAOhP,IAAIF,GACnB,OAAOgP,EAAME,OAAO/O,IAAIH,GAE1B,MAAMiP,EAAMQ,EAAaxP,GAEzB,OADA8O,GAAYC,EAAOhP,EAAMiP,GAClBA,CAAP,EAGIgB,EAAY,CAKhBC,UAAW,CAAClQ,EAAMC,KAChBoC,OAAO4L,GAAUjO,GAAOoC,EAAE,kBAAiBoG,GAAExI,MACtCgQ,EAAWD,EAAc/P,EAAMC,IAOxCkQ,aAAc,CAACnQ,EAAMC,KACnB,IAAKD,EAEH,OAAOyP,EAAc,GAAEzP,KAEzB,MAAM,KAAE0H,EAAF,GAAQ2G,GAAOO,GAAgBc,EAAe1P,GACpD,OAAO0H,EACHsI,EAAWN,EAAchI,GAAO2G,EAAIpO,GACpCgQ,EAAUC,UAAUlQ,EAAMC,EAF9B,GAMEmQ,EAAY,CAChBF,UAAWjB,GAAOc,EAAaX,MAAMjP,IAAI8O,GAEzCkB,aAAclB,IACZ,MAAMvH,EAAO4G,GAAQoB,GAAeZ,GAAKY,EAAcZ,GAAGM,MAAMlP,IAAI+O,KACpE5M,OAAOqF,EAAMtF,EAAE,iCAAgC6M,KAE/C,MAAMZ,EAAKqB,EAAchI,GAAM0H,MAAMjP,IAAI8O,GACzC,OAAOd,GAAeuB,EAAehI,EAAM2G,EAA3C,GAIEgC,EAAU,CACdH,WAAWpQ,EAAAA,EAAAA,IAAYsQ,EAAUF,UAAWD,EAAUC,UAAW,CAC/DI,YAAa,cAEfH,cAAcrQ,EAAAA,EAAAA,IAAYsQ,EAAUD,aAAcF,EAAUE,aAAc,CACxEG,YAAa,kBAIjB,OAAOrR,OAAO,CAKZsR,YAAa,CAAClC,EAAIY,KAChBF,GAAYgB,EAAc1B,EAAIY,EAA9B,EAMFuB,cAAe,CAACnC,EAAIY,KACdc,EAAaX,MAAMlP,IAAI+O,GACzB5M,OAAO+G,MAAM2G,EAAaX,MAAMjP,IAAI8O,GAAMZ,GAG5CU,GAAYgB,EAAc1B,EAAIY,EAA9B,EAEFkB,cAAcvQ,EAAAA,EAAAA,IAAI,oBAAqB,IAAKyQ,EAAQF,eACpDD,WAAWtQ,EAAAA,EAAAA,IAAI,mBAAoB,IAAKyQ,EAAQH,aAEnD,E,8JC/VM,SAASO,GAAqBzQ,GACnC,OAAO0Q,EAAAA,GAAAA,GAAqB,WAAY1Q,EACzC,CACD,MACA,IADqB2Q,EAAAA,GAAAA,GAAuB,WAAY,CAAC,OAAQ,SAAU,OAAQ,UAAW,SAAU,gBAAiB,aAAc,gBAAiB,cAAe,WAAY,kBAAmB,eAAgB,kBAAmB,gBAAiB,WAAY,kBAAmB,eAAgB,kBAAmB,kB,sCCG5T,UAAeC,EAAAA,GAAAA,IAA4BC,EAAAA,GAAAA,KAAK,OAAQ,CACtDC,EAAG,8OACD,mBCFJ,IAAeF,EAAAA,GAAAA,IAA4BC,EAAAA,GAAAA,KAAK,OAAQ,CACtDC,EAAG,qFACD,yBCFJ,IAAeF,EAAAA,GAAAA,IAA4BC,EAAAA,GAAAA,KAAK,OAAQ,CACtDC,EAAG,4KACD,gBCFJ,IAAeF,EAAAA,GAAAA,IAA4BC,EAAAA,GAAAA,KAAK,OAAQ,CACtDC,EAAG,8MACD,gB,ICNAC,G,WAEJ,MAAMC,GAAY,CAAC,SAAU,WAAY,YAAa,YAAa,QAAS,OAAQ,cAAe,UAAW,OAAQ,WAAY,WAoC5HC,IAAYC,EAAAA,GAAAA,IAAOC,GAAAA,EAAO,CAC9BC,KAAM,WACNpR,KAAM,OACNqR,kBAAmB,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,EACJ,MAAO,CAACC,EAAOE,KAAMF,EAAOC,EAAWE,SAAUH,EAAQ,GAAEC,EAAWE,WAAUC,EAAAA,GAAAA,GAAWH,EAAWI,OAASJ,EAAWK,aAA1H,GAPcX,EASf,IAGG,IAHF,MACFY,EADE,WAEFN,GACI,EACJ,MAAMO,EAAkC,UAAvBD,EAAME,QAAQC,KAAmBC,GAAAA,GAASC,GAAAA,GACrDC,EAA4C,UAAvBN,EAAME,QAAQC,KAAmBE,GAAAA,GAAUD,GAAAA,GAChEN,EAAQJ,EAAWI,OAASJ,EAAWK,SAC7C,OAAOQ,EAAAA,GAAAA,GAAS,CAAC,EAAGP,EAAMQ,WAAWC,MAAO,CAC1CC,aAAcV,EAAMW,MAAMD,aAC1BE,gBAAiB,cACjBC,QAAS,OACTC,QAAS,YACRhB,GAAgC,aAAvBJ,EAAWE,SAA0B,CAC/CE,MAAOG,EAASD,EAAME,QAAQJ,GAAOiB,MAAO,IAC5CH,gBAAiBN,EAAmBN,EAAME,QAAQJ,GAAOiB,MAAO,IAChE,CAAE,MAAKC,GAAAA,QAAsB,CAC3BlB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOmB,KAAOjB,EAAME,QAAQJ,GAAOiB,QAEzFjB,GAAgC,aAAvBJ,EAAWE,SAA0B,CAC/CE,MAAOG,EAASD,EAAME,QAAQJ,GAAOiB,MAAO,IAC5CG,OAAS,aAAYlB,EAAME,QAAQJ,GAAOiB,QAC1C,CAAE,MAAKC,GAAAA,QAAsB,CAC3BlB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOmB,KAAOjB,EAAME,QAAQJ,GAAOiB,QAEzFjB,GAAgC,WAAvBJ,EAAWE,SAAwB,CAC7CE,MAAO,OACPqB,WAAYnB,EAAMQ,WAAWY,iBAC7BR,gBAAwC,SAAvBZ,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOuB,KAAOrB,EAAME,QAAQJ,GAAOmB,MApBpG,IAuBIK,IAAYlC,EAAAA,GAAAA,IAAO,MAAO,CAC9BE,KAAM,WACNpR,KAAM,OACNqR,kBAAmB,CAACC,EAAOC,IAAWA,EAAO8B,MAH7BnC,CAIf,CACDoC,YAAa,GACbV,QAAS,QACTD,QAAS,OACTY,SAAU,GACVC,QAAS,KAELC,IAAevC,EAAAA,GAAAA,IAAO,MAAO,CACjCE,KAAM,WACNpR,KAAM,UACNqR,kBAAmB,CAACC,EAAOC,IAAWA,EAAOhS,SAH1B2R,CAIlB,CACD0B,QAAS,UAELc,IAAcxC,EAAAA,GAAAA,IAAO,MAAO,CAChCE,KAAM,WACNpR,KAAM,SACNqR,kBAAmB,CAACC,EAAOC,IAAWA,EAAOoC,QAH3BzC,CAIjB,CACDyB,QAAS,OACTiB,WAAY,aACZhB,QAAS,eACTiB,WAAY,OACZP,aAAc,IAEVQ,GAAqB,CACzBC,SAAsBlD,EAAAA,GAAAA,KAAKmD,GAAqB,CAC9CT,SAAU,YAEZU,SAAsBpD,EAAAA,GAAAA,KAAKqD,GAA2B,CACpDX,SAAU,YAEZlU,OAAoBwR,EAAAA,GAAAA,KAAKsD,GAAkB,CACzCZ,SAAU,YAEZ/I,MAAmBqG,EAAAA,GAAAA,KAAKuD,GAAkB,CACxCb,SAAU,aAiKd,GA9J2Bc,GAAAA,YAAiB,SAAeC,EAASC,GAClE,MAAMjD,GAAQkD,EAAAA,GAAAA,GAAc,CAC1BlD,MAAOgD,EACPlD,KAAM,cAGF,OACJuC,EADI,SAEJc,EAFI,UAGJC,EAHI,UAIJC,EAAY,QAJR,MAKJ/C,EALI,KAMJyB,EANI,YAOJuB,EAAcd,GAPV,QAQJe,EARI,KASJC,EAAO,QATH,SAUJjD,EAAW,UAVP,QAWJH,EAAU,YACRJ,EACEyD,GAAQC,EAAAA,GAAAA,GAA8B1D,EAAON,IAE7CQ,GAAaa,EAAAA,GAAAA,GAAS,CAAC,EAAGf,EAAO,CACrCM,QACAC,WACAH,YAGIuD,EA7HkBzD,KACxB,MAAM,QACJE,EADI,MAEJE,EAFI,SAGJC,EAHI,QAIJoD,GACEzD,EACE0D,EAAQ,CACZzD,KAAM,CAAC,OAAS,GAAEC,KAAUC,EAAAA,GAAAA,GAAWC,GAASC,KAAc,GAAEH,KAChE2B,KAAM,CAAC,QACP9T,QAAS,CAAC,WACVoU,OAAQ,CAAC,WAEX,OAAOwB,EAAAA,GAAAA,GAAeD,EAAOzE,GAAsBwE,EAAnD,EAgHgBG,CAAkB5D,GAClC,OAAoB6D,EAAAA,GAAAA,MAAMpE,IAAWoB,EAAAA,GAAAA,GAAS,CAC5CyC,KAAMA,EACNQ,QAAQ,EACRC,UAAW,EACX/D,WAAYA,EACZkD,WAAWc,EAAAA,GAAAA,GAAKP,EAAQxD,KAAMiD,GAC9BH,IAAKA,GACJQ,EAAO,CACRN,SAAU,EAAU,IAATpB,GAA8BxC,EAAAA,GAAAA,KAAKuC,GAAW,CACvD5B,WAAYA,EACZkD,UAAWO,EAAQ5B,KACnBoB,SAAUpB,GAAQuB,EAAY/C,IAAaiC,GAAmBjC,KAC3D,MAAmBhB,EAAAA,GAAAA,KAAK4C,GAAc,CACzCjC,WAAYA,EACZkD,UAAWO,EAAQ1V,QACnBkV,SAAUA,IACE,MAAVd,GAA8B9C,EAAAA,GAAAA,KAAK6C,GAAa,CAClDgB,UAAWO,EAAQtB,OACnBc,SAAUd,IACP,KAAgB,MAAVA,GAAkBkB,GAAuBhE,EAAAA,GAAAA,KAAK6C,GAAa,CACpElC,WAAYA,EACZkD,UAAWO,EAAQtB,OACnBc,UAAuB5D,EAAAA,GAAAA,KAAK4E,GAAAA,EAAY,CACtCC,KAAM,QACN,aAAcf,EACdgB,MAAOhB,EACP/C,MAAO,UACPgE,QAASf,EACTJ,SAAU1D,KAAeA,IAA0BF,EAAAA,GAAAA,KAAKgF,GAAAA,EAAW,CACjEtC,SAAU,eAGX,QAER,I,gECjKM,MAAMuC,GAAY,cAAC,QAAEC,EAAF,QAAWC,GAAZ,oBACvBC,EAAAA,GAAAA,IAAU,CAACC,GAAAA,GAAmBH,EAASC,WADhB,QAC6B,EAD7B,EAGZG,GAAW,QAAwB,eAAEC,EAAF,OAAkBC,GAA1C,SACtBP,GAAUM,GAAgBzH,MAAKmC,GAAKA,EAAEuF,SAAWA,GAD3B,ECJXC,GACmBF,IAG9B,MAAM,SAAExR,EAAF,QAAY2R,IAAYC,EAAAA,EAAAA,MAMxBC,EAAkCC,GDHhB,IAEJA,KAChB,IAF0B,QAAEX,EAAF,QAAWC,GAEtC,EACH,MAAM,OAAEK,EAAF,UAAUM,EAAV,QAAqBC,GAAYF,EAEjCG,EAAQf,GAAUC,IACxBe,EAAAA,GAAAA,IACE,CAACZ,GAAAA,GAAmBH,EAASC,GAC7B,IAAIa,EAAME,QAAOjG,GAAKA,EAAEuF,SAAWA,IAAS,CAAEA,SAAQM,YAAWC,YAFnE,ECJiDI,CAAOZ,EAAgBM,GAElEO,EAAa,CACKZ,EACMa,KDMN,KAEpB,IADqBd,gBAAgB,QAAEL,EAAF,QAAWC,GAA7B,OAAwCK,GAC5D,EACH,MAAMQ,EAAQf,GAAU,CAAEC,UAASC,aACnCc,EAAAA,GAAAA,IACE,CAACZ,GAAAA,GAAmBH,EAASC,GAC7Ba,EAAME,QAAOjG,GAAKA,EAAEuF,SAAWA,IAFjC,ECREc,CAAO,CAAEf,iBAAgBC,WACzBa,GAAa,EAGTE,EAAiB,CACCf,EACAO,EACiBM,KAEvC,MAAMR,EAAOW,GAAK,CAAEjB,iBAAgBC,WACpChU,OAAOqU,EAAO,0CAAyCL,KACvDI,EAAW,IAAKC,EAAME,YACtBM,GAAa,EAGTI,EAAa,CACKjB,EACMa,KAE5B,MAAMR,EAAOW,GAAK,CAAEjB,iBAAgBC,WACpChU,OAAOqU,EAAO,kCAAiCL,KAC/CI,EAAW,IAAKC,EAAMC,WAAW,IACjCO,GAAa,EAGTA,EAAc,KAClB,MAAML,EAAQ,IAAIlX,IACE4X,GAAQnB,GAChBoB,SAAyC1G,IACnD+F,EAAMrW,IAAIsQ,EAAEuF,OAAQ,IACfvF,EACH2G,QAAS,CACPC,OAAQ,IAAMJ,EAAWxG,EAAEuF,OAAQa,GACnCS,WAAYf,GAAWQ,EAAetG,EAAEuF,OAAQO,EAASM,GACzDU,OAAQ,IAAMX,EAAWnG,EAAEuF,OAAQa,KALvC,IAvCqB,CACqBL,IACzCN,EAAQsB,YAAY,IAAIhB,EAAMhV,UAFnC,EAgDEiW,CAAiBjB,EAAjB,EAMF,MD9BwB,IAEkBkB,KACtC,IAF0B,QAAEhC,EAAF,QAAWC,GAEtC,GACHgC,EAAAA,GAAAA,IAAS,CAAC9B,GAAAA,GAAmBH,EAASC,IAAUiC,GAC9CF,EAAQ,OAACE,QAAD,IAACA,EAAAA,EAAY,KADvB,ECuBAC,CAAM9B,EAAgBc,GACtBA,IAEO,CACLtS,WACAuT,QAAS1B,EACTW,iBACAH,aACAK,aALF,EC9EWc,GAAmBC,IAC9B,MAAMC,EAAc,IAAI3Y,KAElB,SAAEiF,EAAF,QAAY2R,IAAYC,EAAAA,EAAAA,MACxBsB,EAAmB,IAAMvB,EAAQsB,YAAY,IAAIS,EAAYzW,WAE7D0W,EAAmBC,IACvBnW,OACEiW,EAAYpY,IAAIsY,GACf,+CAA8CA,KAEjDF,EAAYV,OAAOY,GACnBV,GAAkB,EA0BpB,MAAO,CACLlT,WACA6T,cAzBoB,CAAC7B,EAAS4B,KAC9BF,EAAY9X,IAAIgY,EAAS,CACvBA,UACA5B,UACAa,QAAS,CACPG,OAAQ,IAAMW,EAAiBC,GAC/BlU,OAAQtD,UACN,MAAM2S,EAASxU,KAAKuZ,UAAU,CAC5BC,KAAM,gBACNjN,KAAM,CAAE8M,UAAS5B,QAASgC,KAE5B,UACQP,EAAgB1E,GACtB4E,EAAiBC,EAGlB,CAFC,MAAOzO,GACPzL,QAAQe,MAAM,2BAA4BsU,EAC3C,MAIPmE,GAAkB,EAGpB,EChCWe,GAAgB,CAC3BC,SAAU,WACVC,SAAU,SACVC,SAAU,WACVC,QAAS,UACTC,SAAU,WAsBCC,GAAa,cACM,QAAEpD,EAAF,QAAWC,GADjB,oBAErBC,EAAAA,GAAAA,IAAU,CAACmD,GAAAA,GAAoBrD,EAASC,WAFnB,QAEgC,EAFhC,EAebqD,GAAc,GAEHhL,KAClB,IAAD,MAF2B,QAAE0H,EAAF,QAAWC,GAEtC,EACH,MAAMsD,EAAM,UAAGH,GAAW,CAAEpD,UAASC,mBAAzB,QAAuC,IACnDc,EAAAA,GAAAA,IACE,CAACsC,GAAAA,GAAoBrD,EAASC,GAC9BsD,EAAOvC,QAAOwC,GAAKA,EAAElL,KAAOA,IAF9B,EC7BWmL,GAAkB,CAC7BpD,EACAiC,EACAoB,EACAC,KAEA,MAAMJ,EAAS,IAAI3Z,KACb,SAAEiF,EAAF,QAAY2R,IAAYC,EAAAA,EAAAA,MACxBsB,EAAmB,IAAMvB,EAAQsB,YAAY,IAAIyB,EAAOzX,WAExD8X,EAAmC3Y,MACJ4Y,EACdC,KAErB,MAAM,GACJxL,EADI,eAEJyL,EAFI,sBAGJC,EACAC,kBAAkB,KAAEC,EAAF,KAAQC,IACxBL,EAEEM,EAA2BC,GAC/B3L,OAAO4L,YACL5L,OAAO6L,QAAQF,GAAkBzW,KAC/B,IAAoC,IAAlC4W,GAAI,aAAEC,EAAF,MAAgB1Y,IAAa,EACjC,MAAM2Y,EAAQb,EAAoBzZ,IAAIqa,GACtC,OAAKC,EAGE,CACLF,EACA,CACEE,QACA3Y,MAAO4Y,OAAO5Y,KANT,EAET,KAWF6Y,QAAiBzZ,EAAAA,EAAAA,GAAEwY,GAAmB7Z,YAAYia,IAEtD5E,OAAQ0F,UACA1Z,EAAAA,EAAAA,GAAEwY,GAAmBmB,UAAUF,GAGnCG,EAAiB,CACrBzM,KACA0M,eAAgB,CACdC,OAAQ,WACRL,WACAZ,yBAEFkB,SAAU,CACRhB,KAAME,EAAyBF,GAC/BC,KAAMC,EAAyBD,KAI7BgB,QAAoBha,EAAAA,EAAAA,GAAEwY,GAAmBmB,UAC7C5b,OAAO,CACLkc,OAAQ,eACRtB,MAAOiB,KAIX,MAAO,IACFjB,EACHuB,gBAAkB,YAAWR,IAC7BM,YAAa/b,KAAKuZ,UAAUwC,GAH9B,EAOIG,EAAoCxB,IACxCP,EAAO9Y,IAAIqZ,EAAMxL,GAAIwL,GD7DD,IAEDA,KACjB,IAAD,MAF2B,QAAE9D,EAAF,QAAWC,GAEtC,EACH,MAAMsD,EAAM,UAAGH,GAAW,CAAEpD,UAASC,mBAAzB,QAAuC,IACnDc,EAAAA,GAAAA,IACE,CAACsC,GAAAA,GAAoBrD,EAASC,GAC9B,IAAIsD,EAAOvC,QAAOwC,GAAKA,EAAElL,KAAOwL,EAAMxL,KAAKwL,GAF7C,ECyDEyB,CAAIlF,EAAgByD,GACpB/B,GAAkB,EA4GpB,MAAO,CACLyD,MA9CY3B,IACZ,MAAM4B,EAAenE,GAAKjB,GACJ9Y,QAAQme,IAC5BD,EAAa7X,KAAI3C,MAA4BuY,IACvCA,EAAEmC,SAAW7C,GAAcK,UAC7B/B,GAAOf,EAAgBmD,EAAElL,IAE3B,MAAMsN,QAAWhC,EACfC,EACAL,GAEFD,EAAO9Y,IAAImb,EAAGtN,GAAI,IACbsN,GADL,KAKU5c,MAAK,IAAM+Y,MA3DF9W,WACvB,UAAW,MAAM0a,KAAUE,EAAAA,EAAAA,IACzBnC,GACC,CACDnb,QAAQM,IAAI,cAAe,CAAE8c,SAAQpC,WACrC,MAAMuC,EAAWvC,EAAOnZ,IAAP,OAAWub,QAAX,IAAWA,OAAX,EAAWA,EAAQrN,IAC/BwN,QAGkB9b,IAAjB2b,EAAOrc,OACTia,EAAO9Y,IAAIkb,EAAOrN,GAAI,IACjBwN,EACHxN,GAAIqN,EAAOrN,GACXqN,OAAQ7C,GAAcG,SACtB3Z,MAAQ,GAAEqc,EAAOrc,UAEnB8X,GAAOf,EAAgBsF,EAAOrN,UACQtO,IAA7B2b,EAAOI,mBAChBxC,EAAO9Y,IAAIkb,EAAOrN,GAAI,IACjBwN,EACHxN,GAAIqN,EAAOrN,GACXqN,OAAQ7C,GAAcE,WAExB5B,GAAOf,EAAgBsF,EAAOrN,UACQtO,IAA7B2b,EAAOI,oBAChBxC,EAAO9Y,IAAIkb,EAAOrN,GAAI,IACjBwN,EACHxN,GAAIqN,EAAOrN,GACXqN,OAAQ7C,GAAcI,UAExBoC,EAAY,IAAKQ,EAAUH,OAAQ7C,GAAcI,WAEnDnB,KAzBAxZ,QAAQyd,KAAK,2CA2BhB,GA2BDC,GD1HuB,IAEmBjE,KACxC,IAF0B,QAAEhC,EAAF,QAAWC,GAEtC,GACHgC,EAAAA,GAAAA,IACE,CAACoB,GAAAA,GAAoBrD,EAASC,IACNiG,GAAclE,EAAQ,OAACkE,QAAD,IAACA,EAAAA,EAAa,KAF9D,ECwHEC,CAAY9F,GAAgB6F,IACP3e,QAAQme,IACzBQ,EAAUtY,KAAI4V,GACLI,EAAiCC,EAAqBL,GAAGxa,MAC9D4c,IACE,MAAME,EAAWvC,EAAOnZ,IAAIwb,EAAGtN,IACzBqN,EACJG,GACA,CAAChD,GAAcG,SAAUH,GAAcE,UAAUjV,SAC/C+X,EAASH,QAEPG,EAASH,OACTC,EAAGD,OACTpC,EAAO9Y,IAAImb,EAAGtN,GAAI,IACbsN,EACHD,UAFF,OAQG3c,MAAK,IAAM+Y,KAAtB,GArBF,EA2BAwB,SACA1U,WACAuX,SAAUd,EACVe,YAvGkBpb,MAA6BqN,IAC/C,MAAMwL,EAAQP,EAAOnZ,IAAIkO,GAEzB,OADAhM,OAAOwX,EAAQ,mCAAkCxL,KAC1CgK,EAAgBwB,EAAMqB,YAA7B,EAqGAmB,YAlGkBC,IAClBhe,QAAQM,IAAI,qBAAZ,EAkGA2d,aAhH0ClO,IAC1C,MAAMwL,EAAQP,EAAOnZ,IAAIkO,GACzBhM,OAAOwX,EAAQ,oCAAmCxL,KAClDgN,EAAY,IAAKxB,EAAO6B,OAAQ7C,GAAcK,WAC9CpB,GAAkB,EAqGpB,ECjMI0E,GAAQ9U,GAAS,GAAEA,IAAO9J,KAAKC,W,6DCnB9B,SAAS4e,GAAiCzc,GAC/C,OAAO0Q,EAAAA,GAAAA,GAAqB,uBAAwB1Q,EACrD,EACgC2Q,EAAAA,GAAAA,GAAuB,uBAAwB,CAAC,SAAjF,MCFMK,GAAY,CAAC,YAqBb0L,IAAwBxL,EAAAA,GAAAA,IAAOyL,GAAAA,EAAY,CAC/CC,kBAAmBC,IAAQC,EAAAA,GAAAA,IAAsBD,IAAkB,YAATA,EAC1DzL,KAAM,uBACNpR,KAAM,OACNqR,kBAAmB,CAACC,EAAOC,IAAWA,EAAOE,MAJjBP,CAK3B,CAAC,GA2CJ,GA1CuCmD,GAAAA,YAAiB,SAA2BC,EAASC,GAC1F,MAAMjD,GAAQkD,EAAAA,GAAAA,GAAc,CAC1BlD,MAAOgD,EACPlD,KAAM,yBAGFI,GAAawD,EAAAA,GAAAA,GAA8B1D,EAAON,IAElDiE,EAzBkBzD,KACxB,MAAM,QACJyD,GACEzD,EAIEuL,GAAkB5H,EAAAA,GAAAA,GAHV,CACZ1D,KAAM,CAAC,SAEqCgL,GAAkCxH,GAChF,OAAO5C,EAAAA,GAAAA,GAAS,CAAC,EAAG4C,EAAS8H,EAA7B,EAiBgB3H,CAAkB5D,GAClC,OAAoBX,EAAAA,GAAAA,KAAK6L,IAAuBrK,EAAAA,GAAAA,GAAS,CACvD2K,UAAW,IACXtL,QAAS,QACTE,MAAO,iBACP2C,IAAKA,EACL/C,WAAYA,GACXF,EAAO,CACR2D,QAASA,IAEZ,I,mDC/BD,MAAMgI,GACK,EADLA,GAEe,EAFfA,GAGS,EAGTC,GACO,iEAOPC,GAAiC,KAAO,SAYjCC,GAA0B,CAACzT,EAAcxI,KACpD,MAAOuK,EAAM2R,IAAWC,EAAAA,GAAAA,UAA+C,MA4BvE,OA1BAC,EAAAA,GAAAA,YAAU,KACR,IAAIC,GAAY,EAoBhB,MAnBkBxc,WAChB,MAAM2E,QAAiB2D,EACpB,mCACDnI,EACA,CACEwI,iBAGJ,UAAW,MAAM,MAAE7H,IpBaI6D,KAE3B/F,EAAAA,EAAAA,IAAI,yBAA0B,CAE5B,CAAC0B,OAAOC,eAAgB,KACtB,MAAMkc,GAAiBvc,EAAAA,EAAAA,GAAEyE,GAAU3D,oBAC7B6D,GAAW3E,EAAAA,EAAAA,GAAEuc,GAAgBnc,OAAOC,iBAC1C,OAAO3B,EAAAA,EAAAA,IAAI,yBAA0B,CACnC6B,KAAM,KAAMP,EAAAA,EAAAA,GAAE2E,GAAUpE,QAD1B,IoBpB8Bic,CAAc/X,GAAW,CACrD,GAAI6X,EACF,MAEFlf,QAAQM,IAAI,oBAAqBkD,GACjCub,EAAQvb,EACT,GAEH6b,GAAYlZ,OAAMsF,GAChBzL,QAAQe,MAAM,0CAA2C0K,KAEpD,KACLyT,GAAY,CAAZ,CADF,GAGC,CAAC7T,EAAcxI,IAEXuK,CAAP,EAyIF,IAAekS,EAAAA,GAAAA,KA1HS,IAQjB,IARkB,QACvB/I,EADuB,KAEvBgJ,EAFuB,QAGvB7H,EAHuB,KAIvB8H,EAJuB,gBAKvBC,EALuB,aAMvBpU,EANuB,OAOvBxI,GACI,EACJ,MAAO6c,EAAaC,IAAkBX,EAAAA,GAAAA,UAASL,KACxC5d,EAAO6e,IAAYZ,EAAAA,GAAAA,UAAiC,MACrDa,EAAoBf,GAAwBzT,EAAcxI,GA2B1Did,EAAoBlS,IACxB,WAACmS,GAAA,EAAD,YACE,UAACA,GAAA,EAAD,CACEC,GAAI,CACFC,OAAQ,OACR5L,QAAS,OACT6L,cAAe,MACfC,eAAgB,UALpB,UAQE,UAACC,GAAA,EAAD,OAEF,UAAC,GAAD,CAAmBJ,GAAI,CAAEK,GAAI,GAA7B,SAAmCzS,OAIjC0S,GAAUC,EAAAA,GAAAA,UAAQ,KACtB,OAAQb,GACN,KAAKf,GACH,OACE,6BACE,WAAC,GAAD,YACE,2CADF,IACyB,KACvB,UAAC6B,GAAA,EAAD,CAAMhB,KAAMA,EAAMiB,UAAU,OAAOnN,MAAM,mBAAzC,SACGkM,QAGL,WAAC,GAAD,CAAmBQ,GAAI,CAAEK,GAAI,GAA7B,WACE,4CADF,IAC0B3I,MAE1B,WAAC,GAAD,CAAmBsI,GAAI,CAAEK,GAAI,GAA7B,kFAEK,wBAjII,WA+HT,oCAMN,KAAK1B,GACH,OAAOmB,EAAkB,4CAC3B,KAAKnB,GACH,OAAOmB,EAAkB,qCAC3B,QACE,OAAO,0BAxBX,GA0BC,CAACJ,EAAaF,EAAM9H,IAEjBgJ,EACkB,OAAtBb,GA3FuBA,IACzBA,GACAc,GAAAA,GAAAA,SACEd,EAAkBe,qBAClBf,EAAkBgB,qBAClBrd,MAAQqb,GAsFsBiC,CAAmBjB,GAEnD,OACE,WAACkB,GAAA,EAAD,CAAQxB,KAAMA,EAAd,WACE,WAACyB,GAAA,EAAD,WACGtB,IAAgBf,GAAgB,WAAa,WADhD,oBAGA,WAACsC,GAAA,EAAD,WACGX,EACAI,IACC,UAAC,GAAD,CAAmBV,GAAI,CAAEK,GAAI,GAAK/M,MAAM,QAAxC,qFAKDvS,IACC,UAAC,GAAD,CAAmBif,GAAI,CAAEK,GAAI,GAAK/M,MAAM,QAAxC,SACGvS,OAIN2e,IAAgBf,KACf,WAACuC,GAAA,EAAD,YACE,UAACC,GAAA,EAAD,CAAQ7N,MAAM,UAAUgE,QAASf,EAAjC,gCAGA,UAAC4K,GAAA,EAAD,CACEC,UAAWvB,GAAqBa,EAChCpJ,QAtFwB,KAChC,MACE+J,SAAS,kBAAEC,IACT7B,EACC6B,EAjBiB5e,WACtBkd,EAAS,MACTD,EAAehB,IACf,UACQ4C,EAAOC,iBAKd,CAJC,MAAO/V,GAGP,OAFAkU,EAAehB,SACfiB,EAASnU,EAAExK,QAEZ,CACD0e,EAAehB,GAAf,EAYA8C,CAAgBH,GAJd1B,EAAShB,GAIX,EA2EM,yBAxBR,IAoCqD8C,IAAO,CAC5DjC,gBAAiBiC,EAAQjC,oBC/LrBkC,GAAQ5L,GAAAA,YAAiB,WAAuCE,GAAM,IAA9B,SAAEE,KAAanD,GAAc,EACzE,OACE,UAAC,GAAD,CAAUiE,UAAW,EAAGhB,IAAKA,EAAK7C,QAAQ,YAAaJ,EAAvD,SACGmD,GAGN,IAkID,IAAemJ,EAAAA,GAAAA,KAhIe,IAMvB,IAAD,QANyB,iBAC7BsC,EAD6B,oBAE7BC,EAF6B,WAG7BC,EAH6B,uBAI7BC,EAJ6B,gBAK7BtC,GACI,EACJ,MAAOuC,EAAkBC,IAAuBjD,EAAAA,GAAAA,UAAS,KAClDkD,EAAqBC,IAA0BnD,EAAAA,GAAAA,WAAS,GAczDoD,EAAY,SAACnhB,EAASwK,GAA2B,IAAxB8H,EAAuB,uDAAZ,QACpC9H,IACFzL,QAAQe,MAAO,GAAEE,KAAYwK,GAC7BxK,GAAY,KAAIwK,EAAExK,WAEH,UAAbsS,GACFsO,EAAoBQ,GAAAA,GAAAA,OAEtBJ,GAAoBK,GAAM,IAAIA,EAAI,CAAE/O,WAAUtS,aAC/C,GAEK,KAAEue,GAASoC,EAEXW,EAAgB,MACpB,GAAI9C,EACF,OAAOA,EAAgB/H,OAFL,KAOhB8K,EAAe/W,IACfA,EAAExK,UAAYuO,GAChB2S,GAAuB,GACvBN,EAAoBQ,GAAAA,GAAAA,SAEpBP,EAAW,MACXM,EAAU,0BAA2B3W,GACtC,GAGIiW,EAAS7e,IAAU0d,EAAAA,GAAAA,UACxB,IAAM,CAACrP,KAAqBtL,EAAW4Z,KACvC,CAACoC,EAAkBnC,IAmDrB,OAhDAR,EAAAA,GAAAA,YAAU,KACR,IAAK2C,IAAqBnC,EACxB,OAGF,IAAIgD,EAqCJ,MAnCe/f,WACb,MAAMggB,EAAkBvV,GACtBnC,EAAc,cAAamC,IAAQtK,EAAQ,CACzCwI,aAAcqW,EAAQ7P,eAEpB8Q,EJqBiC,SAC3C7K,EACA8K,EACAC,EACAC,EACArD,GAMI,IALJsD,EAKG,uDALYtX,IAEb,MAAMA,CAAN,EAEFuX,EACG,uDADa,OAEhB,MAAMC,EAAY,CAChBC,kBAAmB,SACnBC,oBAAqB,WACrBC,mBAAoB,UACpBC,kBAAmB,SACnBC,oBAAqB,YAIjBC,EAAepT,OAAO4L,YAC1B5L,OAAO6L,QAAQiH,GAAW5d,KAAI,QAAEme,EAASC,GAAX,QAA0B,CACtDA,GACAvL,EAAAA,EAAAA,IAAgB,MAFY,KAiB1BwL,EAAe,IAAIriB,IAEnBia,EAAsB,IAAIja,IAE1BsiB,EAAe,KACnB,MAAMC,EAAS,GACf,IAAK,MAAOzH,EAAO9K,KAAUqS,EAAa1H,UACpC3K,EAAMwS,eAAiBxS,EAAMyS,eAC/B/f,OAAOsN,EAAM6K,aAAc,8BAC3BZ,EAAoBpZ,IAAImP,EAAM6K,aAAcC,GAC5CyH,EAAO/Y,KAAKwG,IAGhBkS,EAAaK,OAAO3L,QAAQsB,YAAY5Y,OAAOijB,GAA/C,EAGI7J,EAAkBrX,UACtB,MACE2e,SAAS,kBAAEC,IACT7B,EACJ,IAAK6B,EACH,MAAM,IAAItgB,MACR,kEAGJ,OAAOsgB,EAAkByC,kBAAkB3W,EAA3C,EAGI4W,GAAqBC,EAAAA,GAAAA,IACzBhB,GACAQ,GAAa,IAAMF,EAAaE,GAAWnd,WAKvC4d,EAAgBF,EAAmBX,oBAEnCc,EAAejJ,GACnBpD,EACAiC,EACAmK,EACAtB,GAGIwB,EAAe1hB,gBACb+M,EAAcoT,GACpB,MACMtb,SADuB3E,EAAAA,EAAAA,GAAEigB,GAAiBnf,qBAChBV,OAAOC,iBACjCohB,QAAe9c,EAASpE,OAC1B6f,IACFA,IACA7S,OAAO5M,OAAOggB,GAAcrK,SAAQ,QAAC,QAAEjB,GAAH,SAClCA,EAAQsB,YAAY,GADc,IAGpCyJ,OAAgBvhB,GAGlB,MAAM6iB,EAAYD,EAAO7gB,MACnB+gB,EAASD,EAAU9gB,MACzBxD,QAAQM,IAAI,iBAAkBikB,GAC9B,IAAK,MAAMlT,KAASkT,EAAOX,OAAQ,CACjC5jB,QAAQC,MAAM,oBAAqBoR,GACnC,MAAMmT,EAAkBD,EAAOE,OAAOpU,MACpCqU,GAAMrT,EAAM8K,QAAUuI,EAAGvI,QAE3BpY,OAAOygB,EAAkB,gCAA+BnT,EAAM8K,SAE9D,MAAMwI,EAAY,CAChBxI,MAAO9K,EAAM8K,MACb0H,cAAexS,EAAMuT,QACrBd,aAAcU,EAAgBlM,QAC9B4D,aAAcsI,EAAgBlM,QAC9BuM,YAAaL,EAAgBK,aAE/BnB,EAAaxhB,IAAImP,EAAM8K,MAAOwI,EAC/B,CAID,OAHA3kB,QAAQC,MAAM,mBAAoByjB,GAClCC,IACAQ,EAAalH,MAAM3B,GACZgJ,EAAU/Z,WAAjB,EAGIua,EAAepiB,UACnB,UAAW,MAAM,MAAEc,KAAW4D,EAAY0b,EAAgB,CACxD9V,OAAQ+X,IACN,CAEF,MAAMC,EAAexhB,EACrB,OAAQwhB,EAAaC,SACnB,IAAK,QAAS,CACZ,MACEC,YAAY,MAAE/I,EAAF,QAAS7D,EAAT,YAAkBuM,IAC5BG,EACEG,EAAQzB,EAAa7hB,IAAIsa,GACzBiJ,EAAW,CACfjJ,QACA2H,aAAcxL,EACd4D,aAAc5D,EACduM,cACAhB,eAAoB,OAALsB,QAAK,IAALA,OAAA,EAAAA,EAAOtB,gBAAiBlD,GAAAA,GAAAA,UAAqBxE,IAE9DuH,EAAaxhB,IAAIia,EAAOiJ,GACxBzB,IACA,KACD,CACD,IAAK,UAAW,CAGd,MAAM,cAAEE,GAAkBmB,EACpBI,EAAW,IACZ1B,EAAa7hB,IAAIgiB,EAAc1H,OAClC0H,gBACArgB,MAAOqgB,EAAcrgB,OAEvBkgB,EAAaxhB,IAAI2hB,EAAc1H,MAAOiJ,GACtCzB,IACA,KACD,CACD,IAAK,cAAe,CAClB,MAAM,OAAEvG,GAAW4H,EACnBzB,EAAavI,OAAO/C,QAAQsB,YAAY6D,GACxC,KACD,CACD,QAEE,MAAMpc,MAAO,wBAAuBgkB,EAAaC,WAGtD,GAGGI,EAAW,IAAMjB,IAAe3jB,KAAKqkB,GAErCpgB,EAAQ,KACZ2gB,IAAWlf,OAAMsF,IACXA,EAAExK,UAAYuO,EAChBtQ,WAAWwF,EAAO,KAElBqe,EAAatX,EACd,GALH,EASF4Z,IAAWlf,OAAMsF,IACfsX,EAAatX,GACTA,EAAExK,UAAYuO,GAChBtQ,WAAWwF,EAAO,IACnB,IAGH,MAAM4gB,EAAiB,CAACC,EAAgBC,KACtCxlB,QAAQM,IAAI,mBAAZ,EAGImlB,EAAa,CAACC,EAAUC,KAC5B3lB,QAAQM,IAAI,cAAZ,EAGIslB,EAAY,CAACF,EAAUC,EAAUE,KACrC7lB,QAAQM,IAAI,aAAZ,EAGIwlB,EAAgBhM,GAAiBC,GACjCgM,EAAc/N,GAAeF,IAC7B,YAAEgG,EAAF,aAAeG,EAAf,YAA6BF,GAAgBoG,GAE7C,oBACJhB,EADI,mBAEJC,EAFI,oBAGJE,EAHI,kBAIJJ,GACEc,EAkBJ,OAhBqB1iB,EAAAA,EAAAA,IAAI,yBAA0B,CACjD0kB,iBAAkB,IAAMD,EAAYzf,SACpC+c,kBAAmB,IAAMc,EAAa7d,SACtC2f,6BAA8B,IAAMH,EAAcxf,SAClD8c,qBACAD,sBACAG,sBACAJ,oBACApF,cACAG,eACAF,cACAuH,iBACAG,aACAG,aAIH,CI1PoBM,CACb,CAAEzO,QAASgI,EAAgBhI,QAASC,QAAS6K,GAC7Cb,EAAQ9P,UACR8Q,EAAiB,UAASH,aAC1BG,EAAiB,UAASH,KAC1B9C,EACA+C,GACA,KACEX,EAAoBQ,GAAAA,GAAAA,WACpBF,GAAuB,EAAvB,KAGE,UAAEgE,EAAF,OAAaC,GJnFkB,CACuBC,IAMhE,MAAMC,EAAkB5jB,UACtB4a,EAAAA,EAAAA,IAA8BhX,GAAUtD,OAAOC,kBAGzCqD,SAAUigB,IAAqBrO,EAAAA,EAAAA,MAgCjCsO,EAAc7lB,OAAO,CACzBwY,SAAS7X,EAAAA,EAAAA,IAAI,gBAAiB,CAC5BmlB,YAAa,SAACC,GAAD,IAAS3W,EAAT,uDAAcmO,GAAM,SAApB,OACXtb,EAAAA,EAAAA,GAAEyjB,GAAcf,eAAhB,OAA+BoB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAQC,cAAe5W,EAD3C,EAEb6W,cAAe,SAACC,GAAD,IAAe9W,EAAf,uDAAoBmO,GAAM,WAA1B,OACbtb,EAAAA,EAAAA,GAAEyjB,GAAcZ,WAAW1V,EAAI8W,EADlB,EAEfC,aAAc,SAACJ,GAAD,IAAS3W,EAAT,uDAAcmO,GAAM,UAApB,OACZtb,EAAAA,EAAAA,GAAEyjB,GAAcT,UAAU7V,EAAI2W,GAAQ,EAD1B,IAGhBK,SAAUT,EAAgBC,GAC1BS,SAAUV,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAclD,uBAC1C5K,MAAO+N,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAcL,oBACvCiB,QAASX,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAcjD,sBACzCpI,QAxCyBkM,EA0CvBZ,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAchD,qBAzClC1iB,OAAO,CACLwC,KAAMT,UACJ,MAAM,KAAEe,EAAF,MAAQD,SAAgBZ,EAAAA,EAAAA,GAAEskB,GAAe/jB,OAC/C,OAAOxC,OAAO,CACZ8C,OACAD,MACEA,GACAA,EAAM6B,KAAI,QAAC,GAAE0K,KAAOoX,GAAV,SACRxmB,OAAO,CACLoP,QACGoX,EACHhO,QAAS,CAEPnT,OAAQ,KAAMpD,EAAAA,EAAAA,GAAEyjB,GAAcvI,YAAY/N,GAC1CqX,QAAS,KAAMxkB,EAAAA,EAAAA,GAAEyjB,GAAcpI,aAAalO,GAC5CqW,OAAQ,KAAMxjB,EAAAA,EAAAA,GAAEyjB,GAActI,YAAYhO,KARtC,KAJd,EAkBFsX,OAAQH,EAAcG,OACtBC,MAAOJ,EAAcI,SAqBvBC,SAAUjB,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAc/C,uBAC1CM,OAAQ0C,GAAgB1jB,EAAAA,EAAAA,GAAEyjB,GAAcnD,qBACxCsE,kBAAmBlB,GACjB1jB,EAAAA,EAAAA,GAAEyjB,GAAcJ,kCA/COiB,MAsD3B,MAAQ5gB,SAAUmhB,EAAiBxP,QAASyP,IAC1CxP,EAAAA,EAAAA,IAAgBsO,GAQlB,MAAO,CAAEL,UANSG,EAAgBmB,GAMdrB,OAJL3a,IACbic,EAAe9d,KAAK6B,EAApB,EAGF,EIIkCkc,CAA4BhF,GAI1D,OAHAF,EAAiB2D,EAEjBrE,GAAuB,IAAMS,KACtBoF,EAAAA,EAAAA,IAAgBzB,EAAW,CAChC5M,YAAasO,IACXpF,GAAkBX,EAAW+F,EAA7B,EAEFje,KAAM6B,IACJgX,GAAkBD,EAAa/W,EAA/B,EAEFqc,OAAQD,IACNpF,GAAkBX,EAAW+F,EAA7B,GARJ,EAYFE,GAAS5hB,OAAMsF,GAAK2W,EAAU,mCAAoC3W,KAE3D,KACLgX,GAAkBA,IAClBA,OAAiBhhB,CAAjB,CAFF,GAIC,CAACmgB,EAAkBnC,KAGpB,6BACE,UAACuI,GAAA,EAAD,CAAUzI,KAAMyC,EAAiBhgB,OAAS,EAA1C,UACE,UAAC,GAAD,CACEuU,QA/FoB,CAAC0R,EAAGC,KACf,cAAXA,GAIJjG,GAAoBK,GAAMA,EAAGvgB,MAAM,IAAnC,EA2FMwR,SAAQ,UAAEyO,EAAiB,UAAnB,aAAE,EAAqBzO,SAC/ByM,GAAI,CAAEmI,MAAO,QAHf,mBAKGnG,EAAiB,UALpB,aAKG,EAAqB/gB,aAG1B,UAAC,GAAD,CACEse,KAAM2C,EACN3L,QA5GyB,KAC7B4L,GAAuB,EAAvB,EA4GIzK,QAAS6K,EACT/C,KAAMA,EACNnU,aAAcqW,EAAQ9P,UACtB/O,OAAQA,MAjBd,IAuB2D6e,IAAO,CAClEE,iBAAkBF,EAAQE,iBAC1BC,oBAAqBH,EAAQG,oBAC7BC,WAAYJ,EAAQI,WACpBC,uBAAwBL,EAAQK,uBAChCtC,gBAAiBiC,EAAQjC,mB","sources":["../../../casting/src/defaults.js","../../../casting/src/shuffle.js","../../../casting/src/change-follower.js","../../../casting/src/leader-netconfig.js","../../../casting/src/leader.js","../../../casting/src/iterable.js","../../../casting/src/casting-spec.js","../../../casting/src/follower-cosmjs.js","../../../casting/src/follower.js","../../../smart-wallet/src/utils.js","../../api/src/marshal-contexts.js","../../../../node_modules/@mui/material/Alert/alertClasses.js","../../../../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../../../../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../../../../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../../../../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","../../../../node_modules/@mui/material/Alert/Alert.js","store/Dapps.js","service/Dapps.js","service/Issuers.js","store/Offers.js","service/Offers.js","util/WalletBackendAdapter.js","../../../../node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","../../../../node_modules/@mui/material/DialogContentText/DialogContentText.js","components/ProvisionDialog.jsx","components/SmartWalletConnection.jsx"],"sourcesContent":["// @ts-check\n/* global setTimeout */\nimport { Far } from '@endo/far';\nimport { makeMarshal } from '@endo/marshal';\n\n/**\n * Default to the local chain.\n */\nexport const DEFAULT_BOOTSTRAP = 'http://localhost:26657';\n\nexport const DEFAULT_JITTER_SECONDS = 5;\n\nexport const DEFAULT_POLL_WITH_EVENTS_SECONDS = 600;\n\nexport const DEFAULT_KEEP_POLLING_SECONDS = 5;\n\n/**\n * Resolve a Promise after a given number of milliseconds.\n *\n * SECURITY: closes over setTimeout global\n *\n * @param {number} ms\n * @returns {Promise<void>}\n */\nexport const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * @param {number} range\n * @param {number} [cap]\n */\nexport const randomBackoff = (range, cap = range) => {\n  return Math.random() * Math.min(cap, range);\n};\n\n/**\n * @param {number} [attempt]\n * @param {number} [base]\n * @param {number} [cap]\n */\nexport const exponentialBackoff = (attempt = 0, base = 1_000, cap = 30_000) => {\n  return randomBackoff(2 ** attempt * base, cap);\n};\n\n/**\n * Add a little to the retry delay to avoid a thundering herd.\n *\n * @param {string} where\n * @returns {Promise<void>}\n */\nexport const DEFAULT_JITTER = where => {\n  const jitter = randomBackoff(DEFAULT_JITTER_SECONDS * 1_000);\n  console.debug(`jittering ${where} by ${Math.ceil(jitter)}ms`);\n  return delay(jitter);\n};\n\n/**\n * Report an error, then retry the leader operation after a second or two.\n *\n * @param {string} where\n * @param {any} err\n * @param {number} [attempt]\n * @returns {Promise<void>}\n */\nexport const DEFAULT_RETRY_CALLBACK = (where, err, attempt = 0) => {\n  const backoff = exponentialBackoff(attempt);\n  console.log(\n    `retrying ${where} in ${Math.ceil(backoff)}ms after attempt #${attempt}`,\n    err,\n  );\n  return delay(backoff);\n};\n\n/**\n * Return true after we want to be sure we received latest state something.\n *\n * @returns {Promise<boolean>}\n */\nexport const DEFAULT_KEEP_POLLING = () =>\n  delay(randomBackoff(DEFAULT_KEEP_POLLING_SECONDS * 1_000)).then(() => true);\n\nexport const MAKE_DEFAULT_DECODER = () => {\n  /**\n   * Parse JSON.\n   *\n   * @param {string} str\n   */\n  return harden(str => {\n    try {\n      return harden(JSON.parse(str));\n    } catch (error) {\n      throw new Error(`Cannot decode alleged JSON (${error.message}): ${str}`);\n    }\n  });\n};\n\n/**\n * Unserialize the JSONable data.\n *\n * @type {() => import('./types').Unserializer}\n */\nexport const MAKE_DEFAULT_UNSERIALIZER = () => {\n  const ifaceAllegedPrefix = 'Alleged: ';\n  const ifaceInaccessiblePrefix = 'SEVERED: ';\n  const seen = new Map();\n  const slotToVal = (slot, iface) => {\n    // Private object.\n    if (seen.has(slot)) {\n      return seen.get(slot);\n    }\n    if (typeof iface === 'string' && iface.startsWith(ifaceAllegedPrefix)) {\n      iface = iface.slice(ifaceAllegedPrefix.length);\n    }\n    const obj = Far(`${ifaceInaccessiblePrefix}${iface}`, {});\n    seen.set(slot, obj);\n    return obj;\n  };\n  return Far('marshal unserializer', {\n    unserialize: makeMarshal(undefined, slotToVal).unserialize,\n  });\n};\n","// @ts-check\n\n/**\n * Modern version of Fisher-Yates shuffle algorithm (in-place).\n *\n * @template T\n * @param {Array<T>} a\n */\nexport const shuffle = a => {\n  for (let i = a.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n};\n","// @ts-check\nimport { E, Far } from '@endo/far';\nimport { DEFAULT_KEEP_POLLING } from './defaults.js';\n\n/**\n * Just return an unspecified allegedValue every poll period.\n *\n * @param {import('./types').Leader} leader\n * @returns {Promise<import('./types.js').Follower<import('./types').CastingChange>>}\n */\nexport const makePollingChangeFollower = async leader => {\n  const { keepPolling = DEFAULT_KEEP_POLLING } = await E(leader).getOptions();\n\n  const iterable = Far('polling change follower iterable', {\n    [Symbol.asyncIterator]: () => {\n      /** @type {Promise<boolean> | undefined} */\n      let nextPollPromise;\n      return Far('polling change follower iterator', {\n        next: async () => {\n          if (!nextPollPromise) {\n            nextPollPromise = keepPolling('polling change follower').then(\n              cont => {\n                if (cont) {\n                  return E(leader)\n                    .jitter('polling change follower')\n                    .then(() => cont);\n                }\n                return cont;\n              },\n            );\n          }\n          const keepGoing = await nextPollPromise;\n          nextPollPromise = undefined;\n          const change = harden({\n            // Make no warrant as to the values.\n            values: [],\n          });\n          return harden({\n            value: change,\n            done: !keepGoing,\n          });\n        },\n      });\n    },\n  });\n\n  return Far('polling change follower', {\n    getLatestIterable: async () => iterable,\n    getEachIterable: async () => iterable,\n    getReverseIterable: async () => {\n      throw Error('not implemented for polling change follower');\n    },\n  });\n};\n","// @ts-check\n/* global fetch */\nimport { makeRoundRobinLeader } from './leader.js';\nimport {\n  DEFAULT_BOOTSTRAP,\n  DEFAULT_JITTER,\n  DEFAULT_RETRY_CALLBACK,\n} from './defaults.js';\n\nconst { details: X } = assert;\n\n/**\n * @param {string[]} rpcAddrs\n * @param {import('./types.js').LeaderOptions} [leaderOptions]\n * @returns {import('./types.js').Leader}\n */\nexport const makeLeaderFromRpcAddresses = (rpcAddrs, leaderOptions) => {\n  assert(Array.isArray(rpcAddrs), X`rpcAddrs ${rpcAddrs} must be an array`);\n\n  const rpcHrefs = rpcAddrs.map(rpcAddr => {\n    assert.typeof(rpcAddr, 'string', X`rpcAddr ${rpcAddr} must be a string`);\n    // Don't remove explicit port numbers from the URL, because the Cosmos\n    // `--node=xxx` flag requires them (it doesn't just assume that\n    // `--node=https://testnet.rpc.agoric.net` is the same as\n    // `--node=https://testnet.rpc.agoric.net:443`)\n    return rpcAddr.includes('://') ? rpcAddr : `http://${rpcAddr}`;\n  });\n\n  return makeRoundRobinLeader(rpcHrefs, leaderOptions);\n};\n\n/**\n * @param {string} netconfigURL\n * @param {import('./types.js').LeaderOptions} [options]\n */\nexport const makeLeaderFromNetworkConfig = (netconfigURL, options = {}) => {\n  const { retryCallback = DEFAULT_RETRY_CALLBACK, jitter = DEFAULT_JITTER } =\n    options;\n  /** @type {import('./types.js').LeaderOptions['retryCallback']} */\n  const retry = async (where, err, attempt) => {\n    if (retryCallback) {\n      return retryCallback(where, err, attempt);\n    }\n    throw err;\n  };\n  let attempt = 0;\n  const where = 'Network config leader';\n  return new Promise((resolve, reject) => {\n    const makeLeader = async () => {\n      const response = await fetch(netconfigURL, {\n        headers: { accept: 'application/json' },\n      });\n      const { rpcAddrs } = await response.json();\n      // Our part succeeded, so reset the attempt counter.\n      attempt = 0;\n      return makeLeaderFromRpcAddresses(rpcAddrs, options);\n    };\n    const retryLeader = async err => {\n      retry(where, err, attempt)\n        .then(() => jitter(where))\n        .then(() => makeLeader().then(resolve, retryLeader))\n        .catch(reject);\n      attempt += 1;\n    };\n    makeLeader().then(resolve, retryLeader);\n  });\n};\n\n/**\n * @param {string} [bootstrap]\n * @param {import('./types.js').LeaderOptions} [options]\n * @returns {ERef<import('./types.js').Leader>}\n */\nexport const makeLeader = (bootstrap = DEFAULT_BOOTSTRAP, options) => {\n  if (bootstrap.includes('network-config')) {\n    return makeLeaderFromNetworkConfig(bootstrap, options);\n  }\n  return makeLeaderFromRpcAddresses([bootstrap], options);\n};\n/** @typedef {ReturnType<typeof makeLeader>} Leader */\n","// @ts-check\nimport { E, Far } from '@endo/far';\nimport { DEFAULT_RETRY_CALLBACK, DEFAULT_JITTER } from './defaults.js';\nimport { shuffle } from './shuffle.js';\nimport { makePollingChangeFollower } from './change-follower.js';\n\n/**\n * Create a chain leader that rotates through a list of endpoints.\n *\n * @param {string[]} endpoints\n * @param {import('./types.js').LeaderOptions} leaderOptions\n */\nexport const makeRoundRobinLeader = (endpoints, leaderOptions = {}) => {\n  const { retryCallback = DEFAULT_RETRY_CALLBACK, jitter = DEFAULT_JITTER } =\n    leaderOptions;\n\n  // Shuffle the RPC addresses, so that we don't always hit the same one as all\n  // our peers.\n  shuffle(endpoints);\n\n  let lastRespondingEndpointIndex = 0;\n  let thisAttempt = 0;\n  let retrying;\n\n  /** @type {import('./types.js').Leader} */\n  const leader = Far('round robin leader', {\n    getOptions: () => leaderOptions,\n    jitter: async where => jitter && jitter(where),\n    retry: async (where, err, attempt) => {\n      if (retryCallback) {\n        return retryCallback(where, err, attempt);\n      }\n      throw err;\n    },\n    // eslint-disable-next-line no-use-before-define\n    watchCasting: _castingSpecP => pollingChangeFollower,\n    /**\n     * @template T\n     * @param {string} where\n     * @param {(endpoint: string) => Promise<T>} callback\n     */\n    mapEndpoints: async (where, callback) => {\n      where = `${where} (round-robin endpoints)`;\n      /** @type {Promise<T[]>} */\n      const p = new Promise((resolve, reject) => {\n        let endpointIndex = lastRespondingEndpointIndex;\n\n        const retry = err => {\n          if (!retrying) {\n            const attempt = thisAttempt;\n            retrying = E(leader)\n              .retry(where, err, attempt)\n              .then(() => {\n                endpointIndex = (endpointIndex + 1) % endpoints.length;\n                retrying = null;\n              });\n          }\n\n          retrying\n            .then(() => jitter && jitter(where))\n            // eslint-disable-next-line no-use-before-define\n            .then(applyOne, reject);\n          thisAttempt += 1;\n        };\n\n        const applyOne = () => {\n          Promise.resolve()\n            .then(() => callback(endpoints[endpointIndex]))\n            .then(res => {\n              resolve(harden([res]));\n              lastRespondingEndpointIndex = endpointIndex;\n              thisAttempt = 0;\n            }, retry);\n\n          // Don't return to prevent a promise chain.\n        };\n\n        applyOne();\n      });\n      return p;\n    },\n  });\n\n  const pollingChangeFollower = makePollingChangeFollower(leader);\n  return leader;\n};\n","// @ts-check\nimport { E, Far } from '@endo/far';\nimport { makeNotifier } from '@agoric/notifier';\n\n/**\n * @template T\n * @param {ERef<Notifier<T>>} notifier\n * @returns {ConsistentAsyncIterable<T>}\n */\nexport const makeNotifierIterable = notifier =>\n  makeNotifier(E(notifier).getSharableNotifierInternals());\n\n/**\n * TODO: Remove this function when we have `makePublisherKit`.\n *\n * @template T\n * @param {ERef<PublicationRecord<T>>} tailP\n * @returns {AsyncIterator<T>}\n */\nconst makeSubscriptionIterator = tailP => {\n  // To understand the implementation, start with\n  // https://web.archive.org/web/20160404122250/http://wiki.ecmascript.org/doku.php?id=strawman:concurrency#infinite_queue\n  return Far('SubscriptionIterator', {\n    next: async () => {\n      const resultP = E.get(tailP).head;\n      tailP = E.get(tailP).tail;\n      return resultP;\n    },\n  });\n};\n\n/**\n * TODO: Remove this function when we have `makePublisherKit`.\n *\n * @template T\n * @param {ERef<Subscription<T>>} subscription\n * @returns {ConsistentAsyncIterable<T>}\n */\nexport const makeSubscriptionIterable = subscription =>\n  harden({\n    [Symbol.asyncIterator]: () =>\n      makeSubscriptionIterator(\n        E(subscription).getSharableSubscriptionInternals(),\n      ),\n  });\n\n/**\n * @template TIn\n * @template TOut\n * @param {AsyncIterable<TIn>} iterable\n * @param {(value: TIn) => TOut} transform\n * @returns {AsyncIterable<TOut>}\n */\nexport const mapAsyncIterable = (iterable, transform) => {\n  async function* transformGenerator() {\n    for await (const value of iterable) {\n      yield transform(value);\n    }\n  }\n  return transformGenerator();\n};\n\n/**\n * TODO: Remove this function when we have `makePublisherKit`.\n *\n * @template T\n * @param {ERef<import('./types').Follower<T>>} follower\n */\nexport const iterateLatest = follower =>\n  // For now, just pass through the iterable.\n  Far('iterateLatest iterable', {\n    /** @returns {AsyncIterator<T>} */\n    [Symbol.asyncIterator]: () => {\n      const latestIterable = E(follower).getLatestIterable();\n      const iterator = E(latestIterable)[Symbol.asyncIterator]();\n      return Far('iterateLatest iterator', {\n        next: () => E(iterator).next(),\n      });\n    },\n  });\n\n/**\n * TODO: Remove this function when we have `makePublisherKit`.\n *\n * @template T\n * @param {ERef<import('./types.js').Follower<T>>} follower\n * @param {import('./types.js').IterateEachOptions} [options]\n */\nexport const iterateEach = (follower, options) =>\n  // For now, just pass through the iterable.\n  Far('iterateEach iterable', {\n    /** @returns {AsyncIterator<T>} */\n    [Symbol.asyncIterator]: () => {\n      const eachIterable = E(follower).getEachIterable(options);\n      const iterator = E(eachIterable)[Symbol.asyncIterator]();\n      return Far('iterateEach iterator', {\n        next: () => E(iterator).next(),\n      });\n    },\n  });\n\n/**\n * @template T\n * @param {ERef<import('./types.js').Follower<T>>} follower\n * @param {import('./types.js').IterateEachOptions} [options]\n */\nexport const iterateReverse = (follower, options) =>\n  // For now, just pass through the iterable.\n  Far('iterateReverse iterable', {\n    /** @returns {AsyncIterator<T>} */\n    [Symbol.asyncIterator]: () => {\n      const eachIterable = E(follower).getReverseIterable(options);\n      const iterator = E(eachIterable)[Symbol.asyncIterator]();\n      return Far('iterateEach iterator', {\n        next: () => E(iterator).next(),\n      });\n    },\n  });\n","// @ts-check\nimport * as encodingStar from '@cosmjs/encoding';\nimport { E, getInterfaceOf } from '@endo/far';\n\nimport './types.js';\n\nconst { toAscii } = encodingStar;\n\n/**\n * @param {string} storagePath\n * @returns {import('./types').CastingSpec}\n */\nconst swingsetPathToCastingSpec = storagePath =>\n  harden({\n    storeName: 'swingset',\n    storeSubkey: toAscii(`swingset/data:${storagePath}`),\n  });\n\nconst PATH_SEPARATOR_BYTE = '.'.charCodeAt(0);\nconst DATA_PREFIX_BYTES = new Uint8Array([0]);\n\n/**\n * @param {string} storagePath\n * @param {string} [storeName]\n * @returns {import('./types').CastingSpec}\n */\nconst vstoragePathToCastingSpec = (storagePath, storeName = 'vstorage') => {\n  const elems = storagePath ? storagePath.split('.') : [];\n  const buf = toAscii(`${elems.length}.${storagePath}`);\n  return harden({\n    storeName,\n    storeSubkey: buf.map(b => (b === PATH_SEPARATOR_BYTE ? 0 : b)),\n    dataPrefixBytes: DATA_PREFIX_BYTES,\n  });\n};\n\nexport const DEFAULT_PATH_CONVERTER = vstoragePathToCastingSpec;\n\n/**\n * @type {Record<string, (path: string) => import('./types').CastingSpec>}\n */\nexport const pathPrefixToConverters = harden({\n  'swingset:': swingsetPathToCastingSpec,\n  'vstore:': vstoragePathToCastingSpec,\n  ':': DEFAULT_PATH_CONVERTER,\n});\n\n/**\n * @param {string} specString\n * @returns {import('./types').CastingSpec}\n */\nexport const makeCastingSpecFromString = specString => {\n  assert.typeof(specString, 'string');\n  const match = specString.match(/^([^:.]*:)(.*)/);\n  assert(\n    match,\n    `spec string ${specString} does not match 'PREFIX:PATH' or ':PATH'`,\n  );\n  const kind = match[1];\n  const storePath = match[2];\n  const converter = pathPrefixToConverters[kind];\n  assert(converter, `Unknown pathKind ${kind}`);\n  return converter(storePath);\n};\n\nconst te = new TextEncoder();\n\n/**\n * @param {any} specObj\n * @returns {import('./types').CastingSpec}\n */\nexport const makeCastingSpecFromObject = specObj => {\n  const { storeName, storeSubkey, dataPrefixBytes, subscription, notifier } =\n    specObj;\n  if (subscription || notifier) {\n    return harden({\n      subscription,\n      notifier,\n    });\n  }\n  let subkey = storeSubkey;\n  if (typeof storeSubkey === 'string') {\n    subkey = te.encode(storeSubkey);\n  }\n  let dataPrefix = dataPrefixBytes;\n  if (typeof dataPrefixBytes === 'string') {\n    dataPrefix = te.encode(dataPrefixBytes);\n  }\n  return harden({\n    storeName,\n    storeSubkey: subkey,\n    dataPrefixBytes: dataPrefix,\n  });\n};\n\n/**\n * @param {ERef<any>} specCap\n * @returns {Promise<import('./types').CastingSpec>}\n */\nexport const makeCastingSpecFromRef = async specCap => {\n  const specObj = await E(specCap).getStoreKey();\n  return makeCastingSpecFromObject(specObj);\n};\n\n/**\n * Create an abstract type from a given source representation\n *\n * @param {ERef<unknown>} sourceP\n * @returns {Promise<import('./types').CastingSpec>}\n */\nexport const makeCastingSpec = async sourceP => {\n  const spec = await sourceP;\n  if (typeof spec === 'string') {\n    return makeCastingSpecFromString(spec);\n  }\n  // @ts-expect-error type detection\n  const { storeName, subscription, notifier } = spec;\n  if (storeName || subscription || notifier) {\n    return makeCastingSpecFromObject(spec);\n  }\n  if (getInterfaceOf(spec)) {\n    return makeCastingSpecFromRef(spec);\n  }\n  assert.fail(`CastingSpec ${spec} is not a string, object, or ref`);\n};\n/** @typedef {ReturnType<typeof makeCastingSpec>} CastingSpec */\n","// @ts-check\n/// <reference types=\"ses\"/>\n/* eslint-disable no-await-in-loop, no-continue, @jessie.js/no-nested-await */\n\nimport { E, Far } from '@endo/far';\nimport * as tendermintRpcStar from '@cosmjs/tendermint-rpc';\nimport * as stargateStar from '@cosmjs/stargate';\n\nimport { MAKE_DEFAULT_DECODER, MAKE_DEFAULT_UNSERIALIZER } from './defaults.js';\nimport { makeCastingSpec } from './casting-spec.js';\nimport { makeLeader as defaultMakeLeader } from './leader-netconfig.js';\n\nconst { QueryClient } = stargateStar;\nconst { Tendermint34Client } = tendermintRpcStar;\nconst { details: X, quote: q } = assert;\nconst textDecoder = new TextDecoder();\n\n/** @template T @typedef {import('./types.js').StreamCell<T>} StreamCell */\n/** @template T @typedef {import('./types.js').ValueFollowerElement<T>} ValueFollowerElement */\n/** @template T @typedef {import('./types.js').Follower<ValueFollowerElement<T>>} ValueFollower */\n\n/**\n * This is an imperfect heuristic to navigate the migration from value cells to\n * stream cells.\n * At time of writing, no legacy cells have the same shape as a stream cell,\n * and we do not intend to create any more legacy value cells.\n *\n * @param {any} cell\n */\nconst isStreamCell = cell =>\n  cell &&\n  typeof cell === 'object' &&\n  Array.isArray(cell.values) &&\n  typeof cell.blockHeight === 'string' &&\n  /^0$|^[1-9][0-9]*$/.test(cell.blockHeight);\n\n/**\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nconst arrayEqual = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i += 1) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst defaultDataPrefixBytes = new Uint8Array();\n\n/**\n * @template T\n * @param {Iterable<T>} values\n * @returns {T}\n */\nconst collectSingle = values => {\n  /** @type {T[]} */\n  const head = [];\n  let count = 0;\n  for (const value of values) {\n    count += 1;\n    if (count === 1) {\n      head.push(value);\n    } else {\n      assert.fail(`expected single value, got at least ${count}`);\n    }\n  }\n\n  assert.equal(head.length, 1, 'expected single value');\n  return head[0];\n};\n\n// Coordinate with switch/case of tryGetDataAtHeight.\nconst proofs = ['strict', 'none', 'optimistic'];\n\n/**\n * @template T\n * @param {any} sourceP\n * @param {import('./types').LeaderOrMaker} [leaderOrMaker]\n * @param {import('./types').FollowerOptions} [options]\n * @returns {ValueFollower<T>}\n */\nexport const makeCosmjsFollower = (\n  sourceP,\n  leaderOrMaker = defaultMakeLeader,\n  options = {},\n) => {\n  const {\n    decode = MAKE_DEFAULT_DECODER(),\n    unserializer = MAKE_DEFAULT_UNSERIALIZER(),\n    proof = 'optimistic',\n    crasher = null,\n  } = options;\n\n  /**\n   * @param {any} err\n   */\n  const crash = err => {\n    if (crasher) {\n      E(crasher)\n        .crash(`PROOF VERIFICATION FAILURE; crashing follower`, err)\n        .catch(e => assert.fail(X`crashing follower failed: ${e}`));\n    }\n    throw err;\n  };\n\n  assert(proofs.includes(proof), X`unrecognized follower proof mode ${proof}`);\n\n  const where = 'CosmJS follower';\n  const castingSpecP = makeCastingSpec(sourceP);\n\n  const leader =\n    typeof leaderOrMaker === 'function' ? leaderOrMaker() : leaderOrMaker;\n\n  const tendermintClientPs = new Map();\n  /**\n   * @param {string} endpoint\n   * @returns {tendermintRpcStar.Tendermint34Client}\n   */\n  const provideTendermintClient = endpoint => {\n    let clientP = tendermintClientPs.get(endpoint);\n    if (!clientP) {\n      clientP = Tendermint34Client.connect(endpoint);\n      tendermintClientPs.set(endpoint, clientP);\n    }\n    return clientP;\n  };\n\n  const getBlockHeight = async () => {\n    const values = await E(leader).mapEndpoints(where, async endpoint => {\n      const client = await provideTendermintClient(endpoint);\n      const info = await client.abciInfo();\n      const { lastBlockHeight } = info;\n      assert.typeof(lastBlockHeight, 'number');\n      return lastBlockHeight;\n    });\n    return collectSingle(values);\n  };\n\n  /** @type {Map<string, import('@cosmjs/stargate').QueryClient>} */\n  const endpointToQueryClient = new Map();\n\n  /**\n   * @param {string} endpoint\n   */\n  const provideQueryClient = async endpoint => {\n    if (endpointToQueryClient.has(endpoint)) {\n      // Cache hit.\n      const queryClient = endpointToQueryClient.get(endpoint);\n      assert(queryClient);\n      return queryClient;\n    }\n    // Create a new client.  They retry automatically.\n    const rpcClient = await provideTendermintClient(endpoint);\n    const queryClient = QueryClient.withExtensions(rpcClient);\n    endpointToQueryClient.set(endpoint, queryClient);\n    return queryClient;\n  };\n\n  /**\n   * @param {(endpoint: string, storeName: string, storeSubkey: Uint8Array) => Promise<Uint8Array>} tryGetPrefixedData\n   */\n  const retryGetDataAndStripPrefix = async tryGetPrefixedData => {\n    const {\n      storeName,\n      storeSubkey,\n      dataPrefixBytes = defaultDataPrefixBytes,\n    } = await castingSpecP;\n\n    assert.typeof(\n      storeName,\n      'string',\n      X`storeName must be a string, got ${storeName}`,\n    );\n    assert(\n      storeSubkey,\n      X`storeSubkey must be a Uint8Array, got ${storeSubkey}`,\n    );\n\n    // mapEndpoints is our retry loop.\n    const values = await E(leader).mapEndpoints(where, async endpoint =>\n      tryGetPrefixedData(endpoint, storeName, storeSubkey).then(\n        result => {\n          return { result, error: null };\n        },\n        error => {\n          return { result: null, error };\n        },\n      ),\n    );\n\n    const { result, error } = collectSingle(values);\n    if (error !== null) {\n      throw error;\n    }\n    assert(result);\n\n    if (result.length === 0) {\n      // No data.\n      return result;\n    }\n\n    // Handle the data prefix if any.\n    assert(\n      result.length >= dataPrefixBytes.length,\n      X`result too short for data prefix ${dataPrefixBytes}`,\n    );\n    assert(\n      arrayEqual(result.subarray(0, dataPrefixBytes.length), dataPrefixBytes),\n      X`${result} doesn't start with data prefix ${dataPrefixBytes}`,\n    );\n    return result.slice(dataPrefixBytes.length);\n  };\n\n  /**\n   * @param {number} [height]\n   * @returns {Promise<Uint8Array>}\n   */\n  const getProvenDataAtHeight = async height => {\n    return retryGetDataAndStripPrefix(\n      async (endpoint, storeName, storeSubkey) => {\n        const queryClient = await provideQueryClient(endpoint);\n        return E(queryClient).queryVerified(storeName, storeSubkey, height);\n      },\n    );\n  };\n\n  /**\n   * @param {number} height\n   */\n  const getUnprovenDataAtHeight = async height => {\n    return retryGetDataAndStripPrefix(\n      async (endpoint, storeName, storeSubkey) => {\n        const client = await provideTendermintClient(endpoint);\n        const response = await client.abciQuery({\n          path: `store/${storeName}/key`,\n          data: storeSubkey,\n          height,\n          prove: false,\n        });\n        if (response.code !== 0) {\n          throw new Error(`Tendermint ABCI query failed: ${response.log}`);\n        }\n        const { value } = response;\n        return value;\n      },\n    );\n  };\n\n  /**\n   * @param {number} blockHeight\n   */\n  const tryGetDataAtHeight = async blockHeight => {\n    if (proof === 'strict') {\n      // Crash hard if we can't prove.\n      return getProvenDataAtHeight(blockHeight).catch(crash);\n    } else if (proof === 'none') {\n      // Fast and loose.\n      return getUnprovenDataAtHeight(blockHeight);\n    } else if (proof === 'optimistic') {\n      const allegedData = await getUnprovenDataAtHeight(blockHeight);\n\n      // Prove later, since it may take time we say we can't afford.\n      getProvenDataAtHeight(blockHeight).then(provenData => {\n        if (arrayEqual(provenData, allegedData)) {\n          return;\n        }\n        crash(\n          assert.error(\n            X`Alleged value ${allegedData} did not match proof ${provenData}`,\n          ),\n        );\n      }, crash);\n\n      // Speculate that we got the right value.\n      return allegedData;\n    }\n\n    assert.fail(\n      X`Unrecognized proof option ${q(\n        proof,\n      )}, must be one of strict, none, or optimistic`,\n    );\n  };\n\n  /**\n   * @param {number} blockHeight\n   */\n  const getDataAtHeight = async blockHeight => {\n    assert.typeof(blockHeight, 'number');\n    for (let attempt = 0; ; attempt += 1) {\n      try {\n        // AWAIT\n        return await tryGetDataAtHeight(blockHeight);\n      } catch (error) {\n        // We expect occasionally to see an error here if the chain has not\n        // reached the requested blockHeight.\n        await E(leader).retry(where, error, attempt);\n        continue;\n      }\n    }\n  };\n\n  /**\n   * @param {number} blockHeight\n   * @param {Uint8Array} data\n   */\n  const streamCellForData = (blockHeight, data) => {\n    const text = textDecoder.decode(data);\n    try {\n      const cell = JSON.parse(text);\n      if (isStreamCell(cell)) {\n        return harden({\n          blockHeight: Number(cell.blockHeight),\n          values: cell.values.map(decode),\n        });\n      }\n\n      // This is JSON but not the shape of a stream cell.\n      // Fall through...\n    } catch {\n      // This is not even JSON, so it must be a legacy value cell.\n      // Fall through...\n    }\n\n    // Coerce legacy value cells to stream cells at their given height.\n    // Since this is either the first iteration or the data varies bytewise\n    // from the data on the previous block, we can assume the blockHeight is\n    // the current block.\n    return harden({\n      blockHeight,\n      values: [decode(text)],\n    });\n  };\n\n  /**\n   * @param {any} data\n   * @param {number} blockHeight\n   * @param {number} currentBlockHeight\n   * @returns {Promise<ValueFollowerElement<T>>}\n   */\n  const followerElementFromStreamCellValue = async (\n    data,\n    blockHeight,\n    currentBlockHeight,\n  ) => {\n    // AWAIT\n    const value = await /** @type {T} */ (\n      unserializer ? E(unserializer).unserialize(data) : data\n    );\n    return { value, blockHeight, currentBlockHeight };\n  };\n\n  /**\n   * @param {StreamCell<T>} streamCell\n   * @param {number} currentBlockHeight\n   * @yields {ValueFollowerElement<T>}\n   */\n  function* allValuesFromCell(streamCell, currentBlockHeight) {\n    for (const data of streamCell.values) {\n      yield followerElementFromStreamCellValue(\n        data,\n        streamCell.blockHeight,\n        currentBlockHeight,\n      );\n    }\n  }\n\n  /**\n   * @param {StreamCell<T>} streamCell\n   * @param {number} currentBlockHeight\n   * @yields {ValueFollowerElement<T>}\n   */\n  function* reverseValuesFromCell(streamCell, currentBlockHeight) {\n    for (let i = streamCell.values.length - 1; i >= 0; i -= 1) {\n      yield followerElementFromStreamCellValue(\n        streamCell.values[i],\n        streamCell.blockHeight,\n        currentBlockHeight,\n      );\n    }\n  }\n\n  /**\n   * @param {StreamCell<T>} streamCell\n   * @param {number} currentBlockHeight\n   * @yields {ValueFollowerElement<T>}\n   */\n  function* lastValueFromCell(streamCell, currentBlockHeight) {\n    const { values } = streamCell;\n    if (values.length > 0) {\n      const last = values[values.length - 1];\n      yield followerElementFromStreamCellValue(\n        last,\n        streamCell.blockHeight,\n        currentBlockHeight,\n      );\n    }\n  }\n\n  /**\n   * @yields {ValueFollowerElement<T>}\n   */\n  async function* getLatestIterable() {\n    let blockHeight;\n    let data;\n    for (;;) {\n      const currentBlockHeight = await getBlockHeight();\n      if (currentBlockHeight === blockHeight) {\n        // TODO Long-poll for next block\n        // https://github.com/Agoric/agoric-sdk/issues/6154\n        await E(leader).jitter(where);\n        continue;\n      }\n\n      const currentData = await getDataAtHeight(currentBlockHeight);\n      if (currentData.length === 0) {\n        // TODO Long-poll for block data change\n        // https://github.com/Agoric/agoric-sdk/issues/6154\n        await E(leader).jitter(where);\n        continue;\n      }\n      const currentStreamCell = streamCellForData(\n        currentBlockHeight,\n        currentData,\n      );\n\n      blockHeight = currentBlockHeight;\n\n      // Ignore adjacent duplicates.\n      // This can only occur for legacy cells.\n      // It is possible that the data changed from and back to the last\n      // sampled data, but ignoring intermediate changes is consistent with\n      // the semantics of getLatestIterable.\n      if (data !== undefined && arrayEqual(data, currentData)) {\n        continue;\n      }\n      // However, streamCells that vacillate will reemit, since each iteration\n      // at a unique block height is considered distinct.\n\n      yield* lastValueFromCell(currentStreamCell, currentBlockHeight);\n      data = currentData;\n    }\n  }\n\n  /**\n   * @param {number} cursorBlockHeight\n   * @yields {ValueFollowerElement<T>}\n   */\n  async function* getEachIterableAtHeight(cursorBlockHeight) {\n    assert.typeof(cursorBlockHeight, 'number');\n    // Track the data for the last emitted cell (the cell at the\n    // cursorBlockHeight) so we know not to emit duplicates\n    // of that cell.\n    let cursorData;\n    // Initially yield *all* the values that were most recently stored in a\n    // block.\n    // If the block has no corresponding data, wait for the first block to\n    // contain data.\n    for (;;) {\n      cursorData = await getDataAtHeight(cursorBlockHeight);\n      if (cursorData.length !== 0) {\n        const cursorStreamCell = streamCellForData(\n          cursorBlockHeight,\n          cursorData,\n        );\n        yield* allValuesFromCell(cursorStreamCell, cursorBlockHeight);\n        break;\n      }\n      // TODO Long-poll for next block\n      // https://github.com/Agoric/agoric-sdk/issues/6154\n      await E(leader).jitter(where);\n      cursorBlockHeight = await getBlockHeight();\n    }\n\n    // For each subsequent iteration, yield every value that has been\n    // published since the last iteration and advance the cursor.\n    for (;;) {\n      const currentBlockHeight = await getBlockHeight();\n      // Wait until the chain has added at least one block.\n      if (currentBlockHeight <= cursorBlockHeight) {\n        // TODO Long-poll for next block\n        // https://github.com/Agoric/agoric-sdk/issues/6154\n        await E(leader).jitter(where);\n        continue;\n      }\n\n      // Scan backward for all changes since the last observed block and yield\n      // them in forward order.\n      // Stream cells allow us to skip blocks that did not change.\n      // We walk backward through all blocks with legacy cells, only yielding\n      // the value for cells that changed.\n      // This does imply accumulating a potentially large number of values if\n      // the eachIterable gets sampled infrequently.\n      let rightBlockHeight = currentBlockHeight;\n      let rightData = await getDataAtHeight(rightBlockHeight);\n      if (rightData.length === 0) {\n        // TODO Long-poll for next block\n        // https://github.com/Agoric/agoric-sdk/issues/6154\n        await E(leader).jitter(where);\n        continue;\n      }\n      let rightStreamCell = streamCellForData(rightBlockHeight, rightData);\n\n      // Compare block cell data pairwise (left, right) and accumulate\n      // a stack of each cell we encounter.\n      const currentData = rightData;\n      const cells = [];\n      while (rightBlockHeight > cursorBlockHeight) {\n        if (rightStreamCell.blockHeight > rightBlockHeight) {\n          const { storeName, storeSubkey } = await castingSpecP;\n          throw new Error(\n            `Corrupt storage cell for ${storeName} under key ${storeSubkey} at block-height ${rightBlockHeight} claims to being published at a later block height ${rightStreamCell.blockHeight}`,\n          );\n        }\n        const leftBlockHeight = rightStreamCell.blockHeight - 1;\n        // Do not scan behind the cusor.\n        if (leftBlockHeight <= cursorBlockHeight) {\n          break;\n        }\n        const leftData = await getDataAtHeight(leftBlockHeight);\n        // Do not scan behind a cell with no data.\n        // This should not happen but can be tolerated.\n        if (leftData.length === 0) {\n          break;\n        }\n        const leftStreamCell = streamCellForData(leftBlockHeight, leftData);\n\n        // Stream cells include a block height that is guaranteed to change\n        // between iterations even if the values are identical.\n        // We can rely on this difference to ensure that we yield\n        // every iteration, including duplicates.\n        // Legacy cells do not contain a block height to distingish versions,\n        // so we simply assume that the value must change between iterations\n        // for a cell to be worthy of notice.\n        if (!arrayEqual(leftData, rightData)) {\n          cells.push(rightStreamCell);\n        }\n\n        // Prepare for next iteration by moving left to right.\n        rightData = leftData;\n        rightStreamCell = leftStreamCell;\n        rightBlockHeight = leftBlockHeight;\n      }\n\n      // At the end of a sequence of identical value cells, we emit the value\n      // only if it differs from the last reported cell.\n      if (!arrayEqual(rightData, cursorData)) {\n        cells.push(rightStreamCell);\n      }\n\n      // Yield collected cells in forward order.\n      // They were collected by scanning blocks backward.\n      for (;;) {\n        const cell = cells.pop();\n        if (cell === undefined) {\n          break;\n        }\n        yield* allValuesFromCell(cell, currentBlockHeight);\n      }\n\n      // Advance the cursor.\n      cursorBlockHeight = currentBlockHeight;\n      cursorData = currentData;\n    }\n  }\n\n  /**\n   * @param {number} cursorBlockHeight\n   * @yields {ValueFollowerElement<T>}\n   */\n  async function* getReverseIterableAtHeight(cursorBlockHeight) {\n    // Track the data for the last emitted cell (the cell at the\n    // cursorBlockHeight) so we know not to emit duplicates\n    // of that cell.\n    let cursorData;\n    while (cursorBlockHeight > 0) {\n      cursorData = await getDataAtHeight(cursorBlockHeight);\n      if (cursorData.length === 0) {\n        // No data at the cursor height, so signal beginning of stream.\n        return;\n      }\n      const cursorStreamCell = streamCellForData(cursorBlockHeight, cursorData);\n      yield* reverseValuesFromCell(cursorStreamCell, cursorBlockHeight);\n      cursorBlockHeight = cursorStreamCell.blockHeight - 1;\n    }\n  }\n\n  /** @type {ValueFollower<T>} */\n  return Far('chain follower', {\n    async getLatestIterable() {\n      return getLatestIterable();\n    },\n    async getEachIterable({ height = undefined } = {}) {\n      if (height === undefined) {\n        height = await getBlockHeight();\n      }\n      return getEachIterableAtHeight(height);\n    },\n    async getReverseIterable({ height = undefined } = {}) {\n      if (height === undefined) {\n        height = await getBlockHeight();\n      }\n      return getReverseIterableAtHeight(height);\n    },\n  });\n};\n","// @ts-check\n\nimport { Far } from '@endo/far';\nimport {\n  mapAsyncIterable,\n  makeNotifierIterable,\n  makeSubscriptionIterable,\n} from './iterable.js';\nimport { makeCosmjsFollower } from './follower-cosmjs.js';\nimport { makeCastingSpec } from './casting-spec.js';\n\n/**\n * @template T\n * @param {ERef<import('./types').CastingSpec>} spec\n */\nconst makeSubscriptionFollower = spec => {\n  const transform = value =>\n    harden({ value, blockHeight: NaN, currentBlockHeight: NaN });\n  /** @type {import('./types').Follower<import('./types.js').ValueFollowerElement<T>>} */\n  const follower = Far('subscription/notifier follower', {\n    getLatestIterable: async () => {\n      const { notifier, subscription } = await spec;\n      let ai;\n      if (notifier) {\n        ai = makeNotifierIterable(notifier);\n      } else {\n        assert(subscription);\n        ai = makeSubscriptionIterable(subscription);\n      }\n      return mapAsyncIterable(ai, transform);\n    },\n\n    getEachIterable: async () => {\n      const { notifier, subscription } = await spec;\n      let ai;\n      if (subscription) {\n        ai = makeSubscriptionIterable(subscription);\n      } else {\n        assert(notifier);\n        ai = makeNotifierIterable(notifier);\n      }\n      return mapAsyncIterable(ai, transform);\n    },\n\n    getReverseIterable: async () => {\n      throw Error(\n        'reverse iteration not implemented for subscription follower',\n      );\n    },\n  });\n  return follower;\n};\n\n/**\n * @template T\n * @param {ERef<import('./types').CastingSpec> | string} specP\n * @param {import('./types').LeaderOrMaker} [leaderOrMaker]\n * @param {import('./types').FollowerOptions} [options]\n * @returns {Promise<import('./follower-cosmjs').ValueFollower<T>>}\n */\nexport const makeFollower = async (specP, leaderOrMaker, options) => {\n  const spec = await makeCastingSpec(specP);\n  const { storeName } = spec;\n  if (storeName) {\n    return makeCosmjsFollower(spec, leaderOrMaker, options);\n  }\n  return makeSubscriptionFollower(spec);\n};\n","/* eslint-disable no-undef-init */\n// @ts-check\nimport { iterateReverse } from '@agoric/casting';\nimport { observeIteration, subscribeEach } from '@agoric/notifier';\nimport { E } from '@endo/far';\n\nexport const NO_SMART_WALLET_ERROR = 'no smart wallet';\n\nexport const makeWalletStateCoalescer = () => {\n  /** @type {Map<Brand, import('./smartWallet').BrandDescriptor>} */\n  const brands = new Map();\n  /** @type {Map<number, import('./offers').OfferStatus>} */\n  const offerStatuses = new Map();\n  /** @type {Map<Brand, Amount>} */\n  const balances = new Map();\n\n  /** @type {Brand=} */\n  let allegedInvitationBrand = undefined;\n\n  /**\n   * keyed by description; xxx assumes unique\n   *\n   * @type {Map<string, { acceptedIn: number, description: string, instance: { boardId: string } }>}\n   */\n  const invitationsReceived = new Map();\n\n  /** @param {import('./smartWallet').UpdateRecord} updateRecord newer than previous */\n  const update = updateRecord => {\n    const { updated } = updateRecord;\n    switch (updateRecord.updated) {\n      case 'balance': {\n        const { currentAmount } = updateRecord;\n        // last record wins\n        balances.set(currentAmount.brand, currentAmount);\n        if (allegedInvitationBrand) {\n          console.warn(\n            'balance update before invitationBrand known may be an invitation',\n          );\n        }\n        if (currentAmount.brand === allegedInvitationBrand) {\n          // @ts-expect-error narrow to SetValue\n          for (const invitation of currentAmount.value) {\n            invitationsReceived.set(invitation.description, invitation);\n          }\n        }\n        break;\n      }\n      case 'offerStatus': {\n        const { status } = updateRecord;\n        const lastStatus = offerStatuses.get(status.id);\n        // merge records\n        offerStatuses.set(status.id, { ...lastStatus, ...status });\n        if (\n          status.invitationSpec.source === 'purse' &&\n          status.numWantsSatisfied === 1\n        ) {\n          // record acceptance of invitation\n          // xxx matching only by description\n          const { description } = status.invitationSpec;\n          const receptionRecord = invitationsReceived.get(description);\n          if (receptionRecord) {\n            invitationsReceived.set(description, {\n              ...receptionRecord,\n              acceptedIn: status.id,\n            });\n          } else {\n            console.error('no record of invitation in offerStatus', status);\n          }\n        }\n        break;\n      }\n      case 'brand': {\n        const { descriptor } = updateRecord;\n        // never mutate\n        assert(!brands.has(descriptor.brand));\n        brands.set(descriptor.brand, descriptor);\n        if (descriptor.petname === 'invitations') {\n          allegedInvitationBrand = descriptor.brand;\n        }\n        break;\n      }\n      default:\n        throw new Error(`unknown record updated ${updated}`);\n    }\n  };\n\n  return {\n    state: { brands, invitationsReceived, offerStatuses, balances },\n    update,\n  };\n};\n/** @typedef {ReturnType<typeof makeWalletStateCoalescer>['state']} CoalescedWalletState */\n\n/**\n * Coalesce updates from a wallet UpdateRecord publication feed. Note that local\n * state may not reflect the wallet's state if the initial updates are missed.\n *\n * If this proves to be a problem we can add an option to this or a related\n * utility to reset state from RPC.\n *\n * @param {ERef<Subscriber<import('./smartWallet').UpdateRecord>>} updates\n */\nexport const coalesceUpdates = updates => {\n  const coalescer = makeWalletStateCoalescer();\n\n  observeIteration(subscribeEach(updates), {\n    updateState: updateRecord => {\n      coalescer.update(updateRecord);\n    },\n  });\n  return coalescer.state;\n};\n\n/**\n *\n * @param {import('@agoric/casting').Follower<any>} follower\n * @throws if there is no first height\n */\nexport const assertHasData = async follower => {\n  const eachIterable = E(follower).getReverseIterable();\n  const iterator = await E(eachIterable)[Symbol.asyncIterator]();\n  const el = await iterator.next();\n\n  // done before we started\n  if (el.done && !el.value) {\n    assert.fail(NO_SMART_WALLET_ERROR);\n  }\n};\n\n/**\n * @deprecated use `.current` node for current state\n * @param {import('@agoric/casting').Follower<import('@agoric/casting').ValueFollowerElement<import('./smartWallet').UpdateRecord>>} follower\n */\nexport const coalesceWalletState = async follower => {\n  // values with oldest last\n  const history = [];\n  for await (const followerElement of iterateReverse(follower)) {\n    history.push(followerElement.value);\n  }\n\n  const coalescer = makeWalletStateCoalescer();\n  // update with oldest first\n  for (const record of history.reverse()) {\n    coalescer.update(record);\n  }\n\n  return coalescer.state;\n};\n","// @ts-check\nimport { makeScalarMap } from '@agoric/store';\nimport { Far, makeMarshal, Remotable } from '@endo/marshal';\nimport { HandledPromise } from '@endo/eventual-send'; // TODO: convince tsc this isn't needed\n\nconst { details: X, quote: q } = assert;\n\n/**\n * For a value with a known id in the board, we can use\n * that board id as a slot to preserve identity when marshaling.\n *\n * @typedef {`board${Digits}`} BoardId\n */\n\n/**\n * @param {unknown} specimen\n * @returns {specimen is BoardId}\n */\nconst isBoardId = specimen => {\n  return typeof specimen === 'string' && !!specimen.match(/^board[^:]/);\n};\n\n/**\n * When marshaling a purse, payment, etc. we partition the slots\n * using prefixes.\n *\n * @template {Record<string, IdTable<*,*>>} T\n * @typedef {`${string & keyof T}:${Digits}`} WalletSlot<T>\n */\n/**\n * @template {string} K\n * @typedef {`${K}:${Digits}`} KindSlot<K>\n */\n\n/**\n * @template {Record<string, IdTable<*,*>>} T\n * @param {T} _tables\n * @param {string & keyof T} kind\n * @param {number} id\n * @returns {WalletSlot<T>}\n */\nconst makeWalletSlot = (_tables, kind, id) => {\n  const digits = /** @type {Digits} */ (`${id}`);\n  return `${kind}:${digits}`;\n};\n\n/**\n * @template {Record<string, IdTable<*,*>>} T\n * @param {T} record\n * @param {(value: string, index: number, obj: string[]) => boolean} predicate\n * @returns {string & keyof T | undefined}\n */\nconst findKey = (record, predicate) => {\n  const key = Object.keys(record).find(predicate);\n  return key;\n};\n\n/**\n * @template {Record<string, IdTable<*,*>>} T\n * @param {T} tables\n * @param {string} slot\n * @returns {{ kind: undefined | string & keyof T, id: number }}\n */\nconst parseWalletSlot = (tables, slot) => {\n  const kind = findKey(tables, k => slot.startsWith(`${k}:`));\n  const id = kind ? Number(slot.slice(kind.length + 1)) : NaN;\n  return { kind, id };\n};\n\n/**\n * Since KindSlots always include a colon and BoardIds never do,\n * we an mix them without confusion.\n *\n * @template {Record<string, IdTable<*,*>>} T\n * @typedef {WalletSlot<T> | BoardId} MixedSlot<T>\n */\n/**\n * @typedef {`1` | `12` | `123`} Digits - 1 or more digits.\n * NOTE: the typescript definition here is more restrictive than\n * actual usage.\n */\n\n/**\n * @template Slot\n * @template Val\n *\n * @typedef {{\n *   bySlot: MapStore<Slot, Val>,\n *   byVal: MapStore<Val, Slot>,\n * }} IdTable<Value>\n */\n\n/**\n * @template Slot\n * @template Val\n * @param {IdTable<Slot, Val>} table\n * @param {Slot} slot\n * @param {Val} val\n */\nconst initSlotVal = (table, slot, val) => {\n  table.bySlot.init(slot, val);\n  table.byVal.init(val, slot);\n};\n\n/**\n * Make context for exporting wallet data where brands etc. can be recognized by boardId.\n * Export for use outside the smart wallet.\n *\n * When serializing wallet state for, there's a tension between\n *\n *  - keeping purses etc. closely held\n *  - recognizing identity of brands also referenced in the state of contracts such as the AMM\n *\n * `makeMarshal()` is parameterized by the type of slots. Here we use a disjoint union of\n *   - board ids for widely shared objects\n *   - kind:seq ids for closely held objects; for example purse:123\n */\nexport const makeExportContext = () => {\n  const walletObjects = {\n    /** @type {IdTable<number, Purse>} */\n    purse: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n    /** @type {IdTable<number, Payment>} */\n    payment: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n    // TODO: offer, contact, dapp\n    /** @type {IdTable<number, unknown>} */\n    unknown: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n  };\n  /** @type {IdTable<BoardId, unknown>} */\n  const boardObjects = {\n    bySlot: makeScalarMap(),\n    byVal: makeScalarMap(),\n  };\n\n  /**\n   * Look up the slot in mappings from published data\n   * else try walletObjects that we have seen.\n   *\n   * @throws if not found (a slotToVal function typically\n   *         conjures a new identity)\n   *\n   * @param {MixedSlot<typeof walletObjects>} slot\n   * @param {string} _iface\n   */\n  const slotToVal = (slot, _iface) => {\n    if (isBoardId(slot) && boardObjects.bySlot.has(slot)) {\n      return boardObjects.bySlot.get(slot);\n    }\n    const { kind, id } = parseWalletSlot(walletObjects, slot);\n    assert(kind, X`bad slot kind: ${slot}`);\n    const val = walletObjects[kind].bySlot.get(id); // or throw\n    return val;\n  };\n\n  let unknownNonce = 0;\n\n  /**\n   * @param {unknown} val\n   * @returns {MixedSlot<typeof walletObjects>}\n   */\n  const valToSlot = val => {\n    if (boardObjects.byVal.has(val)) {\n      return boardObjects.byVal.get(val);\n    }\n    const kind = findKey(walletObjects, k => walletObjects[k].byVal.has(val));\n    if (kind) {\n      // @ts-expect-error has(val) above ensures val has the right type\n      const id = walletObjects[kind].byVal.get(val);\n      return makeWalletSlot(walletObjects, kind, id);\n    }\n    unknownNonce += 1;\n    const slot = makeWalletSlot(walletObjects, 'unknown', unknownNonce);\n    initSlotVal(walletObjects.unknown, unknownNonce, val);\n    return slot;\n  };\n\n  /**\n   * @template V\n   * @param {string & keyof typeof walletObjects} kind\n   * @param {IdTable<number, V>} table\n   */\n  const makeSaver = (kind, table) => {\n    let nonce = 0;\n    /** @param {V} val */\n    const saver = val => {\n      nonce += 1;\n      initSlotVal(table, nonce, val);\n    };\n    return saver;\n  };\n\n  return harden({\n    savePurseActions: makeSaver('purse', walletObjects.purse),\n    savePaymentActions: makeSaver('payment', walletObjects.payment),\n    /**\n     * @param {number} id\n     * @param {Purse} purse\n     */\n    initPurseId: (id, purse) => {\n      initSlotVal(walletObjects.purse, id, purse);\n    },\n    purseEntries: walletObjects.purse.bySlot.entries,\n    /**\n     * @param {BoardId} id\n     * @param {unknown} val\n     */\n    initBoardId: (id, val) => {\n      initSlotVal(boardObjects, id, val);\n    },\n    /**\n     * @param {BoardId} id\n     * @param {unknown} val\n     */\n    ensureBoardId: (id, val) => {\n      if (boardObjects.byVal.has(val)) {\n        assert.equal(boardObjects.byVal.get(val), id);\n        return;\n      }\n      initSlotVal(boardObjects, id, val);\n    },\n    ...makeMarshal(valToSlot, slotToVal),\n  });\n};\n\nconst defaultMakePresence = iface => {\n  const severed = `SEVERED: ${iface.replace(/^Alleged: /, '')}`;\n  return Far(severed, {});\n};\n\n/**\n * Make context for marshalling wallet or board data.\n * To be imported into the client, which never exports objects.\n *\n * @param {(iface: string) => unknown} [makePresence]\n */\nexport const makeImportContext = (makePresence = defaultMakePresence) => {\n  const walletObjects = {\n    /** @type {IdTable<number, unknown>} */\n    purse: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n    /** @type {IdTable<number, unknown>} */\n    payment: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n    /** @type {IdTable<number, unknown>} */\n    unknown: {\n      bySlot: makeScalarMap(),\n      byVal: makeScalarMap(),\n    },\n  };\n  /** @type {IdTable<BoardId, unknown>} */\n  const boardObjects = {\n    bySlot: makeScalarMap(),\n    byVal: makeScalarMap(),\n  };\n\n  /**\n   * @template Slot\n   * @template Val\n   * @param {IdTable<Slot, Val>} table\n   * @param {Slot} slot\n   * @param {string} iface\n   */\n  const provideVal = (table, slot, iface) => {\n    if (table.bySlot.has(slot)) {\n      return table.bySlot.get(slot);\n    }\n    const val = makePresence(iface);\n    initSlotVal(table, slot, val);\n    return val;\n  };\n\n  const slotToVal = {\n    /**\n     * @param {string} slot\n     * @param {string} iface\n     */\n    fromBoard: (slot, iface) => {\n      assert(isBoardId(slot), X`bad board slot ${q(slot)}`);\n      return provideVal(boardObjects, slot, iface);\n    },\n\n    /**\n     * @param {string} slot\n     * @param {string} iface\n     */\n    fromMyWallet: (slot, iface) => {\n      if (!slot) {\n        // Empty or null slots are neither in the wallet nor the board.\n        return makePresence(`${slot}`);\n      }\n      const { kind, id } = parseWalletSlot(walletObjects, slot);\n      return kind\n        ? provideVal(walletObjects[kind], id, iface)\n        : slotToVal.fromBoard(slot, iface);\n    },\n  };\n\n  const valToSlot = {\n    fromBoard: val => boardObjects.byVal.get(val),\n    /** @param {unknown} val */\n    fromMyWallet: val => {\n      const kind = findKey(walletObjects, k => walletObjects[k].byVal.has(val));\n      assert(kind, X`cannot serialize unregistered ${val}`);\n\n      const id = walletObjects[kind].byVal.get(val);\n      return makeWalletSlot(walletObjects, kind, id);\n    },\n  };\n\n  const marshal = {\n    fromBoard: makeMarshal(valToSlot.fromBoard, slotToVal.fromBoard, {\n      marshalName: 'fromBoard',\n    }),\n    fromMyWallet: makeMarshal(valToSlot.fromMyWallet, slotToVal.fromMyWallet, {\n      marshalName: 'fromMyWallet',\n    }),\n  };\n\n  return harden({\n    /**\n     * @param {BoardId} id\n     * @param {unknown} val\n     */\n    initBoardId: (id, val) => {\n      initSlotVal(boardObjects, id, val);\n    },\n    /**\n     * @param {BoardId} id\n     * @param {unknown} val\n     */\n    ensureBoardId: (id, val) => {\n      if (boardObjects.byVal.has(val)) {\n        assert.equal(boardObjects.byVal.get(val), id);\n        return;\n      }\n      initSlotVal(boardObjects, id, val);\n    },\n    fromMyWallet: Far('wallet marshaller', { ...marshal.fromMyWallet }),\n    fromBoard: Far('board marshaller', { ...marshal.fromBoard }),\n  });\n};\n\n/**\n * @param {string} iface\n * @param {{\n *   applyMethod: (target: unknown, method: string | symbol, args: unknown[]) => void,\n *   applyFunction: (target: unknown, args: unknown[]) => void,\n * }} handler\n */\nconst makePresence = (iface, handler) => {\n  let obj;\n  // eslint-disable-next-line no-new\n  new HandledPromise((resolve, reject, resolveWithPresence) => {\n    obj = resolveWithPresence(handler);\n  });\n  assert(obj);\n  return Remotable(iface, undefined, obj);\n};\n\n/**\n * @param {string} iface\n * @param {(parts: unknown[]) => void} log\n */\nexport const makeLoggingPresence = (iface, log) => {\n  /** @type {any} */ // TODO: solve types puzzle\n  const it = makePresence(iface, {\n    applyMethod: (target, method, args) => {\n      log(harden(['applyMethod', target, method, args]));\n    },\n    applyFunction: (target, args) => {\n      log(harden(['applyFunction', target, args]));\n    },\n  });\n  return it;\n};\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","// @ ts-check\nimport {\n  maybeLoad,\n  maybeSave,\n  watchKey,\n  DAPPS_STORAGE_KEY,\n} from '../util/storage.js';\n\n/**\n * @typedef {{ chainId: string, address: string }} SmartWalletKey\n */\n\n/**\n * @typedef {{ origin: string, smartWalletKey: SmartWalletKey}} DappKey\n */\n\n/**\n * @typedef {{ origin: string, isEnabled?: boolean, petname: string }} Dapp\n */\n\n/**\n * @param {SmartWalletKey} smartWalletKey\n * @returns {Dapp[]}\n */\nexport const loadDapps = ({ chainId, address }) =>\n  maybeLoad([DAPPS_STORAGE_KEY, chainId, address]) ?? [];\n\nexport const loadDapp = (/** @type {DappKey} */ { smartWalletKey, origin }) =>\n  loadDapps(smartWalletKey).find(d => d.origin === origin);\n\nexport const upsertDapp = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n  /** @type {Dapp} */ dapp,\n) => {\n  const { origin, isEnabled, petname } = dapp;\n\n  const dapps = loadDapps(chainId, address);\n  maybeSave(\n    [DAPPS_STORAGE_KEY, chainId, address],\n    [...dapps.filter(d => d.origin !== origin), { origin, isEnabled, petname }],\n  );\n};\n\nexport const removeDapp = (\n  /** @type {DappKey} */ { smartWalletKey: { chainId, address }, origin },\n) => {\n  const dapps = loadDapps({ chainId, address });\n  maybeSave(\n    [DAPPS_STORAGE_KEY, chainId, address],\n    dapps.filter(d => d.origin !== origin),\n  );\n};\n\nexport const watchDapps = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n  /** @type {(newDapps: Dapp[]) => void} */ onChange,\n) => {\n  watchKey([DAPPS_STORAGE_KEY, chainId, address], newDapps =>\n    onChange(newDapps ?? []),\n  );\n};\n","// @ts-check\nimport { makeNotifierKit } from '@agoric/notifier';\nimport {\n  loadDapp as load,\n  loadDapps as loadAll,\n  removeDapp as remove,\n  upsertDapp as upsert,\n  watchDapps as watch,\n} from '../store/Dapps.js';\n\n/** @typedef {import(\"../store/Dapps.js\").Dapp} Dapp */\n/** @typedef {import('../store/Dapps.js').SmartWalletKey} SmartWalletKey */\n\n/**\n * @typedef {{\n *  enable: () => void;\n *  disable: () => void;\n *  setPetname: (petname: string) => void;\n * }} DappActions\n */\n\n/** @typedef {Dapp & {actions: DappActions}} DappWithActions */\n\nexport const getDappService = (\n  /** @type {SmartWalletKey} */ smartWalletKey,\n) => {\n  /** @type {NotifierRecord<DappWithActions[]>} */\n  const { notifier, updater } = makeNotifierKit();\n\n  const broadcastUpdates = (\n    /** @type {Map<string, DappWithActions>} */ dapps,\n  ) => updater.updateState([...dapps.values()]);\n\n  const upsertDapp = (/** @type {Dapp} */ dapp) => upsert(smartWalletKey, dapp);\n\n  const deleteDapp = (\n    /** @type {string} */ origin,\n    /** @type { () => void } */ updateDapps,\n  ) => {\n    remove({ smartWalletKey, origin });\n    updateDapps();\n  };\n\n  const setDappPetname = (\n    /** @type {string} */ origin,\n    /** @type {string} */ petname,\n    /** @type {{ (): void; (): void; }} */ updateDapps,\n  ) => {\n    const dapp = load({ smartWalletKey, origin });\n    assert(dapp, `Tried to set petname on undefined dapp ${origin}`);\n    upsertDapp({ ...dapp, petname });\n    updateDapps();\n  };\n\n  const enableDapp = (\n    /** @type {string} */ origin,\n    /** @type { () => void } */ updateDapps,\n  ) => {\n    const dapp = load({ smartWalletKey, origin });\n    assert(dapp, `Tried to enable undefined dapp ${origin}`);\n    upsertDapp({ ...dapp, isEnabled: true });\n    updateDapps();\n  };\n\n  const updateDapps = () => {\n    const dapps = new Map();\n    const storedDapps = loadAll(smartWalletKey);\n    storedDapps.forEach((/** @type {{origin: string}} */ d) => {\n      dapps.set(d.origin, {\n        ...d,\n        actions: {\n          enable: () => enableDapp(d.origin, updateDapps),\n          setPetname: petname => setDappPetname(d.origin, petname, updateDapps),\n          delete: () => deleteDapp(d.origin, updateDapps),\n        },\n      });\n    });\n    broadcastUpdates(dapps);\n  };\n\n  watch(smartWalletKey, updateDapps);\n  updateDapps();\n\n  return {\n    notifier,\n    addDapp: upsertDapp,\n    setDappPetname,\n    deleteDapp,\n    enableDapp,\n  };\n};\n","import { makeNotifierKit } from '@agoric/notifier';\n\n/**\n * @param {(data: string) => Promise<any>} signSpendAction\n */\nexport const getIssuerService = signSpendAction => {\n  const suggestions = new Map();\n  // TODO: Upgrade to `makePublishKit`.\n  const { notifier, updater } = makeNotifierKit();\n  const broadcastUpdates = () => updater.updateState([...suggestions.values()]);\n\n  const deleteSuggestion = boardId => {\n    assert(\n      suggestions.has(boardId),\n      `Tried to delete undefined issuer suggestion ${boardId}`,\n    );\n    suggestions.delete(boardId);\n    broadcastUpdates();\n  };\n\n  const addSuggestion = (petname, boardId) => {\n    suggestions.set(boardId, {\n      boardId,\n      petname,\n      actions: {\n        delete: () => deleteSuggestion(boardId),\n        accept: async suggestedPetname => {\n          const action = JSON.stringify({\n            type: 'suggestIssuer',\n            data: { boardId, petname: suggestedPetname },\n          });\n          try {\n            await signSpendAction(action);\n            deleteSuggestion(boardId);\n          } catch (e) {\n            console.error('Sign spend action failed', action);\n          }\n        },\n      },\n    });\n    broadcastUpdates();\n  };\n\n  return {\n    notifier,\n    addSuggestion,\n  };\n};\n","// @ts-check\nimport {\n  maybeLoad,\n  maybeSave,\n  watchKey,\n  OFFERS_STORAGE_KEY,\n} from '../util/storage.js';\n\n/**\n * @enum {string}\n */\nexport const OfferUIStatus = {\n  proposed: 'proposed',\n  accepted: 'accept',\n  rejected: 'rejected',\n  pending: 'pending',\n  declined: 'decline',\n};\n\n/** @typedef {import('@agoric/web-components/src/dapp-wallet-bridge/DappWalletBridge').OfferConfig} OfferConfig */\n/** @typedef {import('./Dapps.js').SmartWalletKey} SmartWalletKey */\n/**\n * @typedef {{\n *   id: number;\n *   meta: {\n *    id: number,\n *    creationStamp: number,\n *   };\n *   requestContext: {\n *    origin: string,\n *   };\n *   status: OfferUIStatus;\n *   instancePetname?: string;\n *   spendAction?: string\n * } & OfferConfig\n * } Offer\n */\n\nexport const loadOffers = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n) => maybeLoad([OFFERS_STORAGE_KEY, chainId, address]) ?? [];\n\nexport const addOffer = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n  /** @type {Offer} */ offer,\n) => {\n  const offers = loadOffers({ chainId, address }) ?? [];\n  maybeSave(\n    [OFFERS_STORAGE_KEY, chainId, address],\n    [...offers.filter(o => o.id !== offer.id), offer],\n  );\n};\n\nexport const removeOffer = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n  /** @type {number} */ id,\n) => {\n  const offers = loadOffers({ chainId, address }) ?? [];\n  maybeSave(\n    [OFFERS_STORAGE_KEY, chainId, address],\n    offers.filter(o => o.id !== id),\n  );\n};\n\nexport const watchOffers = (\n  /** @type {SmartWalletKey} */ { chainId, address },\n  /** @type {(newOffers: Offer[]) => void} */ onChange,\n) => {\n  watchKey(\n    [OFFERS_STORAGE_KEY, chainId, address],\n    (/** @type {Offer[]} */ newOffers) => onChange(newOffers ?? []),\n  );\n};\n","// @ts-check\n\nimport {\n  makeNotifierKit,\n  makeAsyncIterableFromNotifier,\n} from '@agoric/notifier';\nimport { E } from '@endo/eventual-send';\n\nimport {\n  loadOffers as load,\n  removeOffer as remove,\n  addOffer as add,\n  watchOffers,\n  OfferUIStatus,\n} from '../store/Offers.js';\n\n/** @typedef {import('@agoric/smart-wallet/src/types.js').Petname} Petname */\n\n/** @typedef {import('@agoric/smart-wallet/src/offers.js').OfferStatus} OfferStatus */\n\n/** @typedef {import('../store/Offers').Offer} Offer */\n/** @typedef {import('../store/Dapps').SmartWalletKey} SmartWalletKey */\n\n/**\n * @param {SmartWalletKey} smartWalletKey\n * @param {(data: string) => Promise<any>} signSpendAction\n * @param {Notifier<OfferStatus>} chainOffersNotifier\n * @param {Marshaller} boardIdMarshaller\n */\nexport const getOfferService = (\n  smartWalletKey,\n  signSpendAction,\n  chainOffersNotifier,\n  boardIdMarshaller,\n) => {\n  const offers = new Map();\n  const { notifier, updater } = makeNotifierKit();\n  const broadcastUpdates = () => updater.updateState([...offers.values()]);\n\n  const addSpendActionAndInstancePetname = async (\n    /** @type {Map<Petname, Brand>} */ pursePetnameToBrand,\n    /** @type {Offer} */ offer,\n  ) => {\n    const {\n      id,\n      instanceHandle,\n      publicInvitationMaker,\n      proposalTemplate: { give, want },\n    } = offer;\n\n    const mapPursePetnamesToBrands = paymentProposals =>\n      Object.fromEntries(\n        Object.entries(paymentProposals).map(\n          ([kw, { pursePetname, value }]) => {\n            const brand = pursePetnameToBrand.get(pursePetname);\n            if (!brand) {\n              return [];\n            }\n            return [\n              kw,\n              {\n                brand,\n                value: BigInt(value),\n              },\n            ];\n          },\n        ),\n      );\n\n    const instance = await E(boardIdMarshaller).unserialize(instanceHandle);\n    const {\n      slots: [instanceBoardId],\n    } = await E(boardIdMarshaller).serialize(instance);\n\n    /** @type {import('@agoric/smart-wallet/src/offers.js').OfferSpec} */\n    const offerForAction = {\n      id,\n      invitationSpec: {\n        source: 'contract',\n        instance,\n        publicInvitationMaker,\n      },\n      proposal: {\n        give: mapPursePetnamesToBrands(give),\n        want: mapPursePetnamesToBrands(want),\n      },\n    };\n\n    const spendAction = await E(boardIdMarshaller).serialize(\n      harden({\n        method: 'executeOffer',\n        offer: offerForAction,\n      }),\n    );\n\n    return {\n      ...offer,\n      instancePetname: `instance@${instanceBoardId}`,\n      spendAction: JSON.stringify(spendAction),\n    };\n  };\n\n  const upsertOffer = (/** @type {Offer} */ offer) => {\n    offers.set(offer.id, offer);\n    add(smartWalletKey, offer);\n    broadcastUpdates();\n  };\n\n  const declineOffer = (/** @type {string} */ id) => {\n    const offer = offers.get(id);\n    assert(offer, `Tried to decline undefined offer ${id}`);\n    upsertOffer({ ...offer, status: OfferUIStatus.declined });\n    broadcastUpdates();\n  };\n\n  const acceptOffer = async (/** @type {string} */ id) => {\n    const offer = offers.get(id);\n    assert(offer, `Tried to accept undefined offer ${id}`);\n    return signSpendAction(offer.spendAction);\n  };\n\n  const cancelOffer = _id => {\n    console.log('TODO: cancel offer');\n  };\n\n  const watchChainOffers = async () => {\n    for await (const status of makeAsyncIterableFromNotifier(\n      chainOffersNotifier,\n    )) {\n      console.log('offerStatus', { status, offers });\n      const oldOffer = offers.get(status?.id);\n      if (!oldOffer) {\n        console.warn('Update for unknown offer, doing nothing.');\n      } else {\n        if (status.error !== undefined) {\n          offers.set(status.id, {\n            ...oldOffer,\n            id: status.id,\n            status: OfferUIStatus.rejected,\n            error: `${status.error}`,\n          });\n          remove(smartWalletKey, status.id);\n        } else if (status.numWantsSatisfied !== undefined) {\n          offers.set(status.id, {\n            ...oldOffer,\n            id: status.id,\n            status: OfferUIStatus.accepted,\n          });\n          remove(smartWalletKey, status.id);\n        } else if (status.numWantsSatisfied === undefined) {\n          offers.set(status.id, {\n            ...oldOffer,\n            id: status.id,\n            status: OfferUIStatus.pending,\n          });\n          upsertOffer({ ...oldOffer, status: OfferUIStatus.pending });\n        }\n        broadcastUpdates();\n      }\n    }\n  };\n\n  /**\n   * Call once to load the offers from storage, watch storage and chain for new\n   * offers.\n   *\n   * @param {Map<Petname, Brand>} pursePetnameToBrand\n   */\n  const start = pursePetnameToBrand => {\n    const storedOffers = load(smartWalletKey);\n    const storedOffersP = Promise.all(\n      storedOffers.map(async (/** @type {Offer} */ o) => {\n        if (o.status === OfferUIStatus.declined) {\n          remove(smartWalletKey, o.id);\n        }\n        const ao = await addSpendActionAndInstancePetname(\n          pursePetnameToBrand,\n          o,\n        );\n        offers.set(ao.id, {\n          ...ao,\n        });\n      }),\n    );\n    storedOffersP.then(() => broadcastUpdates());\n\n    watchChainOffers();\n\n    watchOffers(smartWalletKey, newOffers => {\n      const newOffersP = Promise.all(\n        newOffers.map(o => {\n          return addSpendActionAndInstancePetname(pursePetnameToBrand, o).then(\n            ao => {\n              const oldOffer = offers.get(ao.id);\n              const status =\n                oldOffer &&\n                [OfferUIStatus.rejected, OfferUIStatus.accepted].includes(\n                  oldOffer.status,\n                )\n                  ? oldOffer.status\n                  : ao.status;\n              offers.set(ao.id, {\n                ...ao,\n                status,\n              });\n            },\n          );\n        }),\n      );\n      newOffersP.then(() => broadcastUpdates());\n    });\n  };\n\n  return {\n    start,\n    offers,\n    notifier,\n    addOffer: upsertOffer,\n    acceptOffer,\n    cancelOffer,\n    declineOffer,\n  };\n};\n","// @ts-check\nimport { iterateEach } from '@agoric/casting';\nimport { AmountMath } from '@agoric/ertp';\nimport { objectMap } from '@agoric/internal';\nimport {\n  makeAsyncIterableFromNotifier,\n  makeNotifierKit,\n} from '@agoric/notifier';\nimport {\n  assertHasData,\n  NO_SMART_WALLET_ERROR,\n} from '@agoric/smart-wallet/src/utils.js';\nimport { E } from '@endo/eventual-send';\nimport { Far } from '@endo/marshal';\nimport { getDappService } from '../service/Dapps.js';\nimport { getIssuerService } from '../service/Issuers.js';\nimport { getOfferService } from '../service/Offers.js';\n\n/** @typedef {import('@agoric/smart-wallet/src/types.js').Petname} Petname */\n\nconst newId = kind => `${kind}${Math.random()}`;\n\n/** @typedef {{actions: object, issuerSuggestions: Promise<AsyncIterator>}} BackendSchema */\n\nexport const makeBackendFromWalletBridge = (\n  /** @type {ReturnType<typeof makeWalletBridgeFromFollowers>} */ walletBridge,\n) => {\n  /**\n   * @template T\n   * @param {ERef<Notifier<T>>} notifier\n   */\n  const iterateNotifier = async notifier =>\n    makeAsyncIterableFromNotifier(notifier)[Symbol.asyncIterator]();\n\n  // XXX we don't have access to the board yet.\n  const { notifier: servicesNotifier } = makeNotifierKit();\n\n  /**\n   * @param {AsyncIterator<any[], any[], undefined>} offersMembers\n   */\n  const wrapOffersIterator = offersMembers =>\n    harden({\n      next: async () => {\n        const { done, value } = await E(offersMembers).next();\n        return harden({\n          done,\n          value:\n            value &&\n            value.map(({ id, ...rest }) =>\n              harden({\n                id,\n                ...rest,\n                actions: {\n                  // Provide these synthetic actions since offers don't have any yet.\n                  accept: () => E(walletBridge).acceptOffer(id),\n                  decline: () => E(walletBridge).declineOffer(id),\n                  cancel: () => E(walletBridge).cancelOffer(id),\n                },\n              }),\n            ),\n        });\n      },\n      return: offersMembers.return,\n      throw: offersMembers.throw,\n    });\n\n  /** @type {BackendSchema} */\n  const firstSchema = harden({\n    actions: Far('schemaActions', {\n      createPurse: (issuer, id = newId('Purse')) =>\n        E(walletBridge).makeEmptyPurse(issuer?.issuerPetname, id),\n      createContact: (depositFacet, id = newId('Contact')) =>\n        E(walletBridge).addContact(id, depositFacet),\n      createIssuer: (issuer, id = newId('Issuer')) =>\n        E(walletBridge).addIssuer(id, issuer, true),\n    }),\n    services: iterateNotifier(servicesNotifier),\n    contacts: iterateNotifier(E(walletBridge).getContactsNotifier()),\n    dapps: iterateNotifier(E(walletBridge).getDappsNotifier()),\n    issuers: iterateNotifier(E(walletBridge).getIssuersNotifier()),\n    offers: wrapOffersIterator(\n      // @ts-expect-error xxx\n      iterateNotifier(E(walletBridge).getOffersNotifier()),\n    ),\n    payments: iterateNotifier(E(walletBridge).getPaymentsNotifier()),\n    purses: iterateNotifier(E(walletBridge).getPursesNotifier()),\n    issuerSuggestions: iterateNotifier(\n      E(walletBridge).getIssuerSuggestionsNotifier(),\n    ),\n  });\n\n  // Just produce a single update for the initial backend.\n  // TODO: allow further updates.\n  /** @type {NotifierRecord<BackendSchema>} */\n  const { notifier: backendNotifier, updater: backendUpdater } =\n    makeNotifierKit(firstSchema);\n\n  const backendIt = iterateNotifier(backendNotifier);\n\n  const cancel = e => {\n    backendUpdater.fail(e);\n  };\n\n  return { backendIt, cancel };\n};\n\n/** @typedef {import('../store/Dapps').SmartWalletKey} SmartWalletKey */\n/**\n * @param {SmartWalletKey} smartWalletKey\n * @param {ReturnType<import('@endo/marshal').makeMarshal>} marshaller\n * @param {import('@agoric/casting').ValueFollower<import('@agoric/smart-wallet/src/smartWallet').CurrentWalletRecord>} currentFollower\n * @param {import('@agoric/casting').ValueFollower<import('@agoric/smart-wallet/src/smartWallet').UpdateRecord>} updateFollower\n * @param {object} keplrConnection\n * @param {(e: unknown) => void} [errorHandler]\n * @param {() => void} [firstCallback]\n */\nexport const makeWalletBridgeFromFollowers = (\n  smartWalletKey,\n  marshaller,\n  currentFollower,\n  updateFollower,\n  keplrConnection,\n  errorHandler = e => {\n    // Make an unhandled rejection.\n    throw e;\n  },\n  firstCallback = () => {},\n) => {\n  const notifiers = {\n    getPursesNotifier: 'purses',\n    getContactsNotifier: 'contacts',\n    getIssuersNotifier: 'issuers',\n    getOffersNotifier: 'offers',\n    getPaymentsNotifier: 'payments',\n  };\n\n  /** @type {Record<string, NotifierRecord<unknown>>} */\n  const notifierKits = Object.fromEntries(\n    Object.entries(notifiers).map(([_method, stateName]) => [\n      stateName,\n      makeNotifierKit(null),\n    ]),\n  );\n\n  // We assume just one cosmos purse per brand.\n  /**\n   * @typedef {{\n   *  brand?: Brand,\n   *  brandPetname?: Petname,\n   *  currentAmount: Amount,\n   *  pursePetname?: Petname,\n   *  displayInfo?: DisplayInfo,\n   * }} PurseInfo\n   * @type {Map<Brand, PurseInfo>}\n   */\n  const brandToPurse = new Map();\n  /** @type {Map<Petname, Brand>} */\n  const pursePetnameToBrand = new Map();\n\n  const updatePurses = () => {\n    const purses = [];\n    for (const [brand, purse] of brandToPurse.entries()) {\n      if (purse.currentAmount && purse.brandPetname) {\n        assert(purse.pursePetname, 'missing purse.pursePetname');\n        pursePetnameToBrand.set(purse.pursePetname, brand);\n        purses.push(purse);\n      }\n    }\n    notifierKits.purses.updater.updateState(harden(purses));\n  };\n\n  const signSpendAction = async data => {\n    const {\n      signers: { interactiveSigner },\n    } = keplrConnection;\n    if (!interactiveSigner) {\n      throw new Error(\n        'Cannot sign a transaction in read only mode, connect to keplr.',\n      );\n    }\n    return interactiveSigner.submitSpendAction(data);\n  };\n\n  const getNotifierMethods = objectMap(\n    notifiers,\n    stateName => () => notifierKits[stateName].notifier,\n  );\n\n  /** @type {Notifier<import('@agoric/smart-wallet/src/offers.js').OfferStatus>} */\n  // @ts-expect-error\n  const offersNotifer = getNotifierMethods.getOffersNotifier();\n\n  const offerService = getOfferService(\n    smartWalletKey,\n    signSpendAction,\n    offersNotifer,\n    marshaller,\n  );\n\n  const fetchCurrent = async () => {\n    await assertHasData(currentFollower);\n    const latestIterable = await E(currentFollower).getLatestIterable();\n    const iterator = latestIterable[Symbol.asyncIterator]();\n    const latest = await iterator.next();\n    if (firstCallback) {\n      firstCallback();\n      Object.values(notifierKits).forEach(({ updater }) =>\n        updater.updateState([]),\n      );\n      firstCallback = undefined;\n    }\n    /** @type {import('@agoric/casting').ValueFollowerElement<import('@agoric/smart-wallet/src/smartWallet').CurrentWalletRecord>} */\n    const currentEl = latest.value;\n    const wallet = currentEl.value;\n    console.log('wallet current', wallet);\n    for (const purse of wallet.purses) {\n      console.debug('registering purse', purse);\n      const brandDescriptor = wallet.brands.find(\n        bd => purse.brand === bd.brand,\n      );\n      assert(brandDescriptor, `missing descriptor for brand ${purse.brand}`);\n      /** @type {PurseInfo} */\n      const purseInfo = {\n        brand: purse.brand,\n        currentAmount: purse.balance,\n        brandPetname: brandDescriptor.petname,\n        pursePetname: brandDescriptor.petname,\n        displayInfo: brandDescriptor.displayInfo,\n      };\n      brandToPurse.set(purse.brand, purseInfo);\n    }\n    console.debug('brandToPurse map', brandToPurse);\n    updatePurses();\n    offerService.start(pursePetnameToBrand);\n    return currentEl.blockHeight;\n  };\n\n  const followLatest = async startingHeight => {\n    for await (const { value } of iterateEach(updateFollower, {\n      height: startingHeight,\n    })) {\n      /** @type {import('@agoric/smart-wallet/src/smartWallet').UpdateRecord} */\n      const updateRecord = value;\n      switch (updateRecord.updated) {\n        case 'brand': {\n          const {\n            descriptor: { brand, petname, displayInfo },\n          } = updateRecord;\n          const prior = brandToPurse.get(brand);\n          const purseObj = {\n            brand,\n            brandPetname: petname,\n            pursePetname: petname,\n            displayInfo,\n            currentAmount: prior?.currentAmount || AmountMath.makeEmpty(brand),\n          };\n          brandToPurse.set(brand, purseObj);\n          updatePurses();\n          break;\n        }\n        case 'balance': {\n          // TODO: Don't assume just one purse per brand.\n          // https://github.com/Agoric/agoric-sdk/issues/6126\n          const { currentAmount } = updateRecord;\n          const purseObj = {\n            ...brandToPurse.get(currentAmount.brand),\n            currentAmount,\n            value: currentAmount.value,\n          };\n          brandToPurse.set(currentAmount.brand, purseObj);\n          updatePurses();\n          break;\n        }\n        case 'offerStatus': {\n          const { status } = updateRecord;\n          notifierKits.offers.updater.updateState(status);\n          break;\n        }\n        default: {\n          // @ts-expect-error exhaustive switch\n          throw Error(`Unknown updateRecord ${updateRecord.updated}`);\n        }\n      }\n    }\n  };\n\n  const loadData = () => fetchCurrent().then(followLatest);\n\n  const retry = () => {\n    loadData().catch(e => {\n      if (e.message === NO_SMART_WALLET_ERROR) {\n        setTimeout(retry, 5000);\n      } else {\n        errorHandler(e);\n      }\n    });\n  };\n\n  loadData().catch(e => {\n    errorHandler(e);\n    if (e.message === NO_SMART_WALLET_ERROR) {\n      setTimeout(retry, 5000);\n    }\n  });\n\n  const makeEmptyPurse = (_issuerPetname, _purseId) => {\n    console.log('make empty purse');\n  };\n\n  const addContact = (_boardId, _petname) => {\n    console.log('add contact');\n  };\n\n  const addIssuer = (_boardId, _petname, _makeDefaultPurse) => {\n    console.log('add issuer');\n  };\n\n  const issuerService = getIssuerService(signSpendAction);\n  const dappService = getDappService(smartWalletKey);\n  const { acceptOffer, declineOffer, cancelOffer } = offerService;\n\n  const {\n    getContactsNotifier,\n    getIssuersNotifier,\n    getPaymentsNotifier,\n    getPursesNotifier,\n  } = getNotifierMethods;\n\n  const walletBridge = Far('follower wallet bridge', {\n    getDappsNotifier: () => dappService.notifier,\n    getOffersNotifier: () => offerService.notifier,\n    getIssuerSuggestionsNotifier: () => issuerService.notifier,\n    getIssuersNotifier,\n    getContactsNotifier,\n    getPaymentsNotifier,\n    getPursesNotifier,\n    acceptOffer,\n    declineOffer,\n    cancelOffer,\n    makeEmptyPurse,\n    addContact,\n    addIssuer,\n  });\n\n  return walletBridge;\n};\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Typography from '../Typography';\nimport { getDialogContentTextUtilityClass } from './dialogContentTextClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n\n  const ownerState = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"text.secondary\",\n    ref: ref,\n    ownerState: ownerState\n  }, props, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","// @ts-check\nimport { makeFollower, iterateLatest } from '@agoric/casting';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport React, { useState, useEffect, useMemo } from 'react';\n\nimport { AmountMath } from '@agoric/ertp';\nimport { withApplicationContext } from '../contexts/Application';\n\nconst steps = {\n  INITIAL: 0,\n  AWAITING_APPROVAL: 1,\n  IN_PROGRESS: 2,\n};\n\nconst errors = {\n  NO_SIGNER: 'Cannot sign a transaction in read only mode, connect to keplr.',\n};\n\n// TODO: Read this from the chain via rpc.\nconst CREATION_FEE = '10 BLD';\n\n// 100 IST\nconst MINIMUM_PROVISION_POOL_BALANCE = 100n * 1_000_000n;\n\n// XXX import from the contract\n\n/**\n * @typedef {object} ProvisionPoolMetrics\n * @property {bigint} walletsProvisioned  count of new wallets provisioned\n * @property {Amount<'nat'>} totalMintedProvided  running sum of Minted provided to new wallets\n * @property {Amount<'nat'>} totalMintedConverted  running sum of Minted\n * ever received by the contract from PSM\n */\n\nexport const useProvisionPoolMetrics = (unserializer, leader) => {\n  const [data, setData] = useState(/** @type {ProvisionPoolMetrics?} */ (null));\n\n  useEffect(() => {\n    let cancelled = false;\n    const fetchData = async () => {\n      const follower = await makeFollower(\n        `:published.provisionPool.metrics`,\n        leader,\n        {\n          unserializer,\n        },\n      );\n      for await (const { value } of iterateLatest(follower)) {\n        if (cancelled) {\n          break;\n        }\n        console.log('provisionPoolData', value);\n        setData(value);\n      }\n    };\n    fetchData().catch(e =>\n      console.error('useProvisionPoolMetrics fetchData error', e),\n    );\n    return () => {\n      cancelled = true;\n    };\n  }, [unserializer, leader]);\n\n  return data;\n};\n\n/**\n *\n * @param {ProvisionPoolMetrics} provisionPoolData\n * @returns {boolean}\n */\nconst isProvisionPoolLow = provisionPoolData =>\n  provisionPoolData &&\n  AmountMath.subtract(\n    provisionPoolData.totalMintedConverted,\n    provisionPoolData.totalMintedProvided,\n  ).value < MINIMUM_PROVISION_POOL_BALANCE;\n\nconst ProvisionDialog = ({\n  onClose,\n  open,\n  address,\n  href,\n  keplrConnection,\n  unserializer,\n  leader,\n}) => {\n  const [currentStep, setCurrentStep] = useState(steps.INITIAL);\n  const [error, setError] = useState(/** @type {string?} */ (null));\n  const provisionPoolData = useProvisionPoolMetrics(unserializer, leader);\n\n  const provisionWallet = async signer => {\n    setError(null);\n    setCurrentStep(steps.AWAITING_APPROVAL);\n    try {\n      await signer.submitProvision();\n    } catch (e) {\n      setCurrentStep(steps.INITIAL);\n      setError(e.message);\n      return;\n    }\n    setCurrentStep(steps.IN_PROGRESS);\n  };\n\n  const handleCreateButtonClicked = () => {\n    const {\n      signers: { interactiveSigner },\n    } = keplrConnection;\n    if (!interactiveSigner) {\n      setError(errors.NO_SIGNER);\n      return;\n    }\n\n    provisionWallet(interactiveSigner);\n  };\n\n  const progressIndicator = text => (\n    <Box>\n      <Box\n        sx={{\n          margin: 'auto',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n        }}\n      >\n        <CircularProgress />\n      </Box>\n      <DialogContentText sx={{ pt: 2 }}>{text}</DialogContentText>\n    </Box>\n  );\n\n  const content = useMemo(() => {\n    switch (currentStep) {\n      case steps.INITIAL:\n        return (\n          <div>\n            <DialogContentText>\n              <b>Network Config</b>:{' '}\n              <Link href={href} underline=\"none\" color=\"rgb(0, 176, 255)\">\n                {href}\n              </Link>\n            </DialogContentText>\n            <DialogContentText sx={{ pt: 2 }}>\n              <b>Wallet Address:</b> {address}\n            </DialogContentText>\n            <DialogContentText sx={{ pt: 2 }}>\n              There is no smart wallet provisioned for this address yet. A fee\n              of <b>{CREATION_FEE}</b> is required to create one.\n            </DialogContentText>\n          </div>\n        );\n      case steps.AWAITING_APPROVAL:\n        return progressIndicator('Please approve the transaction in Keplr.');\n      case steps.IN_PROGRESS:\n        return progressIndicator('Awaiting smart wallet creation...');\n      default:\n        return <></>;\n    }\n  }, [currentStep, href, address]);\n\n  const provisionPoolLow =\n    provisionPoolData !== null && isProvisionPoolLow(provisionPoolData);\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>\n        {currentStep === steps.INITIAL ? 'Create a' : 'Creating'} Smart Wallet\n      </DialogTitle>\n      <DialogContent>\n        {content}\n        {provisionPoolLow && (\n          <DialogContentText sx={{ pt: 2 }} color=\"error\">\n            The pool of funds to provision smart wallets is too small at this\n            time.\n          </DialogContentText>\n        )}\n        {error && (\n          <DialogContentText sx={{ pt: 2 }} color=\"error\">\n            {error}\n          </DialogContentText>\n        )}\n      </DialogContent>\n      {currentStep === steps.INITIAL && (\n        <DialogActions>\n          <Button color=\"inherit\" onClick={onClose}>\n            Change Connection\n          </Button>\n          <Button\n            disabled={!provisionPoolData || provisionPoolLow}\n            onClick={handleCreateButtonClicked}\n          >\n            Create\n          </Button>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n};\n\nexport default withApplicationContext(ProvisionDialog, context => ({\n  keplrConnection: context.keplrConnection,\n}));\n","import { makeFollower, makeLeader } from '@agoric/casting';\nimport { observeIterator } from '@agoric/notifier';\nimport { NO_SMART_WALLET_ERROR } from '@agoric/smart-wallet/src/utils';\nimport { makeImportContext } from '@agoric/wallet/api/src/marshal-contexts';\nimport MuiAlert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport React, { useEffect, useState, useMemo } from 'react';\n\nimport {\n  ConnectionStatus,\n  withApplicationContext,\n} from '../contexts/Application';\nimport {\n  makeBackendFromWalletBridge,\n  makeWalletBridgeFromFollowers,\n} from '../util/WalletBackendAdapter';\nimport ProvisionDialog from './ProvisionDialog';\n\nconst Alert = React.forwardRef(function Alert({ children, ...props }, ref) {\n  return (\n    <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props}>\n      {children}\n    </MuiAlert>\n  );\n});\n\nconst SmartWalletConnection = ({\n  connectionConfig,\n  setConnectionStatus,\n  setBackend,\n  setBackendErrorHandler,\n  keplrConnection,\n}) => {\n  const [snackbarMessages, setSnackbarMessages] = useState([]);\n  const [provisionDialogOpen, setProvisionDialogOpen] = useState(false);\n\n  const onProvisionDialogClose = () => {\n    setProvisionDialogOpen(false);\n  };\n\n  const handleSnackbarClose = (_, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSnackbarMessages(sm => sm.slice(1));\n  };\n\n  const showError = (message, e, severity = 'error') => {\n    if (e) {\n      console.error(`${message}:`, e);\n      message += `: ${e.message}`;\n    }\n    if (severity === 'error') {\n      setConnectionStatus(ConnectionStatus.Error);\n    }\n    setSnackbarMessages(sm => [...sm, { severity, message }]);\n  };\n\n  const { href } = connectionConfig;\n\n  const publicAddress = (() => {\n    if (keplrConnection) {\n      return keplrConnection.address;\n    }\n    return undefined;\n  })();\n\n  const backendError = e => {\n    if (e.message === NO_SMART_WALLET_ERROR) {\n      setProvisionDialogOpen(true);\n      setConnectionStatus(ConnectionStatus.Error);\n    } else {\n      setBackend(null);\n      showError('Error in wallet backend', e);\n    }\n  };\n\n  const [context, leader] = useMemo(\n    () => [makeImportContext(), makeLeader(href)],\n    [connectionConfig, keplrConnection],\n  );\n\n  useEffect(() => {\n    if (!connectionConfig || !keplrConnection) {\n      return undefined;\n    }\n\n    let cancelIterator;\n\n    const follow = async () => {\n      const followPublished = path =>\n        makeFollower(`:published.${path}`, leader, {\n          unserializer: context.fromMyWallet,\n        });\n      const bridge = makeWalletBridgeFromFollowers(\n        { chainId: keplrConnection.chainId, address: publicAddress },\n        context.fromBoard,\n        followPublished(`wallet.${publicAddress}.current`),\n        followPublished(`wallet.${publicAddress}`),\n        keplrConnection,\n        backendError,\n        () => {\n          setConnectionStatus(ConnectionStatus.Connected);\n          setProvisionDialogOpen(false);\n        },\n      );\n      const { backendIt, cancel } = makeBackendFromWalletBridge(bridge);\n      cancelIterator = cancel;\n      // Need to thunk the error handler, or it gets called immediately.\n      setBackendErrorHandler(() => backendError);\n      return observeIterator(backendIt, {\n        updateState: be => {\n          cancelIterator && setBackend(be);\n        },\n        fail: e => {\n          cancelIterator && backendError(e);\n        },\n        finish: be => {\n          cancelIterator && setBackend(be);\n        },\n      });\n    };\n    follow().catch(e => showError('Cannot read Smart Wallet casting', e));\n\n    return () => {\n      cancelIterator && cancelIterator();\n      cancelIterator = undefined;\n    };\n  }, [connectionConfig, keplrConnection]);\n\n  return (\n    <div>\n      <Snackbar open={snackbarMessages.length > 0}>\n        <Alert\n          onClose={handleSnackbarClose}\n          severity={snackbarMessages[0]?.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbarMessages[0]?.message}\n        </Alert>\n      </Snackbar>\n      <ProvisionDialog\n        open={provisionDialogOpen}\n        onClose={onProvisionDialogClose}\n        address={publicAddress}\n        href={href}\n        unserializer={context.fromBoard}\n        leader={leader}\n      />\n    </div>\n  );\n};\n\nexport default withApplicationContext(SmartWalletConnection, context => ({\n  connectionConfig: context.connectionConfig,\n  setConnectionStatus: context.setConnectionStatus,\n  setBackend: context.setBackend,\n  setBackendErrorHandler: context.setBackendErrorHandler,\n  keplrConnection: context.keplrConnection,\n}));\n"],"names":["DEFAULT_BOOTSTRAP","delay","ms","Promise","resolve","setTimeout","randomBackoff","range","cap","Math","random","min","exponentialBackoff","attempt","base","DEFAULT_JITTER","where","jitter","DEFAULT_JITTER_SECONDS","console","debug","ceil","DEFAULT_RETRY_CALLBACK","err","backoff","log","DEFAULT_KEEP_POLLING","DEFAULT_KEEP_POLLING_SECONDS","then","MAKE_DEFAULT_DECODER","harden","str","JSON","parse","error","Error","message","MAKE_DEFAULT_UNSERIALIZER","ifaceAllegedPrefix","seen","Map","Far","unserialize","makeMarshal","undefined","slot","iface","has","get","startsWith","slice","length","obj","set","shuffle","a","i","j","floor","x","makePollingChangeFollower","async","keepPolling","E","leader","getOptions","iterable","Symbol","asyncIterator","nextPollPromise","next","cont","keepGoing","change","values","value","done","getLatestIterable","getEachIterable","getReverseIterable","details","X","assert","makeLeaderFromRpcAddresses","rpcAddrs","leaderOptions","Array","isArray","endpoints","retryCallback","retrying","lastRespondingEndpointIndex","thisAttempt","retry","watchCasting","_castingSpecP","pollingChangeFollower","mapEndpoints","callback","reject","endpointIndex","applyOne","res","makeRoundRobinLeader","map","rpcAddr","typeof","includes","makeLeaderFromNetworkConfig","netconfigURL","options","makeLeader","response","fetch","headers","accept","json","retryLeader","catch","bootstrap","makeNotifierIterable","notifier","makeNotifier","getSharableNotifierInternals","makeSubscriptionIterable","subscription","makeSubscriptionIterator","tailP","getSharableSubscriptionInternals","resultP","head","tail","mapAsyncIterable","transform","transformGenerator","iterateEach","follower","eachIterable","iterator","toAscii","encodingStar","PATH_SEPARATOR_BYTE","charCodeAt","DATA_PREFIX_BYTES","Uint8Array","vstoragePathToCastingSpec","storagePath","storeName","elems","split","buf","storeSubkey","b","dataPrefixBytes","pathPrefixToConverters","te","TextEncoder","makeCastingSpecFromObject","specObj","subkey","encode","dataPrefix","makeCastingSpec","spec","sourceP","specString","match","kind","storePath","converter","makeCastingSpecFromString","getInterfaceOf","specCap","getStoreKey","makeCastingSpecFromRef","fail","QueryClient","stargateStar","Tendermint34Client","tendermintRpcStar","quote","q","textDecoder","TextDecoder","isStreamCell","cell","blockHeight","test","arrayEqual","defaultDataPrefixBytes","collectSingle","count","push","equal","proofs","makeFollower","specP","leaderOrMaker","defaultMakeLeader","decode","unserializer","proof","crasher","crash","e","castingSpecP","tendermintClientPs","provideTendermintClient","endpoint","clientP","connect","getBlockHeight","client","info","abciInfo","lastBlockHeight","endpointToQueryClient","provideQueryClient","queryClient","rpcClient","withExtensions","retryGetDataAndStripPrefix","tryGetPrefixedData","result","subarray","getProvenDataAtHeight","queryVerified","height","getUnprovenDataAtHeight","abciQuery","path","data","prove","code","tryGetDataAtHeight","allegedData","provenData","getDataAtHeight","streamCellForData","text","Number","followerElementFromStreamCellValue","currentBlockHeight","allValuesFromCell","streamCell","reverseValuesFromCell","lastValueFromCell","last","currentData","currentStreamCell","getEachIterableAtHeight","cursorBlockHeight","cursorData","cursorStreamCell","rightBlockHeight","rightData","rightStreamCell","cells","leftBlockHeight","leftData","leftStreamCell","pop","getReverseIterableAtHeight","makeCosmjsFollower","NaN","ai","makeSubscriptionFollower","NO_SMART_WALLET_ERROR","assertHasData","el","isBoardId","specimen","makeWalletSlot","_tables","id","findKey","record","predicate","Object","keys","find","parseWalletSlot","tables","k","initSlotVal","table","val","bySlot","init","byVal","defaultMakePresence","severed","replace","makeImportContext","makePresence","walletObjects","purse","makeScalarMap","payment","unknown","boardObjects","provideVal","slotToVal","fromBoard","fromMyWallet","valToSlot","marshal","marshalName","initBoardId","ensureBoardId","getAlertUtilityClass","generateUtilityClass","generateUtilityClasses","createSvgIcon","_jsx","d","_CloseIcon","_excluded","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","borderRadius","shape","backgroundColor","display","padding","light","alertClasses","main","border","fontWeight","fontWeightMedium","dark","AlertIcon","icon","marginRight","fontSize","opacity","AlertMessage","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","ErrorOutlineIcon","InfoOutlinedIcon","React","inProps","ref","useThemeProps","children","className","closeText","iconMapping","onClose","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","square","elevation","clsx","IconButton","size","title","onClick","CloseIcon","loadDapps","chainId","address","maybeLoad","DAPPS_STORAGE_KEY","loadDapp","smartWalletKey","origin","getDappService","updater","makeNotifierKit","upsertDapp","dapp","isEnabled","petname","dapps","maybeSave","filter","upsert","deleteDapp","updateDapps","remove","setDappPetname","load","enableDapp","loadAll","forEach","actions","enable","setPetname","delete","updateState","broadcastUpdates","onChange","watchKey","newDapps","watch","addDapp","getIssuerService","signSpendAction","suggestions","deleteSuggestion","boardId","addSuggestion","stringify","type","suggestedPetname","OfferUIStatus","proposed","accepted","rejected","pending","declined","loadOffers","OFFERS_STORAGE_KEY","removeOffer","offers","o","getOfferService","chainOffersNotifier","boardIdMarshaller","addSpendActionAndInstancePetname","pursePetnameToBrand","offer","instanceHandle","publicInvitationMaker","proposalTemplate","give","want","mapPursePetnamesToBrands","paymentProposals","fromEntries","entries","kw","pursePetname","brand","BigInt","instance","instanceBoardId","serialize","offerForAction","invitationSpec","source","proposal","spendAction","method","instancePetname","upsertOffer","add","start","storedOffers","all","status","ao","makeAsyncIterableFromNotifier","oldOffer","numWantsSatisfied","warn","watchChainOffers","newOffers","watchOffers","addOffer","acceptOffer","cancelOffer","_id","declineOffer","newId","getDialogContentTextUtilityClass","DialogContentTextRoot","Typography","shouldForwardProp","prop","rootShouldForwardProp","composedClasses","component","steps","errors","MINIMUM_PROVISION_POOL_BALANCE","useProvisionPoolMetrics","setData","useState","useEffect","cancelled","latestIterable","iterateLatest","fetchData","withApplicationContext","open","href","keplrConnection","currentStep","setCurrentStep","setError","provisionPoolData","progressIndicator","Box","sx","margin","flexDirection","justifyContent","CircularProgress","pt","content","useMemo","Link","underline","provisionPoolLow","AmountMath","totalMintedConverted","totalMintedProvided","isProvisionPoolLow","Dialog","DialogTitle","DialogContent","DialogActions","Button","disabled","signers","interactiveSigner","signer","submitProvision","provisionWallet","context","Alert","connectionConfig","setConnectionStatus","setBackend","setBackendErrorHandler","snackbarMessages","setSnackbarMessages","provisionDialogOpen","setProvisionDialogOpen","showError","ConnectionStatus","sm","publicAddress","backendError","cancelIterator","followPublished","bridge","marshaller","currentFollower","updateFollower","errorHandler","firstCallback","notifiers","getPursesNotifier","getContactsNotifier","getIssuersNotifier","getOffersNotifier","getPaymentsNotifier","notifierKits","_method","stateName","brandToPurse","updatePurses","purses","currentAmount","brandPetname","submitSpendAction","getNotifierMethods","objectMap","offersNotifer","offerService","fetchCurrent","latest","currentEl","wallet","brandDescriptor","brands","bd","purseInfo","balance","displayInfo","followLatest","startingHeight","updateRecord","updated","descriptor","prior","purseObj","loadData","makeEmptyPurse","_issuerPetname","_purseId","addContact","_boardId","_petname","addIssuer","_makeDefaultPurse","issuerService","dappService","getDappsNotifier","getIssuerSuggestionsNotifier","makeWalletBridgeFromFollowers","backendIt","cancel","walletBridge","iterateNotifier","servicesNotifier","firstSchema","createPurse","issuer","issuerPetname","createContact","depositFacet","createIssuer","services","contacts","issuers","offersMembers","rest","decline","return","throw","payments","issuerSuggestions","backendNotifier","backendUpdater","makeBackendFromWalletBridge","observeIterator","be","finish","follow","Snackbar","_","reason","width"],"sourceRoot":""}