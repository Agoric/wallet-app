{"version":3,"file":"static/js/375.992e143a.chunk.js","mappings":"4QACO,SAASA,EAAqBC,GACnC,OAAOC,EAAAA,EAAAA,GAAqB,WAAYD,EACzC,CACD,MACA,GADqBE,E,QAAAA,GAAuB,WAAY,CAAC,OAAQ,SAAU,OAAQ,UAAW,SAAU,gBAAiB,aAAc,gBAAiB,cAAe,WAAY,kBAAmB,eAAgB,kBAAmB,gBAAiB,WAAY,kBAAmB,eAAgB,kBAAmB,kB,kCCG5T,SAAeC,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,8OACD,mBCFJ,GAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,qFACD,yBCFJ,GAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,4KACD,gBCFJ,GAAeF,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,8MACD,gB,ICNAC,E,UAEJ,MAAMC,EAAY,CAAC,SAAU,WAAY,YAAa,YAAa,QAAS,OAAQ,cAAe,UAAW,OAAQ,WAAY,WAoC5HC,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAO,CAC9BC,KAAM,WACNX,KAAM,OACNY,kBAAmB,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,EACJ,MAAO,CAACC,EAAOE,KAAMF,EAAOC,EAAWE,SAAUH,EAAQ,GAAEC,EAAWE,WAAUC,EAAAA,EAAAA,GAAWH,EAAWI,OAASJ,EAAWK,aAA1H,GAPcX,EASf,IAGG,IAHF,MACFY,EADE,WAEFN,GACI,EACJ,MAAMO,EAAkC,UAAvBD,EAAME,QAAQC,KAAmBC,EAAAA,GAASC,EAAAA,GACrDC,EAA4C,UAAvBN,EAAME,QAAQC,KAAmBE,EAAAA,GAAUD,EAAAA,GAChEN,EAAQJ,EAAWI,OAASJ,EAAWK,SAC7C,OAAOQ,EAAAA,EAAAA,GAAS,CAAC,EAAGP,EAAMQ,WAAWC,MAAO,CAC1CC,aAAcV,EAAMW,MAAMD,aAC1BE,gBAAiB,cACjBC,QAAS,OACTC,QAAS,YACRhB,GAAgC,aAAvBJ,EAAWE,SAA0B,CAC/CE,MAAOG,EAASD,EAAME,QAAQJ,GAAOiB,MAAO,IAC5CH,gBAAiBN,EAAmBN,EAAME,QAAQJ,GAAOiB,MAAO,IAChE,CAAE,MAAKC,EAAAA,QAAsB,CAC3BlB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOmB,KAAOjB,EAAME,QAAQJ,GAAOiB,QAEzFjB,GAAgC,aAAvBJ,EAAWE,SAA0B,CAC/CE,MAAOG,EAASD,EAAME,QAAQJ,GAAOiB,MAAO,IAC5CG,OAAS,aAAYlB,EAAME,QAAQJ,GAAOiB,QAC1C,CAAE,MAAKC,EAAAA,QAAsB,CAC3BlB,MAA8B,SAAvBE,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOmB,KAAOjB,EAAME,QAAQJ,GAAOiB,QAEzFjB,GAAgC,WAAvBJ,EAAWE,SAAwB,CAC7CE,MAAO,OACPqB,WAAYnB,EAAMQ,WAAWY,iBAC7BR,gBAAwC,SAAvBZ,EAAME,QAAQC,KAAkBH,EAAME,QAAQJ,GAAOuB,KAAOrB,EAAME,QAAQJ,GAAOmB,MApBpG,IAuBIK,GAAYlC,EAAAA,EAAAA,IAAO,MAAO,CAC9BE,KAAM,WACNX,KAAM,OACNY,kBAAmB,CAACC,EAAOC,IAAWA,EAAO8B,MAH7BnC,CAIf,CACDoC,YAAa,GACbV,QAAS,QACTD,QAAS,OACTY,SAAU,GACVC,QAAS,KAELC,GAAevC,EAAAA,EAAAA,IAAO,MAAO,CACjCE,KAAM,WACNX,KAAM,UACNY,kBAAmB,CAACC,EAAOC,IAAWA,EAAOmC,SAH1BxC,CAIlB,CACD0B,QAAS,UAELe,GAAczC,EAAAA,EAAAA,IAAO,MAAO,CAChCE,KAAM,WACNX,KAAM,SACNY,kBAAmB,CAACC,EAAOC,IAAWA,EAAOqC,QAH3B1C,CAIjB,CACDyB,QAAS,OACTkB,WAAY,aACZjB,QAAS,eACTkB,WAAY,OACZR,aAAc,IAEVS,EAAqB,CACzBC,SAAsBnD,EAAAA,EAAAA,KAAKoD,EAAqB,CAC9CV,SAAU,YAEZW,SAAsBrD,EAAAA,EAAAA,KAAKsD,EAA2B,CACpDZ,SAAU,YAEZa,OAAoBvD,EAAAA,EAAAA,KAAKwD,EAAkB,CACzCd,SAAU,YAEZe,MAAmBzD,EAAAA,EAAAA,KAAK0D,EAAkB,CACxChB,SAAU,aAiKd,EA9J2BiB,EAAAA,YAAiB,SAAeC,EAASC,GAClE,MAAMpD,GAAQqD,EAAAA,EAAAA,GAAc,CAC1BrD,MAAOmD,EACPrD,KAAM,cAGF,OACJwC,EADI,SAEJgB,EAFI,UAGJC,EAHI,UAIJC,EAAY,QAJR,MAKJlD,EALI,KAMJyB,EANI,YAOJ0B,EAAchB,EAPV,QAQJiB,EARI,KASJC,EAAO,QATH,SAUJpD,EAAW,UAVP,QAWJH,EAAU,YACRJ,EACE4D,GAAQC,EAAAA,EAAAA,GAA8B7D,EAAON,GAE7CQ,GAAaa,EAAAA,EAAAA,GAAS,CAAC,EAAGf,EAAO,CACrCM,QACAC,WACAH,YAGI0D,EA7HkB5D,KACxB,MAAM,QACJE,EADI,MAEJE,EAFI,SAGJC,EAHI,QAIJuD,GACE5D,EACE6D,EAAQ,CACZ5D,KAAM,CAAC,OAAS,GAAEC,KAAUC,EAAAA,EAAAA,GAAWC,GAASC,KAAc,GAAEH,KAChE2B,KAAM,CAAC,QACPK,QAAS,CAAC,WACVE,OAAQ,CAAC,WAEX,OAAO0B,EAAAA,EAAAA,GAAeD,EAAO7E,EAAsB4E,EAAnD,EAgHgBG,CAAkB/D,GAClC,OAAoBgE,EAAAA,EAAAA,MAAMvE,GAAWoB,EAAAA,EAAAA,GAAS,CAC5C4C,KAAMA,EACNQ,QAAQ,EACRC,UAAW,EACXlE,WAAYA,EACZqD,WAAWc,EAAAA,EAAAA,GAAKP,EAAQ3D,KAAMoD,GAC9BH,IAAKA,GACJQ,EAAO,CACRN,SAAU,EAAU,IAATvB,GAA8BxC,EAAAA,EAAAA,KAAKuC,EAAW,CACvD5B,WAAYA,EACZqD,UAAWO,EAAQ/B,KACnBuB,SAAUvB,GAAQ0B,EAAYlD,IAAakC,EAAmBlC,KAC3D,MAAmBhB,EAAAA,EAAAA,KAAK4C,EAAc,CACzCjC,WAAYA,EACZqD,UAAWO,EAAQ1B,QACnBkB,SAAUA,IACE,MAAVhB,GAA8B/C,EAAAA,EAAAA,KAAK8C,EAAa,CAClDkB,UAAWO,EAAQxB,OACnBgB,SAAUhB,IACP,KAAgB,MAAVA,GAAkBoB,GAAuBnE,EAAAA,EAAAA,KAAK8C,EAAa,CACpEnC,WAAYA,EACZqD,UAAWO,EAAQxB,OACnBgB,UAAuB/D,EAAAA,EAAAA,KAAK+E,EAAAA,EAAY,CACtCC,KAAM,QACN,aAAcf,EACdgB,MAAOhB,EACPlD,MAAO,UACPmE,QAASf,EACTJ,SAAU7D,IAAeA,GAA0BF,EAAAA,EAAAA,KAAKmF,EAAAA,EAAW,CACjEzC,SAAU,eAGX,QAER,G,gFC/K2B0C,OAAO,CACjCC,cAAa,CAACC,EAAQC,IACbD,KAAUC,GAEnBC,YAAW,CAACF,EAAQG,EAAMF,IACjBD,EAAOG,MAASF,GAEzBG,IAAG,CAACJ,EAAQG,IACHH,EAAOG,KARX,MAaDE,EAA4B,CAChCC,IAAG,CAACC,EAASC,EAAOC,KACX,EAETC,aAAaH,IACJ,EAETI,eAAc,CAACJ,EAASE,KACf,EAETG,eAAc,CAACL,EAASC,KACf,GA+BEK,EAAWC,IACtB,MAAMC,EAAOC,IACX,MAAMC,EAtBe,EAACD,EAAGF,IACpBhB,OAAO,IACTO,EACHD,IAAG,CAACG,EAASW,EAAGC,IACP,sCAAIlB,EAAJ,yBAAIA,EAAJ,uBAAaa,EAASZ,YAAYc,EAAGE,EAAGjB,EAAxC,EAETmB,MAAMb,EAASc,GAAyB,IAAfC,EAAe,uDAAJ,GAClC,OAAOR,EAASf,cAAciB,EAAGM,EAClC,EACDC,IAAG,CAAChB,EAASiB,KAEJ,IAWOC,CAAiBT,EAAGF,GACpC,OAAOhB,OAAO,IAAI4B,OAAM,QAAUT,GAAlC,EAkBF,OAFAF,EAAKX,IAbuBY,IAC1B,MAAMC,EAAUnB,OAAO,IAClBO,EACHkB,IAAG,CAAChB,EAASC,KAEJ,EAETJ,IAAG,CAACG,EAASJ,IACJW,EAASV,IAAIY,EAAGb,KAG3B,OAAO,IAAIuB,MAAMC,OAAOC,OAAO,MAAOX,EAAtC,EAIKnB,OAAOiB,EAAd,GClEMc,QAASC,GAAMC,OAMjBC,EAAaC,GACjBA,GAA+C,oBAAvBA,EAAcC,KAsB3BC,EAAY,SACvBC,EACAC,GAGG,IAFHC,EAEG,4DAFYC,EACfC,EACG,uDADI,CAAC,EAER,MAAM,SACJC,EAAWC,IAAOC,QAAQ1E,MAAM,QAASmE,EAAO,aAAcM,IAD1D,MAEJE,EAAQ,EAFJ,UAGJC,EAHI,SAIJC,GACEN,GAMFM,IAAYD,GACZd,OAAOgB,KACLjB,CAAE,SAAQM,qDAGd,MAAMY,EAAmBC,GACvBC,MAAO,GAAEC,KAAKC,UAAUH,wBAGpBI,EAAsB,IAAIC,IAE1BC,EAAe,IAAID,IAGzB,IAAIE,GAAS,EACb,MAAMC,EAAcC,iBAA+C,IAAxCC,EAAwC,4DAA/BpB,EAAWqB,IAAoB,yDAIjE,IAHgB,IAAXJ,GAAoBG,IAAWH,QAAsBjB,IAAXoB,GAC7ClB,EAASkB,IAENC,EACH,OAAOC,QAAQC,UAKjB,MAAM5C,EAAI2C,QAAQE,OAAOJ,GAEzB,OADAzC,EAAE8C,OAAMC,QACD/C,CACR,EAKKgD,EAAOC,KAEI,IAAXX,GACFnB,EAAQ8B,EACT,GAUG,UAAEC,EAAF,YAAaC,IAAgBC,EAAAA,EAAAA,IAEjCC,EAEAC,EACA,CACEC,YAAc,SAAQrC,IAGtBsC,WAAY,MAKVC,EAAY,IAAIC,QAEhBC,EAAY,IAAIvB,IAChBwB,EAAuB,IAAIC,QAKjC,IAAIC,EAAgB,EAChBC,EAAe,EAGfC,EAAiB,EAGrB,MAAMC,EAAY,IAAI7B,IAEhB8B,EAAU,IAAI9B,IAEd+B,EAAU,IAAI/B,IAUpB,SAASiB,EAAiBe,GACxB,IAAKX,EAAUpD,IAAI+D,GAAM,CAMvB,IAAIhL,EACJ,IAAIiL,EAAAA,EAAAA,IAAUD,GAAM,CAIlBN,GAAiB,EACjB,MAAMQ,EAAYR,EAClB1K,EAAQ,KAAIkL,IAGZF,EAAIpD,MACFuD,GACEvB,EAAK,CACHwB,KAAM,cACNF,YACAC,IAAKrB,EAAUtE,OAAO2F,QAE1BE,GACEzB,EAAK,CACHwB,KAAM,cACNF,YACAG,IAAKvB,EAAUtE,OAAO6F,OAG7B,KAAM,CAILV,GAAgB,EAChB,MAAMW,EAAWX,EAEf3K,EADEwK,EAAqBvD,IAAI+D,GACnB,KAAIM,IAEJ,KAAIA,GAEf,CAGDjB,EAAUrE,IAAIgF,EAAKhL,GACnBuK,EAAUvE,IAAIhG,EAAMgL,EACrB,CAGD,MAAMhL,EAAOqK,EAAUvE,IAAIkF,GAE3B,OADAvD,OAAO8D,OAAOvL,EAAM,UACbA,CACR,CAQD,MAAMwL,EAAe,KACnBZ,GAAkB,EAClB,MAAMa,EAAc,GAAE3D,KAAS8C,IAEzBc,EAAKC,EAAcF,GACzBZ,EAAU7E,IAAIyF,EAAYC,GAU1BhB,GAAiB,EACjB,MACMkB,EAAc,KADFlB,IAKlB,OAHAL,EAAUrE,IAAI0F,EAAG9E,EAAGgF,GACpBrB,EAAUvE,IAAI4F,EAAYF,EAAG9E,GAEtB,CAAC6E,EAAYC,EAApB,EAIIC,EAAgBjG,IAIpB,MAAMiB,EAAU,CACdb,IAAI+F,EAAIhG,GACN,IAAe,IAAXqD,EACF,OAAOC,EAAYD,GAErB,MAAOuC,EAAYC,GAAMF,IAQzB,OAPA5B,EAAK,CACHwB,KAAM,WACN9C,QACAmD,aACA/F,SACAoG,OAAQhC,EAAUtE,OAAO,CAACK,OAErBL,OAAOkG,EAAG9E,EAClB,EACDnB,cAAcoG,EAAIlG,GAChB,IAAe,IAAXuD,EACF,OAAOC,EAAYD,GAErB,MAAOuC,EAAYC,GAAMF,IAQzB,OAPA5B,EAAK,CACHwB,KAAM,WACN9C,QACAmD,aACA/F,SACAoG,OAAQhC,EAAUtE,OAAO,CAAC,KAAMG,OAE3BH,OAAOkG,EAAG9E,EAClB,EACDhB,YAAYiG,EAAIhG,EAAMF,GACpB,IAAe,IAAXuD,EACF,OAAOC,EAAYD,GAGrB,MAAOuC,EAAYC,GAAMF,IAQzB,OAPA5B,EAAK,CACHwB,KAAM,WACN9C,QACAmD,aACA/F,SACAoG,OAAQhC,EAAUtE,OAAO,CAACK,EAAMF,OAE3BH,OAAOkG,EAAG9E,EAClB,GAGG8E,EAAK,CAAC,EAWZ,OAVAA,EAAG9E,EAAI,IAAImF,EAAAA,GAAe,CAACZ,EAAKE,EAAKW,KACnCN,EAAGL,IAAMA,EACTK,EAAGO,QAAU,IAAMD,EAAoBrF,GACvC+E,EAAGP,IAAMA,CAAT,GACCxE,GAIH+E,EAAG9E,EAAE8C,OAAMwC,GAAK/C,EAAY+C,GAAG,KAExB1G,OAAOkG,EAAd,EAQF,SAASxB,EAAiBiC,GAA8B,IAClDnB,EAD+BoB,EAAmB,4DAAXnE,EAS3C,MAAMoE,EAA4B,MAAjBF,EAAU,GAAa,IAAM,IACxCnM,EAAQ,GAAEmM,EAAU,KAAKE,IAAWF,EAAUG,MAAM,KAC1D,IAAK/B,EAAUtD,IAAIjH,GAAO,CAExB,MAAM0L,EAAKC,EAAc3L,GACT,MAAZA,EAAK,IAA0B,MAAZA,EAAK,SACZiI,IAAVmE,IACFA,EAAS,qBAAoBtE,KAAS9H,KAIxCgL,GAAMuB,EAAAA,EAAAA,IAAUH,OAAOnE,EAAWyD,EAAGO,aAGrClB,EAAQ/E,IAAIwG,OAAOxM,EAAKsM,MAAM,IAAKZ,GACnCV,EAAMU,EAAG9E,GAEX2D,EAAUvE,IAAIhG,EAAMgL,GACpBX,EAAUrE,IAAIgF,EAAKhL,EACpB,CACD,OAAOuK,EAAUzE,IAAI9F,EACtB,CAGD,MAAM2G,EAAU,CAEdyC,oBAAoBS,GAClB,MAAM,WAAE4B,GAAe5B,EACjB4C,EACoB,oBAAjBzE,EAA8BA,EAAa6B,GAAO7B,EAC3D0E,EAAAA,EAAAA,KAAOD,GAAWE,IAEhB7B,EAAQ9E,IAAIyF,EAAYkB,GACjB/C,EAAK,CACVwB,KAAM,aACN9C,QACAsE,SAAUnB,EACVoB,OAAQ/C,EAAU6C,OAGvB,EAEDvD,eAAeS,GAKb,MAAM,WAAE4B,EAAF,OAAc/F,EAAd,KAAsBoH,GAASjD,GAE9BhE,EAAMF,GAAQoE,EAAYF,EAAIiC,QACrC,IAAId,EAEFA,EADEF,EAAQ7D,IAAIvB,GACRoF,EAAQhF,IAAIJ,GAEZqE,EAAY,CAChBgD,KAAMlE,KAAKC,UAAU,CACnB,CAACkE,EAAAA,IAAS,OACVC,MAAO,IAETrI,MAAO,CAACc,KAKZ,IAyCIwH,EAzCAC,EAAgB,CAACC,EAAUC,KAC7BzD,EAAK,CACHwB,KAAM,aACN9C,QACAsE,SAAUnB,EACV,CAAC2B,EAAW,YAAc,UAAWtD,EAAUtE,OAAO6H,KAJxD,EAOF,GAAIP,EAAM,CACRtC,EAAqBvD,IAAI+D,IACvBvD,OAAOgB,KACLjB,CAAE,gBAAewD,6DAErBvD,OAAO8D,OACL/C,EACA,WACAhB,CAAE,4BAA2BwD,kCAK/B,MAAMsC,GAAWC,EAAAA,EAAAA,MACjBxE,EAAoB/C,IAAIyF,EAAY6B,EAASE,SAE7CL,EAAgB/D,MAAOgE,EAAUC,KAC/B,MAAMI,EAAa3D,EAAUtE,OAAO6H,IAC9BK,EAAMlF,EAAS,CAAC4E,EAAUK,IAC3BC,GAOLzE,EAAajD,IAAIyF,EAAYiC,GAC7BJ,EAAS9D,QAAQ,CAAEmE,MAAM,KANvBL,EAAS9D,QAAQ,CAAEmE,MAAM,GAM3B,CAEH,CAQCT,EAHGvH,EAEe,OAATE,EACJkG,EAAAA,EAAAA,cAA6Bf,EAAKrF,GAElCoG,EAAAA,EAAAA,YAA2Bf,EAAKnF,EAAMF,GAJtCoG,EAAAA,EAAAA,IAAmBf,EAAKnF,GAQ/BiF,EAAQ9E,IAAIyF,EAAYyB,SAGlBA,EAEHtF,MACCgG,GAAcT,GAAc,EAAOS,KACnCvE,GAAU8D,GAAc,EAAM9D,IAEnC,EAEDwE,iBAAkBzE,UAChB3B,OAAOe,EAAUhB,CAAE,qDACnB,MAAM,WAAEiE,EAAF,WAAcgC,GAAe5D,EAE7BiE,EAAU/E,EAAoBjD,IAAI2F,GACxChE,OAAOqG,EAAStG,CAAE,mCAAkCiE,KAEpD,MAAOK,EAAQnG,GAAQoE,EAAY0D,GAuC7BM,EArCiB3E,WACrB,MAAMyD,QAAeiB,EAGfE,EAAU,KACd/E,EAAagF,OAAOxC,GACpB1C,EAAoBkF,OAAOxC,GACpBjG,OAAO,CAAEmI,MAAM,KAIxB,IACE,IAAKd,GAAUA,EAAOc,KACpB,OAAOK,IAGT,MAAMN,EAAMzE,EAAanD,IAAI2F,GAC7B,OAAKiC,QAMQA,EAAI5B,MAAWnG,GAJnBqI,GAcV,CATC,MAAO9B,GAQP,MAPA8B,IACK9B,GACHzE,OAAOgB,KACLjB,CAAE,6CAA4CiE,gCAGlDhE,OAAOyG,KAAKhC,EAAG1E,CAAE,0BAAyBiE,YACpCS,CACP,GAIiBiC,GACpBpF,EAAoB/C,IAAIyF,EAAYsC,SAG9BA,CAAN,EAGF3E,iBAAiBS,GACf,MAAM,OAAEgD,EAAF,UAAUuB,EAAV,SAAqBxB,GAAa/C,EACxC,IAAKgB,EAAU5D,IAAI2F,GACjB,MAAM,IAAIhE,MACP,8DAA6DgE,OAGlE,MAAMlB,EAAKb,EAAU/E,IAAI8G,GACrB,cAAe/C,EACjB6B,EAAGL,IAAItB,EAAYqE,IAEnB1C,EAAGP,IAAIpB,EAAY8C,GAEtB,EAEDzD,kBAAkBS,GAChB,MAAM,UAAEqB,EAAF,IAAaC,EAAb,IAAkBE,GAAQxB,EAChC,IAAKkB,EAAQ9D,IAAIiE,GACf,MAAM,IAAItC,MACP,qEAAoEsC,OAGzE,MAAMQ,EAAKX,EAAQjF,IAAIoF,GACnB,QAASrB,EACX6B,EAAGL,IAAItB,EAAYsB,IAEnBK,EAAGP,IAAIpB,EAAYoB,IAErBJ,EAAQkD,OAAO/C,EAChB,EAGD9B,qBAAqBS,GACnB,MAAM,OAAER,EAASX,EAAiBZ,IAAW+B,GAC9B,IAAXX,IAEFC,EAAYU,EAAIR,QAAQ,GACxBH,EAASG,EAETtB,EAAQ8B,IAEV,IAAK,MAAM6B,KAAMb,EAAUwD,SACzB3C,EAAGL,IAAIhC,GAET,IAAK,MAAMqC,KAAMX,EAAQsD,SACvB3C,EAAGL,IAAIhC,EAEV,GAIGiF,EAAelF,UACnB,IAAe,IAAXF,EACF,OAAOC,EAAYD,GAErB,MAAOuC,EAAYC,GAAMF,IAMzB,OALA5B,EAAK,CACHwB,KAAM,gBACN9C,QACAmD,eAEKjG,OAAOkG,EAAG9E,EAAjB,EAEFpB,OAAOmB,GAGP,MAAM4H,EAAW1E,IACf,IACE,IAAe,IAAXX,EACF,OAAO,EAET,MAAMsF,EAAK7H,EAAQkD,EAAIuB,MACvB,QAAIoD,IACFA,EAAG3E,GAAKH,OAAMwC,GAAK/C,EAAY+C,GAAG,MAC3B,EAMV,CAHC,MAAOA,GAEP,OADA/C,EAAY+C,GAAG,IACR,CACR,GAIGuC,EAAQ,WAAwB,IAAvBpF,EAAuB,4DAAdpB,EACtBsG,EAAS,CAAEnD,KAAM,iBAAkB9C,QAAOe,UAC3C,EAEKqF,EAAkB,CAAC/N,EAAMkJ,KAC7B,MAAM8E,GAAMC,EAAAA,EAAAA,IAAIjO,EAAMkJ,GAEtB,OADAW,EAAqBqE,IAAIF,GAClBA,CAAP,EAIIG,EAAO,CACXL,QACAF,WACAD,eACAxE,YACAC,cACA2E,kBACAjI,UAAuCwB,GAGzC,GAAIM,EAAW,CACbd,OAAO8D,OAAOhD,EAAW,WAAYf,CAAE,qCAGvC,MAAMuH,EAAeC,GAAc,SAACtJ,GAClC6D,QAAQC,QAAQ9D,KAAYA,GAC1B+B,OAAOgB,KAAKjB,CAAE,QAAO9B,iCAEvB,MAAM1F,EAAOqK,EAAUvE,IAAIJ,GAC1B1F,GAAoB,MAAZA,EAAK,IACZyH,OAAOgB,KAAKjB,CAAE,QAAO9B,8BAGX,MAAZ1F,EAAK,IACHyH,OAAOgB,KACLjB,CAAE,QAAO9B,2DAIbkF,GAAkB,EAClB,MAAMa,EAAc,GAAE3D,KAAS8C,IAG/B,IAAIkB,EAnBsD,2BAAbmD,EAAa,iCAAbA,EAAa,kBAoB1D,OAAQD,GACN,IAAK,MAAO,CACV,MAAOnJ,GAAQoJ,EACfnD,EAAShC,EAAUtE,OAAO,CAACK,KAC3B,KACD,CACD,IAAK,gBAAiB,CACpB,MAAOF,GAAQsJ,EACfnD,EAAShC,EAAUtE,OAAO,CAAC,KAAMG,KACjC,KACD,CACD,IAAK,cAAe,CAClB,MAAOE,EAAMF,GAAQsJ,EACrBnD,EAAShC,EAAUtE,OAAO,CAACK,EAAMF,KACjC,KACD,CACD,QACE8B,OAAOgB,KAAKjB,CAAE,2CAA0CwH,KAM5D,MAAOE,EAAazB,GAAclF,EAAU,CAC1C4G,WAAYH,EAGZhP,OACAoP,SAAUH,EACVI,UAAW,KAETzF,EAAK,CACHwB,KAAM,WACN9C,QACAwE,MAAM,EACNrB,aACA/F,OAAQ1F,EACR8L,WAIF,MAAMwD,EAAqB,CAACC,EAAgB5B,IAAS,WAAa,2BAAThI,EAAS,yBAATA,EAAS,gBAOhE,OANAiE,EAAK,CACHwB,KAAM,mBACN9C,QACAmD,aACAgC,WAAY3D,EAAUtE,OAAO,CAAC+J,EAAgB5J,OAEzCH,OAAO,CAAEmI,OAAMN,WAAOpF,GAC9B,EACD,OAAOzC,OAAO,CACZgK,KAAMF,EAAmB,QAAQ,GACjCG,OAAQH,EAAmB,UAAU,GACrCI,MAAOJ,EAAmB,SAAS,IAHrC,IAQEjC,EAAQtD,EAAY0D,GAM1B,IALC/F,EAAW2F,IACV5F,OAAOgB,KACLjB,CAAE,QAAO9B,uCAA4C2H,KAGrD6B,EACF,MAAM7B,EAER,OAAOA,CACR,EAGK7G,EAAW,CACff,cAAesJ,EAAa,iBAC5BnJ,YAAamJ,EAAa,eAC1BjJ,IAAKiJ,EAAa,QAEpBvJ,OAAOgB,GAEPsI,EAAKrI,KAAOF,EAASC,EACtB,CAED,OAAOhB,OAAOsJ,EACf,GCnsBOvH,QAASC,GAAMC,OAOrBkI,eAAeC,kBAAoBC,WAAWD,iB","sources":["../../../../node_modules/@mui/material/Alert/alertClasses.js","../../../../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../../../../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../../../../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../../../../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","../../../../node_modules/@mui/material/Alert/Alert.js","../../../../node_modules/@endo/captp/src/trap.js","../../../../node_modules/@endo/captp/src/captp.js","../../../../node_modules/@endo/captp/src/atomics.js"],"sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","// @ts-check\n// Lifted mostly from `@endo/eventual-send/src/E.js`.\n\nimport './types.js';\n\n/**\n * Default implementation of Trap for near objects.\n *\n * @type {TrapImpl}\n */\nexport const nearTrapImpl = harden({\n  applyFunction(target, args) {\n    return target(...args);\n  },\n  applyMethod(target, prop, args) {\n    return target[prop](...args);\n  },\n  get(target, prop) {\n    return target[prop];\n  },\n});\n\n/** @type {ProxyHandler<any>} */\nconst baseFreezableProxyHandler = {\n  set(_target, _prop, _value) {\n    return false;\n  },\n  isExtensible(_target) {\n    return false;\n  },\n  setPrototypeOf(_target, _value) {\n    return false;\n  },\n  deleteProperty(_target, _prop) {\n    return false;\n  },\n};\n\n/**\n * A Proxy handler for Trap(x)\n *\n * @param {*} x Any value passed to Trap(x)\n * @param {TrapImpl} trapImpl\n * @returns {ProxyHandler}\n */\nconst TrapProxyHandler = (x, trapImpl) => {\n  return harden({\n    ...baseFreezableProxyHandler,\n    get(_target, p, _receiver) {\n      return (...args) => trapImpl.applyMethod(x, p, args);\n    },\n    apply(_target, _thisArg, argArray = []) {\n      return trapImpl.applyFunction(x, argArray);\n    },\n    has(_target, _p) {\n      // TODO: has property is not yet transferrable over captp.\n      return true;\n    },\n  });\n};\n\n/**\n * @param {TrapImpl} trapImpl\n * @returns {Trap}\n */\nexport const makeTrap = trapImpl => {\n  const Trap = x => {\n    const handler = TrapProxyHandler(x, trapImpl);\n    return harden(new Proxy(() => {}, handler));\n  };\n\n  const makeTrapGetterProxy = x => {\n    const handler = harden({\n      ...baseFreezableProxyHandler,\n      has(_target, _prop) {\n        // TODO: has property is not yet transferrable over captp.\n        return true;\n      },\n      get(_target, prop) {\n        return trapImpl.get(x, prop);\n      },\n    });\n    return new Proxy(Object.create(null), handler);\n  };\n  Trap.get = makeTrapGetterProxy;\n\n  return harden(Trap);\n};\n","// @ts-check\n/// <reference types=\"ses\"/>\n\n/** @template Slot @typedef {import('@endo/marshal').ConvertValToSlot<Slot>} ConvertValToSlot */\n/** @template Slot @typedef {import('@endo/marshal').ConvertSlotToVal<Slot>} ConvertSlotToVal */\n\n// Your app may need to `import '@endo/eventual-send/shim.js'` to get HandledPromise\n\n// This logic was mostly lifted from @agoric/swingset-vat liveSlots.js\n// Defects in it are mfig's fault.\nimport { Remotable, Far, makeMarshal, QCLASS } from '@endo/marshal';\nimport { E, HandledPromise } from '@endo/eventual-send';\nimport { isPromise, makePromiseKit } from '@endo/promise-kit';\n\nimport { makeTrap } from './trap.js';\n\nimport './types.js';\n\nexport { E };\n\nconst { details: X } = assert;\n\n/**\n * @param {any} maybeThenable\n * @returns {boolean}\n */\nconst isThenable = maybeThenable =>\n  maybeThenable && typeof maybeThenable.then === 'function';\n\n/**\n * @typedef {Object} CapTPOptions the options to makeCapTP\n * @property {(err: any) => void} onReject\n * @property {number} epoch an integer tag to attach to all messages in order to\n * assist in ignoring earlier defunct instance's messages\n * @property {TrapGuest} trapGuest if specified, enable this CapTP (guest) to\n * use Trap(target) to block while the recipient (host) resolves and\n * communicates the response to the message\n * @property {TrapHost} trapHost if specified, enable this CapTP (host) to serve\n * objects marked with makeTrapHandler to synchronous clients (guests)\n */\n\n/**\n * Create a CapTP connection.\n *\n * @param {string} ourId our name for the current side\n * @param {(obj: Record<string, any>) => void} rawSend send a JSONable packet\n * @param {any} bootstrapObj the object to export to the other side\n * @param {Partial<CapTPOptions>} opts options to the connection\n */\nexport const makeCapTP = (\n  ourId,\n  rawSend,\n  bootstrapObj = undefined,\n  opts = {},\n) => {\n  const {\n    onReject = err => console.error('CapTP', ourId, 'exception:', err),\n    epoch = 0,\n    trapGuest,\n    trapHost,\n  } = opts;\n\n  // It's a hazard to have trapGuest and trapHost both enabled, as we may\n  // encounter deadlock.  Without a lot more bookkeeping, we can't detect it for\n  // more general networks of CapTPs, but we are conservative for at least this\n  // one case.\n  !(trapHost && trapGuest) ||\n    assert.fail(\n      X`CapTP ${ourId} can only be one of either trapGuest or trapHost`,\n    );\n\n  const disconnectReason = id =>\n    Error(`${JSON.stringify(id)} connection closed`);\n\n  /** @type {Map<string, Promise<IteratorResult<void, void>>>} */\n  const trapIteratorResultP = new Map();\n  /** @type {Map<string, AsyncIterator<void, void, any>>} */\n  const trapIterator = new Map();\n\n  /** @type {any} */\n  let unplug = false;\n  const quietReject = async (reason = undefined, returnIt = true) => {\n    if ((unplug === false || reason !== unplug) && reason !== undefined) {\n      onReject(reason);\n    }\n    if (!returnIt) {\n      return Promise.resolve();\n    }\n\n    // Silence the unhandled rejection warning, but don't affect\n    // the user's handlers.\n    const p = Promise.reject(reason);\n    p.catch(_ => {});\n    return p;\n  };\n\n  /**\n   * @param {Record<string, any>} obj\n   */\n  const send = obj => {\n    // Don't throw here if unplugged, just don't send.\n    if (unplug === false) {\n      rawSend(obj);\n    }\n  };\n\n  /**\n   * convertValToSlot and convertSlotToVal both perform side effects,\n   * populating the c-lists (imports/exports/questions/answers) upon\n   * marshalling/unmarshalling.  As we traverse the datastructure representing\n   * the message, we discover what we need to import/export and send relevant\n   * messages across the wire.\n   */\n  const { serialize, unserialize } = makeMarshal(\n    // eslint-disable-next-line no-use-before-define\n    convertValToSlot,\n    // eslint-disable-next-line no-use-before-define\n    convertSlotToVal,\n    {\n      marshalName: `captp:${ourId}`,\n      // TODO Temporary hack.\n      // See https://github.com/Agoric/agoric-sdk/issues/2780\n      errorIdNum: 20000,\n    },\n  );\n\n  /** @type {WeakMap<any, CapTPSlot>} */\n  const valToSlot = new WeakMap(); // exports looked up by val\n  /** @type {Map<CapTPSlot, any>} */\n  const slotToVal = new Map(); // reverse\n  const exportedTrapHandlers = new WeakSet();\n\n  // Used to construct slot names for promises/non-promises.\n  // In this version of CapTP we use strings for export/import slot names.\n  // prefixed with 'p' if promises and 'o' otherwise;\n  let lastPromiseID = 0;\n  let lastExportID = 0;\n  // Since we decide the ids for questions, we use this to increment the\n  // question key\n  let lastQuestionID = 0;\n\n  /** @type {Map<string, any>} */\n  const questions = new Map(); // chosen by us\n  /** @type {Map<string, any>} */\n  const answers = new Map(); // chosen by our peer\n  /** @type {Map<number, any>} */\n  const imports = new Map(); // chosen by our peer\n\n  /**\n   * Called at marshalling time.  Either retrieves an existing export, or if\n   * not yet exported, records this exported object.  If a promise, sets up a\n   * promise listener to inform the other side when the promise is\n   * fulfilled/broken.\n   *\n   * @type {ConvertValToSlot<CapTPSlot>}\n   */\n  function convertValToSlot(val) {\n    if (!valToSlot.has(val)) {\n      /**\n       * new export\n       *\n       * @type {CapTPSlot}\n       */\n      let slot;\n      if (isPromise(val)) {\n        // This is a promise, so we're going to increment the lastPromiseId\n        // and use that to construct the slot name.  Promise slots are prefaced\n        // with 'p+'.\n        lastPromiseID += 1;\n        const promiseID = lastPromiseID;\n        slot = `p+${promiseID}`;\n        // Set up promise listener to inform other side when this promise\n        // is fulfilled/broken\n        val.then(\n          res =>\n            send({\n              type: 'CTP_RESOLVE',\n              promiseID,\n              res: serialize(harden(res)),\n            }),\n          rej =>\n            send({\n              type: 'CTP_RESOLVE',\n              promiseID,\n              rej: serialize(harden(rej)),\n            }),\n        );\n      } else {\n        // Since this isn't a promise, we instead increment the lastExportId and\n        // use that to construct the slot name.  Non-promises are prefaced with\n        // 'o+' for normal objects, or `t+` for syncable.\n        lastExportID += 1;\n        const exportID = lastExportID;\n        if (exportedTrapHandlers.has(val)) {\n          slot = `t+${exportID}`;\n        } else {\n          slot = `o+${exportID}`;\n        }\n      }\n      // Now record the export in both valToSlot and slotToVal so we can look it\n      // up from either the value or the slot name later.\n      valToSlot.set(val, slot);\n      slotToVal.set(slot, val);\n    }\n    // At this point, the value is guaranteed to be exported, so return the\n    // associated slot number.\n    const slot = valToSlot.get(val);\n    assert.typeof(slot, 'string');\n    return slot;\n  }\n\n  /**\n   * Generate a new question in the questions table and set up a new\n   * remote handled promise.\n   *\n   * @returns {[string, ReturnType<typeof makeRemoteKit>]}\n   */\n  const makeQuestion = () => {\n    lastQuestionID += 1;\n    const questionID = `${ourId}#${lastQuestionID}`;\n    // eslint-disable-next-line no-use-before-define\n    const pr = makeRemoteKit(questionID);\n    questions.set(questionID, pr);\n\n    // To fix #2846:\n    // We return 'p' to the handler, and the eventual resolution of 'p' will\n    // be used to resolve the caller's Promise, but the caller never sees 'p'\n    // itself. The caller got back their Promise before the handler ever got\n    // invoked, and thus before queueMessage was called. If that caller\n    // passes the Promise they received as argument or return value, we want\n    // it to serialize as resultVPID. And if someone passes resultVPID to\n    // them, we want the user-level code to get back that Promise, not 'p'.\n    lastPromiseID += 1;\n    const promiseID = lastPromiseID;\n    const resultVPID = `p+${promiseID}`;\n    valToSlot.set(pr.p, resultVPID);\n    slotToVal.set(resultVPID, pr.p);\n\n    return [questionID, pr];\n  };\n\n  // Make a remote promise for `target` (an id in the questions table)\n  const makeRemoteKit = target => {\n    // This handler is set up such that it will transform both\n    // attribute access and method invocation of this remote promise\n    // as also being questions / remote handled promises\n    const handler = {\n      get(_o, prop) {\n        if (unplug !== false) {\n          return quietReject(unplug);\n        }\n        const [questionID, pr] = makeQuestion();\n        send({\n          type: 'CTP_CALL',\n          epoch,\n          questionID,\n          target,\n          method: serialize(harden([prop])),\n        });\n        return harden(pr.p);\n      },\n      applyFunction(_o, args) {\n        if (unplug !== false) {\n          return quietReject(unplug);\n        }\n        const [questionID, pr] = makeQuestion();\n        send({\n          type: 'CTP_CALL',\n          epoch,\n          questionID,\n          target,\n          method: serialize(harden([null, args])),\n        });\n        return harden(pr.p);\n      },\n      applyMethod(_o, prop, args) {\n        if (unplug !== false) {\n          return quietReject(unplug);\n        }\n        // Support: o~.[prop](...args) remote method invocation\n        const [questionID, pr] = makeQuestion();\n        send({\n          type: 'CTP_CALL',\n          epoch,\n          questionID,\n          target,\n          method: serialize(harden([prop, args])),\n        });\n        return harden(pr.p);\n      },\n    };\n\n    const pr = {};\n    pr.p = new HandledPromise((res, rej, resolveWithPresence) => {\n      pr.rej = rej;\n      pr.resPres = () => resolveWithPresence(handler);\n      pr.res = res;\n    }, handler);\n\n    // Silence the unhandled rejection warning, but don't affect\n    // the user's handlers.\n    pr.p.catch(e => quietReject(e, false));\n\n    return harden(pr);\n  };\n\n  /**\n   * Set up import\n   *\n   * @type {ConvertSlotToVal<CapTPSlot>}\n   */\n  function convertSlotToVal(theirSlot, iface = undefined) {\n    let val;\n    // Invert slot direction from other side.\n\n    // Inverted to prevent namespace collisions between slots we\n    // allocate and the ones the other side allocates.  If we allocate\n    // a slot, serialize it to the other side, and they send it back to\n    // us, we need to reference just our own slot, not one from their\n    // side.\n    const otherDir = theirSlot[1] === '+' ? '-' : '+';\n    const slot = `${theirSlot[0]}${otherDir}${theirSlot.slice(2)}`;\n    if (!slotToVal.has(slot)) {\n      // Make a new handled promise for the slot.\n      const pr = makeRemoteKit(slot);\n      if (slot[0] === 'o' || slot[0] === 't') {\n        if (iface === undefined) {\n          iface = `Alleged: Presence ${ourId} ${slot}`;\n        }\n        // A new remote presence\n        // Use Remotable rather than Far to make a remote from a presence\n        val = Remotable(iface, undefined, pr.resPres());\n      } else {\n        // A new promise\n        imports.set(Number(slot.slice(2)), pr);\n        val = pr.p;\n      }\n      slotToVal.set(slot, val);\n      valToSlot.set(val, slot);\n    }\n    return slotToVal.get(slot);\n  }\n\n  // Message handler used for CapTP dispatcher\n  const handler = {\n    // Remote is asking for bootstrap object\n    async CTP_BOOTSTRAP(obj) {\n      const { questionID } = obj;\n      const bootstrap =\n        typeof bootstrapObj === 'function' ? bootstrapObj(obj) : bootstrapObj;\n      E.when(bootstrap, bs => {\n        // console.log('sending bootstrap', bootstrap);\n        answers.set(questionID, bs);\n        return send({\n          type: 'CTP_RETURN',\n          epoch,\n          answerID: questionID,\n          result: serialize(bs),\n        });\n      });\n    },\n    // Remote is invoking a method or retrieving a property.\n    async CTP_CALL(obj) {\n      // questionId: Remote promise (for promise pipelining) this call is\n      //   to fulfill\n      // target: Slot id of the target to be invoked.  Checks against\n      //   answers first; otherwise goes through unserializer\n      const { questionID, target, trap } = obj;\n\n      const [prop, args] = unserialize(obj.method);\n      let val;\n      if (answers.has(target)) {\n        val = answers.get(target);\n      } else {\n        val = unserialize({\n          body: JSON.stringify({\n            [QCLASS]: 'slot',\n            index: 0,\n          }),\n          slots: [target],\n        });\n      }\n\n      /** @type {(isReject: boolean, value: any) => void} */\n      let processResult = (isReject, value) => {\n        send({\n          type: 'CTP_RETURN',\n          epoch,\n          answerID: questionID,\n          [isReject ? 'exception' : 'result']: serialize(harden(value)),\n        });\n      };\n      if (trap) {\n        exportedTrapHandlers.has(val) ||\n          assert.fail(\n            X`Refused Trap(${val}) because target was not registered with makeTrapHandler`,\n          );\n        assert.typeof(\n          trapHost,\n          'function',\n          X`CapTP cannot answer Trap(${val}) without a trapHost function`,\n        );\n\n        // We need to create a promise for the \"isDone\" iteration right now to\n        // prevent a race with the other side.\n        const resultPK = makePromiseKit();\n        trapIteratorResultP.set(questionID, resultPK.promise);\n\n        processResult = async (isReject, value) => {\n          const serialized = serialize(harden(value));\n          const ait = trapHost([isReject, serialized]);\n          if (!ait) {\n            // One-shot, no async iterator.\n            resultPK.resolve({ done: true });\n            return;\n          }\n\n          // We're ready for them to drive the iterator.\n          trapIterator.set(questionID, ait);\n          resultPK.resolve({ done: false });\n        };\n      }\n\n      // If `args` is supplied, we're applying a method or function...\n      // otherwise this is property access\n      let hp;\n      if (!args) {\n        hp = HandledPromise.get(val, prop);\n      } else if (prop === null) {\n        hp = HandledPromise.applyFunction(val, args);\n      } else {\n        hp = HandledPromise.applyMethod(val, prop, args);\n      }\n\n      // Answer with our handled promise\n      answers.set(questionID, hp);\n\n      // We let rejections bubble up to our caller, `dispatch`.\n      await hp\n        // Process this handled promise method's result when settled.\n        .then(\n          fulfilment => processResult(false, fulfilment),\n          reason => processResult(true, reason),\n        );\n    },\n    // Have the host serve more of the reply.\n    CTP_TRAP_ITERATE: async obj => {\n      assert(trapHost, X`CTP_TRAP_ITERATE is impossible without a trapHost`);\n      const { questionID, serialized } = obj;\n\n      const resultP = trapIteratorResultP.get(questionID);\n      assert(resultP, X`CTP_TRAP_ITERATE did not expect ${questionID}`);\n\n      const [method, args] = unserialize(serialized);\n\n      const getNextResultP = async () => {\n        const result = await resultP;\n\n        // Done with this trap iterator.\n        const cleanup = () => {\n          trapIterator.delete(questionID);\n          trapIteratorResultP.delete(questionID);\n          return harden({ done: true });\n        };\n\n        // We want to ensure we clean up the iterator in case of any failure.\n        try {\n          if (!result || result.done) {\n            return cleanup();\n          }\n\n          const ait = trapIterator.get(questionID);\n          if (!ait) {\n            // The iterator is done, so we're done.\n            return cleanup();\n          }\n\n          // Drive the next iteration.\n          return await ait[method](...args);\n        } catch (e) {\n          cleanup();\n          if (!e) {\n            assert.fail(\n              X`trapGuest expected trapHost AsyncIterator(${questionID}) to be done, but it wasn't`,\n            );\n          }\n          assert.note(e, X`trapHost AsyncIterator(${questionID}) threw`);\n          throw e;\n        }\n      };\n\n      // Store the next result promise.\n      const nextResultP = getNextResultP();\n      trapIteratorResultP.set(questionID, nextResultP);\n\n      // Ensure that our caller handles any rejection.\n      await nextResultP;\n    },\n    // Answer to one of our questions.\n    async CTP_RETURN(obj) {\n      const { result, exception, answerID } = obj;\n      if (!questions.has(answerID)) {\n        throw new Error(\n          `Got an answer to a question we have not asked. (answerID = ${answerID} )`,\n        );\n      }\n      const pr = questions.get(answerID);\n      if ('exception' in obj) {\n        pr.rej(unserialize(exception));\n      } else {\n        pr.res(unserialize(result));\n      }\n    },\n    // Resolution to an imported promise\n    async CTP_RESOLVE(obj) {\n      const { promiseID, res, rej } = obj;\n      if (!imports.has(promiseID)) {\n        throw new Error(\n          `Got a resolvement of a promise we have not imported. (promiseID = ${promiseID} )`,\n        );\n      }\n      const pr = imports.get(promiseID);\n      if ('rej' in obj) {\n        pr.rej(unserialize(rej));\n      } else {\n        pr.res(unserialize(res));\n      }\n      imports.delete(promiseID);\n    },\n    // The other side has signaled something has gone wrong.\n    // Pull the plug!\n    async CTP_DISCONNECT(obj) {\n      const { reason = disconnectReason(ourId) } = obj;\n      if (unplug === false) {\n        // Reject with the original reason.\n        quietReject(obj.reason, false);\n        unplug = reason;\n        // Deliver the object, even though we're unplugged.\n        rawSend(obj);\n      }\n      for (const pr of questions.values()) {\n        pr.rej(reason);\n      }\n      for (const pr of imports.values()) {\n        pr.rej(reason);\n      }\n    },\n  };\n\n  // Get a reference to the other side's bootstrap object.\n  const getBootstrap = async () => {\n    if (unplug !== false) {\n      return quietReject(unplug);\n    }\n    const [questionID, pr] = makeQuestion();\n    send({\n      type: 'CTP_BOOTSTRAP',\n      epoch,\n      questionID,\n    });\n    return harden(pr.p);\n  };\n  harden(handler);\n\n  // Return a dispatch function.\n  const dispatch = obj => {\n    try {\n      if (unplug !== false) {\n        return false;\n      }\n      const fn = handler[obj.type];\n      if (fn) {\n        fn(obj).catch(e => quietReject(e, false));\n        return true;\n      }\n      return false;\n    } catch (e) {\n      quietReject(e, false);\n      return false;\n    }\n  };\n\n  // Abort a connection.\n  const abort = (reason = undefined) => {\n    dispatch({ type: 'CTP_DISCONNECT', epoch, reason });\n  };\n\n  const makeTrapHandler = (name, obj) => {\n    const far = Far(name, obj);\n    exportedTrapHandlers.add(far);\n    return far;\n  };\n\n  // Put together our return value.\n  const rets = {\n    abort,\n    dispatch,\n    getBootstrap,\n    serialize,\n    unserialize,\n    makeTrapHandler,\n    Trap: /** @type {Trap | undefined} */ (undefined),\n  };\n\n  if (trapGuest) {\n    assert.typeof(trapGuest, 'function', X`opts.trapGuest must be a function`);\n\n    // Create the Trap proxy maker.\n    const makeTrapImpl = implMethod => (target, ...implArgs) => {\n      Promise.resolve(target) !== target ||\n        assert.fail(X`Trap(${target}) target cannot be a promise`);\n\n      const slot = valToSlot.get(target);\n      (slot && slot[1] === '-') ||\n        assert.fail(X`Trap(${target}) target was not imported`);\n      // @ts-expect-error TS apparently confused about `||` control flow\n      // https://github.com/microsoft/TypeScript/issues/50739\n      slot[0] === 't' ||\n        assert.fail(\n          X`Trap(${target}) imported target was not created with makeTrapHandler`,\n        );\n\n      // Send a \"trap\" message.\n      lastQuestionID += 1;\n      const questionID = `${ourId}#${lastQuestionID}`;\n\n      // Encode the \"method\" parameter of the CTP_CALL.\n      let method;\n      switch (implMethod) {\n        case 'get': {\n          const [prop] = implArgs;\n          method = serialize(harden([prop]));\n          break;\n        }\n        case 'applyFunction': {\n          const [args] = implArgs;\n          method = serialize(harden([null, args]));\n          break;\n        }\n        case 'applyMethod': {\n          const [prop, args] = implArgs;\n          method = serialize(harden([prop, args]));\n          break;\n        }\n        default: {\n          assert.fail(X`Internal error; unrecognized implMethod ${implMethod}`);\n        }\n      }\n\n      // Set up the trap call with its identifying information and a way to send\n      // messages over the current CapTP data channel.\n      const [isException, serialized] = trapGuest({\n        trapMethod: implMethod,\n        // @ts-expect-error TS apparently confused about `||` control flow\n        // https://github.com/microsoft/TypeScript/issues/50739\n        slot,\n        trapArgs: implArgs,\n        startTrap: () => {\n          // Send the call metadata over the connection.\n          send({\n            type: 'CTP_CALL',\n            epoch,\n            trap: true, // This is the magic marker.\n            questionID,\n            target: slot,\n            method,\n          });\n\n          // Return an IterationObserver.\n          const makeIteratorMethod = (iteratorMethod, done) => (...args) => {\n            send({\n              type: 'CTP_TRAP_ITERATE',\n              epoch,\n              questionID,\n              serialized: serialize(harden([iteratorMethod, args])),\n            });\n            return harden({ done, value: undefined });\n          };\n          return harden({\n            next: makeIteratorMethod('next', false),\n            return: makeIteratorMethod('return', true),\n            throw: makeIteratorMethod('throw', true),\n          });\n        },\n      });\n\n      const value = unserialize(serialized);\n      !isThenable(value) ||\n        assert.fail(\n          X`Trap(${target}) reply cannot be a Thenable; have ${value}`,\n        );\n\n      if (isException) {\n        throw value;\n      }\n      return value;\n    };\n\n    /** @type {TrapImpl} */\n    const trapImpl = {\n      applyFunction: makeTrapImpl('applyFunction'),\n      applyMethod: makeTrapImpl('applyMethod'),\n      get: makeTrapImpl('get'),\n    };\n    harden(trapImpl);\n\n    rets.Trap = makeTrap(trapImpl);\n  }\n\n  return harden(rets);\n};\n","// @ts-check\n/// <reference types=\"ses\"/>\n\nconst { details: X } = assert;\n\n// This is a pathological minimum, but exercised by the unit test.\nexport const MIN_DATA_BUFFER_LENGTH = 1;\n\n// Calculate how big the transfer buffer needs to be.\nexport const TRANSFER_OVERHEAD_LENGTH =\n  BigUint64Array.BYTES_PER_ELEMENT + Int32Array.BYTES_PER_ELEMENT;\nexport const MIN_TRANSFER_BUFFER_LENGTH =\n  MIN_DATA_BUFFER_LENGTH + TRANSFER_OVERHEAD_LENGTH;\n\n// These are bit flags for the status element of the transfer buffer.\nconst STATUS_WAITING = 1;\nconst STATUS_FLAG_DONE = 2;\nconst STATUS_FLAG_REJECT = 4;\n\n/**\n * Return a status buffer, length buffer, and data buffer backed by transferBuffer.\n *\n * @param {SharedArrayBuffer} transferBuffer the backing buffer\n */\nconst splitTransferBuffer = transferBuffer => {\n  transferBuffer.byteLength >= MIN_TRANSFER_BUFFER_LENGTH ||\n    assert.fail(\n      X`Transfer buffer of ${transferBuffer.byteLength} bytes is smaller than MIN_TRANSFER_BUFFER_LENGTH ${MIN_TRANSFER_BUFFER_LENGTH}`,\n    );\n  const lenbuf = new BigUint64Array(transferBuffer, 0, 1);\n\n  // The documentation says that this needs to be an Int32Array for use with\n  // Atomics.notify:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify#syntax\n  const statusbuf = new Int32Array(transferBuffer, lenbuf.byteLength, 1);\n  const overheadLength = lenbuf.byteLength + statusbuf.byteLength;\n  assert.equal(\n    overheadLength,\n    TRANSFER_OVERHEAD_LENGTH,\n    X`Internal error; actual overhead ${overheadLength} of bytes is not TRANSFER_OVERHEAD_LENGTH ${TRANSFER_OVERHEAD_LENGTH}`,\n  );\n  const databuf = new Uint8Array(transferBuffer, overheadLength);\n  databuf.byteLength >= MIN_DATA_BUFFER_LENGTH ||\n    assert.fail(\n      X`Transfer buffer of size ${transferBuffer.byteLength} only supports ${databuf.byteLength} data bytes; need at least ${MIN_DATA_BUFFER_LENGTH}`,\n    );\n  return harden({ statusbuf, lenbuf, databuf });\n};\n\n/**\n * Create a trapHost that can be paired with makeAtomicsTrapGuest.\n *\n * This host encodes the transfer buffer and returns it in consecutive slices\n * when the guest iterates over it.\n *\n * @param {SharedArrayBuffer} transferBuffer\n * @returns {TrapHost}\n */\nexport const makeAtomicsTrapHost = transferBuffer => {\n  const { statusbuf, lenbuf, databuf } = splitTransferBuffer(transferBuffer);\n\n  const te = new TextEncoder();\n\n  return async function* trapHost([isReject, serialized]) {\n    // Get the complete encoded message buffer.\n    const json = JSON.stringify(serialized);\n    const encoded = te.encode(json);\n\n    // Send chunks in the data transfer buffer.\n    let i = 0;\n    let done = false;\n    while (!done) {\n      // Copy the next slice of the encoded arry to the data buffer.\n      const subenc = encoded.subarray(i, i + databuf.length);\n      databuf.set(subenc);\n\n      // Save the length of the remaining data.\n      const remaining = BigInt(encoded.length - i);\n      lenbuf[0] = remaining;\n\n      // Calculate the next slice, and whether this is the last one.\n      i += subenc.length;\n      done = i >= encoded.length;\n\n      // Find bitflags to represent the rejected and finished state.\n      const rejectFlag = isReject ? STATUS_FLAG_REJECT : 0;\n      const doneFlag = done ? STATUS_FLAG_DONE : 0;\n\n      // Notify our guest for this data buffer.\n\n      // eslint-disable-next-line no-bitwise\n      statusbuf[0] = rejectFlag | doneFlag;\n      Atomics.notify(statusbuf, 0, +Infinity);\n\n      if (!done) {\n        // Wait until the next call to `it.next()`.  If the guest calls\n        // `it.return()` or `it.throw()`, then this yield will return or throw,\n        // terminating the generator function early.\n        yield;\n      }\n    }\n  };\n};\n\n/**\n * Create a trapGuest that can be paired with makeAtomicsTrapHost.\n *\n * This guest iterates through the consecutive slices of the JSON-encoded data,\n * then returns it.\n *\n * @param {SharedArrayBuffer} transferBuffer\n * @returns {TrapGuest}\n */\nexport const makeAtomicsTrapGuest = transferBuffer => {\n  const { statusbuf, lenbuf, databuf } = splitTransferBuffer(transferBuffer);\n\n  return ({ startTrap }) => {\n    // Start by sending the trap call to the host.\n    const it = startTrap();\n\n    /** @type {Uint8Array | undefined} */\n    let encoded;\n    let i = 0;\n    let done = false;\n    while (!done) {\n      // Tell that we are ready for another buffer.\n      statusbuf[0] = STATUS_WAITING;\n      const { done: itDone } = it.next();\n      assert(!itDone, X`Internal error; it.next() returned done=${itDone}`);\n\n      // Wait for the host to wake us.\n      Atomics.wait(statusbuf, 0, STATUS_WAITING);\n\n      // Determine whether this is the last buffer.\n      // eslint-disable-next-line no-bitwise\n      done = (statusbuf[0] & STATUS_FLAG_DONE) !== 0;\n\n      // Accumulate the encoded buffer.\n      const remaining = Number(lenbuf[0]);\n      const datalen = Math.min(remaining, databuf.byteLength);\n      if (!encoded) {\n        if (done) {\n          // Special case: we are done on first try, so we don't need to copy\n          // anything.\n          encoded = databuf.subarray(0, datalen);\n          break;\n        }\n        // Allocate our buffer for the remaining data.\n        encoded = new Uint8Array(remaining);\n      }\n\n      // Copy the next buffer.\n      encoded.set(databuf.subarray(0, datalen), i);\n      i += datalen;\n    }\n\n    // This throw is harmless if the host iterator has already finished, and\n    // if not finished, captp will correctly raise an error.\n    //\n    // TODO: It would be nice to use an error type, but captp is just too\n    // noisy with spurious \"Temporary logging of sent error\" messages.\n    // it.throw(assert.error(X`Trap host has not finished`));\n    it.throw(null);\n\n    // eslint-disable-next-line no-bitwise\n    const isReject = !!(statusbuf[0] & STATUS_FLAG_REJECT);\n\n    // Decode the accumulated encoded buffer.\n    const td = new TextDecoder('utf-8');\n    const json = td.decode(encoded);\n\n    // Parse the JSON data into marshalled form.\n    const serialized = JSON.parse(json);\n    return [isReject, serialized];\n  };\n};\n"],"names":["getAlertUtilityClass","slot","generateUtilityClass","generateUtilityClasses","createSvgIcon","_jsx","d","_CloseIcon","_excluded","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","borderRadius","shape","backgroundColor","display","padding","light","alertClasses","main","border","fontWeight","fontWeightMedium","dark","AlertIcon","icon","marginRight","fontSize","opacity","AlertMessage","message","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","React","inProps","ref","useThemeProps","children","className","closeText","iconMapping","onClose","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","square","elevation","clsx","IconButton","size","title","onClick","CloseIcon","harden","applyFunction","target","args","applyMethod","prop","get","baseFreezableProxyHandler","set","_target","_prop","_value","isExtensible","setPrototypeOf","deleteProperty","makeTrap","trapImpl","Trap","x","handler","p","_receiver","apply","_thisArg","argArray","has","_p","TrapProxyHandler","Proxy","Object","create","details","X","assert","isThenable","maybeThenable","then","makeCapTP","ourId","rawSend","bootstrapObj","undefined","opts","onReject","err","console","epoch","trapGuest","trapHost","fail","disconnectReason","id","Error","JSON","stringify","trapIteratorResultP","Map","trapIterator","unplug","quietReject","async","reason","returnIt","Promise","resolve","reject","catch","_","send","obj","serialize","unserialize","makeMarshal","convertValToSlot","convertSlotToVal","marshalName","errorIdNum","valToSlot","WeakMap","slotToVal","exportedTrapHandlers","WeakSet","lastPromiseID","lastExportID","lastQuestionID","questions","answers","imports","val","isPromise","promiseID","res","type","rej","exportID","typeof","makeQuestion","questionID","pr","makeRemoteKit","resultVPID","_o","method","HandledPromise","resolveWithPresence","resPres","e","theirSlot","iface","otherDir","slice","Remotable","Number","bootstrap","E","bs","answerID","result","trap","body","QCLASS","index","hp","processResult","isReject","value","resultPK","makePromiseKit","promise","serialized","ait","done","fulfilment","CTP_TRAP_ITERATE","resultP","nextResultP","cleanup","delete","note","getNextResultP","exception","values","getBootstrap","dispatch","fn","abort","makeTrapHandler","far","Far","add","rets","makeTrapImpl","implMethod","implArgs","isException","trapMethod","trapArgs","startTrap","makeIteratorMethod","iteratorMethod","next","return","throw","BigUint64Array","BYTES_PER_ELEMENT","Int32Array"],"sourceRoot":""}