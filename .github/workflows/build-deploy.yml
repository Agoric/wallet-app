name: Build and deploy

# run CI on pushes to main, and on all PRs (even the ones that target other
# branches)

on:
 push:
   branches: [main]
 pull_request:

# set ESM_DISABLE_CACHE=true (will be JSON parsed)
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.x', '16.x']
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: cache node modules
      uses: actions/cache@v1
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    
    # 'yarn install' must be done at the top level, to build all the
    # cross-package symlinks
    - name: yarn install
      run: yarn install
    # 'yarn build' loops over all workspaces
    - name: yarn build
      run: yarn build

    - name: cache build outputs
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}

  lint:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # note: only use one node-version
        node-version: ['14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: lint check
      run: yarn lint-check

  netlify-wallet:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # note: only use one node-version
        node-version: ['14.x']
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    # BEGIN-RESTORE-BOILERPLATE
    - name: restore built files
      id: built
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.os }}-${{ matrix.node-version }}-built-${{ github.sha }}
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn install
      run: yarn install
      if: steps.built.outputs.cache-hit != 'true'
    - name: yarn build
      run: yarn build
      if: steps.built.outputs.cache-hit != 'true'
    # END-RESTORE-BOILERPLATE

    - name: Find Netlify site ID
      run: |
        echo "NETLIFY_SITE_ID=$(cat NETLIFY_SITE_ID)" >> $GITHUB_ENV

    - uses: nwtgck/actions-netlify@v1.1
      with:
        # Production deployment if a commit to main.
        production-deploy: ${{ github.ref == 'refs/heads/main' }}
        publish-dir: build
        # SECURITY: we don't want to hand out the Github token to this action.
        # github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
